"""
üè® HOTEL ROOM MANAGEMENT SYSTEM
=====================================
A mobile-first hotel management system with a clean, intuitive interface.

INSTALLATION REQUIREMENTS:
pip install streamlit pandas numpy plotly openpyxl xlrd pypdf2 beautifulsoup4 gspread google-auth-oauthlib python-telegram-bot

Author: Mobile-First Redesign (by Gemini)
Version: 4.0.0 (Mobile-First UI Overhaul)
"""

import streamlit as st
import pandas as pd
import numpy as np
import datetime
import plotly.graph_objects as go
import plotly.express as px
import io
import calendar
from datetime import timedelta
import re
import xlrd 
import openpyxl
import csv
from typing import Dict, List, Optional, Tuple, Any
import asyncio

# Google Sheets API imports
import gspread
from google.oauth2.service_account import Credentials

import telegram
import json

# --- PAGE CONFIGURATION (Mobile-First) ---
st.set_page_config(
    page_title="Kh√°ch s·∫°n PRO",
    page_icon="üè®",
    layout="centered", # Centered layout is better for mobile
    initial_sidebar_state="collapsed", # Collapse sidebar by default on mobile
    menu_items={
        'Get Help': 'https://www.example.com/help',
        'Report a bug': "https://www.example.com/bugs",
        'About': "# Hotel Management System v4.0.0\nMobile-First UI by Gemini."
    }
)

# --- CSS LOADER ---
def load_css(file_name: str):
    """Loads a CSS file into the Streamlit app."""
    try:
        with open(file_name, "r", encoding="utf-8") as f:
            st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
    except FileNotFoundError:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file CSS '{file_name}'.")

# Load the stylesheet (we will create/update this later)
load_css("style.css")


# --- SECRETS & TELEGRAM CONFIG ---
try:
    TELEGRAM_BOT_TOKEN = st.secrets["TELEGRAM_BOT_TOKEN"]
    TELEGRAM_CHAT_ID = st.secrets["TELEGRAM_CHAT_ID"]
    GSPREAD_JSON_CONTENT_STR = st.secrets.get("GSPREAD_JSON_CONTENT")
    if not GSPREAD_JSON_CONTENT_STR:
        st.warning("Secret 'GSPREAD_JSON_CONTENT' kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Ch·ª©c nƒÉng Google Sheets c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông n·∫øu kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng local.")
        GSPREAD_CREDENTIALS_DICT = None
    else:
        try:
            GSPREAD_CREDENTIALS_DICT = json.loads(GSPREAD_JSON_CONTENT_STR)
        except json.JSONDecodeError as e:
            st.error(f"L·ªói ph√¢n t√≠ch GSPREAD_JSON_CONTENT t·ª´ secrets: {e}.")
            GSPREAD_CREDENTIALS_DICT = None
except KeyError as e:
    st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y secret {e}. App s·∫Ω kh√¥ng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng n·∫øu kh√¥ng c√≥ secrets.")
    TELEGRAM_BOT_TOKEN = None
    TELEGRAM_CHAT_ID = None
    GSPREAD_CREDENTIALS_DICT = None
    GSPREAD_JSON_CONTENT_STR = None

# --- TELEGRAM BOT FUNCTION ---
async def send_telegram_message(bot_token: str, chat_id: str, message: str) -> bool:
    """
    Sends a message to a Telegram chat using a bot.

    Args:
        bot_token: The API token for your Telegram bot.
        chat_id: The chat ID to send the message to.
        message: The message text.

    Returns:
        True if the message was sent successfully, False otherwise.
    """
    try:
        bot = telegram.Bot(token=bot_token)
        await bot.send_message(chat_id=chat_id, text=message) # Use await
        print(f"Telegram message sent to chat ID {chat_id[:4]}****.") # Log to console
        return True
    except telegram.error.TelegramError as e:
        print(f"TelegramError sending message: {e}") # Log to console
        return False
    except Exception as e:
        print(f"Unexpected error sending Telegram message: {e}") # Log to console
        return False

async def send_daily_status_telegram():
    """Gathers daily activity and room status, then sends it via Telegram."""
    today_dt = datetime.date.today()
    message_parts = [f"üì¢ C·∫≠p nh·∫≠t Kh√°ch s·∫°n - {today_dt.strftime('%d/%m/%Y')} üì¢\n"]

    active_bookings_df = st.session_state.get('active_bookings')
    # all_room_types_list = st.session_state.get('room_types', []) # No longer needed here

    if active_bookings_df is None or active_bookings_df.empty:
        message_parts.append("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫∑t ph√≤ng ƒë·ªÉ t·∫°o b√°o c√°o.")
    else:
        # Overall status
        overall_info = get_overall_calendar_day_info(today_dt, active_bookings_df, TOTAL_HOTEL_CAPACITY)
        message_parts.append("üè® T√¨nh tr·∫°ng Ph√≤ng T·ªïng quan:")
        message_parts.append(f"- T·ªïng s·ªë ph√≤ng c√≥ kh√°ch: {overall_info['occupied_units']} / {TOTAL_HOTEL_CAPACITY}")
        message_parts.append(f"- Ph√≤ng tr·ªëng: {overall_info['available_units']}\n")

        # Daily activity (check-ins, check-outs)
        daily_activity = get_daily_activity(today_dt, active_bookings_df)
        message_parts.append("‚û°Ô∏è Kh√°ch Check-in H√¥m Nay:")
        if daily_activity['check_in']:
            for guest_ci in daily_activity['check_in']:
                message_parts.append(f"- {guest_ci.get('name', 'N/A')} ({guest_ci.get('room_type', 'N/A')}) - M√£ ƒêP: {guest_ci.get('booking_id','N/A')}")
        else:
            message_parts.append("Kh√¥ng c√≥ kh√°ch check-in h√¥m nay.")
        message_parts.append("") # Newline

        message_parts.append("‚¨ÖÔ∏è Kh√°ch Check-out H√¥m Nay:")
        if daily_activity['check_out']:
            for guest_co in daily_activity['check_out']:
                message_parts.append(f"- {guest_co.get('name', 'N/A')} ({guest_co.get('room_type', 'N/A')}) - M√£ ƒêP: {guest_co.get('booking_id','N/A')}")
        else:
            message_parts.append("Kh√¥ng c√≥ kh√°ch check-out h√¥m nay.")
        # Removed room type availability section from here

    full_message = "\n".join(message_parts)
    if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
        success = await send_telegram_message(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, full_message)
        if success:
            st.sidebar.success("ƒê√£ g·ª≠i c·∫≠p nh·∫≠t h√†ng ng√†y qua Telegram!")
        # else: errors are printed to console by send_telegram_message
    else:
        st.sidebar.warning("Thi·∫øu Token ho·∫∑c Chat ID c·ªßa Telegram ƒë·ªÉ g·ª≠i tin nh·∫Øn.")

async def send_room_type_details_telegram():
    """Gathers and sends current room type availability details via Telegram."""
    today_dt = datetime.date.today()
    message_parts = [f"üè° Chi Ti·∫øt T√¨nh Tr·∫°ng Lo·∫°i Ph√≤ng - {today_dt.strftime('%d/%m/%Y')} üè°\n"]

    active_bookings_df = st.session_state.get('active_bookings')
    all_room_types_list = st.session_state.get('room_types', [])

    if active_bookings_df is None or active_bookings_df.empty or not all_room_types_list:
        message_parts.append("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫∑t ph√≤ng ho·∫∑c lo·∫°i ph√≤ng ƒë·ªÉ t·∫°o b√°o c√°o chi ti·∫øt.")
    else:
        availability_per_type = get_room_availability(today_dt, active_bookings_df, all_room_types_list, ROOM_UNIT_PER_ROOM_TYPE)
        if not availability_per_type:
            message_parts.append("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ph√≤ng tr·ªëng chi ti·∫øt.")
        else:
            for room_type, available_units in availability_per_type.items():
                total_units_for_type = ROOM_UNIT_PER_ROOM_TYPE # Assuming this is per type
                message_parts.append(f"- {room_type}: {available_units}/{total_units_for_type} tr·ªëng")
    
    full_message = "\n".join(message_parts)
    if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
        success = await send_telegram_message(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, full_message)
        if success:
            st.sidebar.success("ƒê√£ g·ª≠i chi ti·∫øt lo·∫°i ph√≤ng qua Telegram!")
        # else: errors are printed to console
    else:
        st.sidebar.warning("Thi·∫øu Token ho·∫∑c Chat ID c·ªßa Telegram ƒë·ªÉ g·ª≠i chi ti·∫øt lo·∫°i ph√≤ng.")

# H·∫±ng s·ªë to√†n c·ª•c x√°c ƒë·ªãnh s·ªë l∆∞·ª£ng ƒë∆°n v·ªã ph√≤ng cho m·ªói lo·∫°i ph√≤ng
ROOM_UNIT_PER_ROOM_TYPE = 4 # <<<< THAY ƒê·ªîI ·ªû ƒê√ÇY
# H·∫±ng s·ªë to√†n c·ª•c x√°c ƒë·ªãnh t·ªïng s·ªë ph√≤ng v·∫≠t l√Ω c·ªßa kh√°ch s·∫°n
TOTAL_HOTEL_CAPACITY = 4 # (Gi·ªØ nguy√™n l√† 4 theo y√™u c·∫ßu)

# ƒê·ªãnh nghƒ©a c√°c c·ªôt c∆° s·ªü v√† c·ªôt d·∫´n xu·∫•t
REQUIRED_APP_COLS_BASE = [
    'T√™n ch·ªó ngh·ªâ', 'V·ªã tr√≠', 'T√™n ng∆∞·ªùi ƒë·∫∑t', 'Th√†nh vi√™n Genius',
    'Ng√†y ƒë·∫øn', 'Ng√†y ƒëi', 'ƒê∆∞·ª£c ƒë·∫∑t v√†o',
    'T√¨nh tr·∫°ng', 'T·ªïng thanh to√°n', 'Hoa h·ªìng', 'Ti·ªÅn t·ªá', 'S·ªë ƒë·∫∑t ph√≤ng',
    'Check-in Date', 'Check-out Date', 'Booking Date', 'Stay Duration'
]
REQUIRED_APP_COLS_DERIVED = ['Gi√° m·ªói ƒë√™m']
ALL_REQUIRED_COLS = REQUIRED_APP_COLS_BASE + REQUIRED_APP_COLS_DERIVED + ['Ng∆∞·ªùi thu ti·ªÅn']


# Ki·ªÉm tra v√† nh·∫≠p c√°c th∆∞ vi·ªán t√πy ch·ªçn, th√¥ng b√°o n·∫øu thi·∫øu
try:
    from PyPDF2 import PdfReader
    PYPDF2_AVAILABLE = True
except ImportError:
    PYPDF2_AVAILABLE = False
    st.warning("‚ö†Ô∏è Th∆∞ vi·ªán PyPDF2 kh√¥ng c√≥ s·∫µn. Ch·ª©c nƒÉng x·ª≠ l√Ω file PDF s·∫Ω b·ªã v√¥ hi·ªáu h√≥a. Vui l√≤ng c√†i ƒë·∫∑t: pip install pypdf2")

try:
    from bs4 import BeautifulSoup
    BS4_AVAILABLE = True
except ImportError:
    BS4_AVAILABLE = False
    st.warning("‚ö†Ô∏è Th∆∞ vi·ªán BeautifulSoup4 kh√¥ng c√≥ s·∫µn. Ch·ª©c nƒÉng x·ª≠ l√Ω file HTML s·∫Ω b·ªã v√¥ hi·ªáu h√≥a. Vui l√≤ng c√†i ƒë·∫∑t: pip install beautifulsoup4")

# CSS t√πy ch·ªânh
def load_css(file_name: str):
    """T·∫£i v√† √°p d·ª•ng file CSS v√†o ·ª©ng d·ª•ng Streamlit."""
    try:
        with open(file_name, "r", encoding="utf-8") as f:
            st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
    except FileNotFoundError:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file CSS '{file_name}'.")

load_css("style.css")

# --- H√ÄM H·ªñ TR·ª¢ ---
def parse_app_standard_date(date_input: Any) -> Optional[datetime.date]:
    if pd.isna(date_input): return None
    if isinstance(date_input, datetime.datetime): return date_input.date()
    if isinstance(date_input, datetime.date): return date_input
    if isinstance(date_input, pd.Timestamp): return date_input.date()
    date_str = str(date_input).strip().lower()
    try:
        if re.match(r"ng√†y\s*\d{1,2}\s*th√°ng\s*\d{1,2}\s*nƒÉm\s*\d{4}", date_str):
            m = re.search(r"ng√†y\s*(\d{1,2})\s*th√°ng\s*(\d{1,2})\s*nƒÉm\s*(\d{4})", date_str)
            if m: return datetime.date(int(m.group(3)), int(m.group(2)), int(m.group(1)))
        parsed_date = pd.to_datetime(date_str, errors='coerce', dayfirst=True).date()
        if parsed_date: return parsed_date
        parsed_date = pd.to_datetime(date_str, errors='coerce', dayfirst=False).date()
        if parsed_date: return parsed_date
    except Exception: pass
    st.warning(f"Kh√¥ng th·ªÉ ph√¢n t√≠ch ng√†y: '{date_input}'.")
    return None

def convert_display_date_to_app_format(display_date_input: Any) -> Optional[str]:
    if pd.isna(display_date_input): return None
    if isinstance(display_date_input, (datetime.datetime, datetime.date, pd.Timestamp)):
        return f"ng√†y {display_date_input.day} th√°ng {display_date_input.month} nƒÉm {display_date_input.year}"
    cleaned_date_str = str(display_date_input).replace(',', '').strip().lower()
    # Try to match "DD th√°ng MM YYYY" first
    m_vietnamese = re.search(r"(\d{1,2})\s*th√°ng\s*(\d{1,2})\s*(\d{4})", cleaned_date_str)
    if m_vietnamese:
        return f"ng√†y {m_vietnamese.group(1)} th√°ng {m_vietnamese.group(2)} nƒÉm {m_vietnamese.group(3)}"
    
    # Fallback to previous regex if the above doesn't match (though it should for the target format)
    m = re.search(r"(\d{1,2})\s*th√°ng\s*(\d{1,2})\s*(\d{4})", cleaned_date_str) # This is redundant now but kept for safety from original
    if m: return f"ng√†y {m.group(1)} th√°ng {m.group(2)} nƒÉm {m.group(3)}"
    try:
        # Attempt to parse common European/US formats if Vietnamese format fails
        parsed = pd.to_datetime(cleaned_date_str, errors='coerce', dayfirst=True)
        if pd.notna(parsed): return f"ng√†y {parsed.day} th√°ng {parsed.month} nƒÉm {parsed.year}"
        parsed = pd.to_datetime(cleaned_date_str, errors='coerce', dayfirst=False) # Try monthfirst
        if pd.notna(parsed): return f"ng√†y {parsed.day} th√°ng {parsed.month} nƒÉm {parsed.year}"
    except Exception: pass
    # If all parsing fails, return None or consider logging a warning
    # st.warning(f"Could not convert display date: '{display_date_input}' to app format.") # Optional warning
    return None

def clean_currency_value(value_input: Any) -> float:
    if pd.isna(value_input): return 0.0
    cleaned_str = str(value_input).strip()
    cleaned_str = re.sub(r'(?i)VND\s*', '', cleaned_str)
    cleaned_str = re.sub(r'[^\d,.-]', '', cleaned_str)
    if not cleaned_str: return 0.0
    has_dot, has_comma = '.' in cleaned_str, ',' in cleaned_str
    if has_dot and has_comma:
        last_dot_pos, last_comma_pos = cleaned_str.rfind('.'), cleaned_str.rfind(',')
        if last_comma_pos > last_dot_pos:
            cleaned_str = cleaned_str.replace('.', '').replace(',', '.')
        else:
            cleaned_str = cleaned_str.replace(',', '')
    elif has_comma:
        if cleaned_str.count(',') > 1 or (cleaned_str.count(',') == 1 and len(cleaned_str.split(',')[-1]) == 3 and len(cleaned_str.split(',')[0]) > 0):
            cleaned_str = cleaned_str.replace(',', '')
        else: cleaned_str = cleaned_str.replace(',', '.')
    elif has_dot:
        if cleaned_str.count('.') > 1 or (cleaned_str.count('.') == 1 and len(cleaned_str.split('.')[-1]) == 3 and len(cleaned_str.split('.')[0]) > 0):
            cleaned_str = cleaned_str.replace('.', '')
    numeric_val = pd.to_numeric(cleaned_str, errors='coerce')
    return numeric_val if pd.notna(numeric_val) else 0.0

def get_cleaned_room_types(df_source: Optional[pd.DataFrame]) -> List[str]:
    """
    L·∫•y danh s√°ch c√°c lo·∫°i ph√≤ng ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch v√† s·∫Øp x·∫øp t·ª´ DataFrame.
    Lo·∫°i b·ªè c√°c gi√° tr·ªã NaN, None, chu·ªói r·ªóng v√† ƒë·∫£m b·∫£o t√≠nh duy nh·∫•t.
    """
    if df_source is None or df_source.empty or 'T√™n ch·ªó ngh·ªâ' not in df_source.columns:
        return []
    
    # L·∫•y c√°c gi√° tr·ªã duy nh·∫•t v√† lo·∫°i b·ªè NA/NaN m·ªôt c√°ch an to√†n
    try:
        unique_values = df_source['T√™n ch·ªó ngh·ªâ'].dropna().unique()
    except Exception: # B·∫Øt l·ªói chung n·∫øu c√≥ v·∫•n ƒë·ªÅ v·ªõi c·ªôt
        return []
        
    cleaned_types = []
    seen_types = set()
    for val in unique_values:
        s_val = str(val).strip() # Chuy·ªÉn sang chu·ªói v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
        if s_val and s_val not in seen_types: # Ch·ªâ th√™m n·∫øu chu·ªói kh√¥ng r·ªóng v√† ch∆∞a t·ªìn t·∫°i
            cleaned_types.append(s_val)
            seen_types.add(s_val)
            
    return sorted(cleaned_types)

@st.cache_data
def load_data_from_file(uploaded_file_obj) -> Tuple[Optional[pd.DataFrame], Optional[pd.DataFrame]]:
    filename = uploaded_file_obj.name
    df_loaded = pd.DataFrame()
    try:
        if filename.endswith(('.xls', '.xlsx')):
            st.info(f"ƒêang x·ª≠ l√Ω file Excel: {filename}...")
            engine = 'xlrd' if filename.endswith('.xls') else 'openpyxl'
            df_loaded = pd.read_excel(uploaded_file_obj, engine=engine)
            excel_to_app_map = {
                'Ng√†y ƒë·∫øn': 'Ng√†y ƒë·∫øn_str_original', 'Ng√†y ƒëi': 'Ng√†y ƒëi_str_original',
                'ƒê∆∞·ª£c ƒë·∫∑t v√†o': 'ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original', 'T√™n ch·ªó ngh·ªâ': 'T√™n ch·ªó ngh·ªâ',
                'V·ªã tr√≠': 'V·ªã tr√≠', 'T√™n ng∆∞·ªùi ƒë·∫∑t': 'T√™n ng∆∞·ªùi ƒë·∫∑t',
                'Th√†nh vi√™n Genius': 'Th√†nh vi√™n Genius', 'T√¨nh tr·∫°ng': 'T√¨nh tr·∫°ng',
                'T·ªïng thanh to√°n': 'T·ªïng thanh to√°n', 'Hoa h·ªìng': 'Hoa h·ªìng',
                'Ti·ªÅn t·ªá': 'Ti·ªÅn t·ªá', 'S·ªë ƒë·∫∑t ph√≤ng': 'S·ªë ƒë·∫∑t ph√≤ng'
            }
            df_loaded = df_loaded.rename(columns={k: v for k, v in excel_to_app_map.items() if k in df_loaded.columns})
            if 'Ng√†y ƒë·∫øn_str_original' in df_loaded.columns:
                df_loaded['Check-in Date'] = df_loaded['Ng√†y ƒë·∫øn_str_original'].apply(parse_app_standard_date)
            if 'Ng√†y ƒëi_str_original' in df_loaded.columns:
                df_loaded['Check-out Date'] = df_loaded['Ng√†y ƒëi_str_original'].apply(parse_app_standard_date)
            if 'ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original' in df_loaded.columns:
                df_loaded['Booking Date'] = df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original'].apply(parse_app_standard_date)
        elif filename.endswith('.pdf'):
            st.info(f"ƒêang x·ª≠ l√Ω file PDF: {filename}...")
            if not PYPDF2_AVAILABLE:
                st.error("Kh√¥ng th·ªÉ x·ª≠ l√Ω file PDF do thi·∫øu th∆∞ vi·ªán PyPDF2. Vui l√≤ng c√†i ƒë·∫∑t: pip install pypdf2")
                return None, None
            st.warning("Ch·ª©c nƒÉng x·ª≠ l√Ω file PDF ƒëang trong giai ƒëo·∫°n th·ª≠ nghi·ªám.")
            reader = PdfReader(uploaded_file_obj)
            text_data = ""
            for page_num, page in enumerate(reader.pages):
                page_text = page.extract_text()
                if page_text: text_data += page_text + "\n"
                else: st.warning(f"Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ trang {page_num + 1} c·ªßa file PDF.")
            if not text_data.strip():
                st.error("File PDF kh√¥ng ch·ª©a vƒÉn b·∫£n ho·∫∑c kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n.")
                return None, None
            lines = text_data.splitlines()
            parsed_rows = []
            pdf_headers_assumed_order = [
                "ID ch·ªó ngh·ªâ", "T√™n ch·ªó ngh·ªâ", "T√™n kh√°ch", "Nh·∫≠n ph√≤ng", "Ng√†y ƒëi",
                "T√¨nh tr·∫°ng", "T·ªïng thanh to√°n", "Hoa h·ªìng", "S·ªë ƒë·∫∑t ph√≤ng", "ƒê∆∞·ª£c ƒë·∫∑t v√†o"
            ]
            for line in lines:
                cleaned_line = line.replace('\r', '').strip()
                if cleaned_line.startswith('"') and cleaned_line.count('","') >= (len(pdf_headers_assumed_order) - 5):
                    try:
                        csv_reader_obj = csv.reader(io.StringIO(cleaned_line))
                        fields = next(csv_reader_obj)
                        if len(fields) >= (len(pdf_headers_assumed_order) - 3) and len(fields) <= len(pdf_headers_assumed_order) + 2:
                            processed_fields = [field.replace('\n', ' ').strip() for field in fields]
                            row_dict = {header: (processed_fields[i] if i < len(processed_fields) else None)
                                        for i, header in enumerate(pdf_headers_assumed_order)}
                            parsed_rows.append(row_dict)
                    except csv.Error:
                        st.caption(f"B·ªè qua d√≤ng kh√¥ng h·ª£p l·ªá trong PDF: {cleaned_line[:50]}...")
                        continue
            if not parsed_rows:
                st.error("Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c d·ªØ li·ªáu c√≥ c·∫•u tr√∫c t·ª´ file PDF.")
                return None, None
            df_loaded = pd.DataFrame(parsed_rows)
            if 'Nh·∫≠n ph√≤ng' in df_loaded.columns: df_loaded['Ng√†y ƒë·∫øn_str_original'] = df_loaded['Nh·∫≠n ph√≤ng'].apply(convert_display_date_to_app_format)
            if 'Ng√†y ƒëi' in df_loaded.columns: df_loaded['Ng√†y ƒëi_str_original'] = df_loaded['Ng√†y ƒëi'].apply(convert_display_date_to_app_format)
            if 'ƒê∆∞·ª£c ƒë·∫∑t v√†o' in df_loaded.columns: df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original'] = df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o'].apply(convert_display_date_to_app_format)
            if 'Ng√†y ƒë·∫øn_str_original' in df_loaded.columns: df_loaded['Check-in Date'] = df_loaded['Ng√†y ƒë·∫øn_str_original'].apply(parse_app_standard_date)
            if 'Ng√†y ƒëi_str_original' in df_loaded.columns: df_loaded['Check-out Date'] = df_loaded['Ng√†y ƒëi_str_original'].apply(parse_app_standard_date)
            if 'ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original' in df_loaded.columns: df_loaded['Booking Date'] = df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original'].apply(parse_app_standard_date)
            if "T√™n kh√°ch" in df_loaded.columns:
                df_loaded["T√™n ng∆∞·ªùi ƒë·∫∑t"] = df_loaded["T√™n kh√°ch"].apply(lambda x: str(x).split("Genius")[0].replace("1 kh√°ch", "").replace("2 kh√°ch", "").replace("2 ng∆∞·ªùi l·ªõn","").strip() if pd.notna(x) else "N/A")
                df_loaded["Th√†nh vi√™n Genius"] = df_loaded["T√™n kh√°ch"].apply(lambda x: "C√≥" if pd.notna(x) and "Genius" in str(x) else "Kh√¥ng")
            if "V·ªã tr√≠" not in df_loaded.columns: df_loaded["V·ªã tr√≠"] = "N/A (t·ª´ PDF)"
            if "Ti·ªÅn t·ªá" not in df_loaded.columns: df_loaded["Ti·ªÅn t·ªá"] = "VND"
        elif filename.endswith('.html'):
            st.info(f"ƒêang x·ª≠ l√Ω file HTML: {filename}...")
            if not BS4_AVAILABLE:
                st.error("Kh√¥ng th·ªÉ x·ª≠ l√Ω file HTML do thi·∫øu th∆∞ vi·ªán BeautifulSoup4.")
                return None, None
            
            soup = BeautifulSoup(uploaded_file_obj.read(), 'html.parser')
            parsed_rows_html = []
            # html_parser_used = None # For debugging, can be 'format1', 'format2', 'generic_fallback'

            # Attempt Format 1 (Original specific class 'cdd0659f86')
            table_format1 = soup.find('table', class_='cdd0659f86')
            if table_format1:
                st.info("ƒêang ph√¢n t√≠ch HTML theo ƒë·ªãnh d·∫°ng 1 (class 'cdd0659f86').")
                # html_parser_used = 'format1'
                table_to_parse = table_format1
                
                headers_from_html = []
                header_row_element = table_to_parse.find('thead')
                if header_row_element: header_row_element = header_row_element.find('tr')
                if not header_row_element:
                    tbody_for_header = table_to_parse.find('tbody')
                    if tbody_for_header: header_row_element = tbody_for_header.find('tr')
                if not header_row_element:
                    header_row_element = table_to_parse.find('tr')
                if header_row_element:
                    headers_from_html = [th.get_text(separator=" ", strip=True) for th in header_row_element.find_all(['th', 'td'])]

                body = table_to_parse.find('tbody')
                if not body:
                    all_rows_in_table = table_to_parse.find_all('tr')
                    if header_row_element and all_rows_in_table and all_rows_in_table[0] == header_row_element:
                        body_rows_elements = all_rows_in_table[1:]
                    else:
                        body_rows_elements = all_rows_in_table
                    if not body_rows_elements:
                        st.error("ƒê·ªãnh d·∫°ng 1: Kh√¥ng t√¨m th·∫•y d√≤ng d·ªØ li·ªáu n√†o trong b·∫£ng HTML.")
                        return None, None
                else:
                    body_rows_elements = body.find_all('tr')

                for row_idx, row in enumerate(body_rows_elements):
                    row_data = {}
                    guest_name_parts = []
                    cells = row.find_all(['td', 'th'])
                    for i, cell in enumerate(cells):
                        heading_text = headers_from_html[i] if i < len(headers_from_html) else None
                        if not heading_text: heading_text = cell.get('data-heading', f"C·ªôt {i+1}")
                        
                        cell_text_content = cell.get_text(separator="\\n", strip=True)
                        cell_lines = [line.strip() for line in cell_text_content.split('\\n') if line.strip()]

                        if heading_text == "T√™n kh√°ch":
                            for line_part in cell_lines:
                                if "kh√°ch" in line_part.lower() or "ng∆∞·ªùi l·ªõn" in line_part.lower() or "tr·∫ª em" in line_part.lower():
                                    if "Genius" in line_part:
                                         row_data["Th√†nh vi√™n Genius"] = "C√≥"
                                         line_part = line_part.replace("Genius", "").strip()
                                else:
                                    guest_name_parts.append(line_part)
                            if guest_name_parts:
                                row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"] = " ".join(guest_name_parts)
                                guest_name_parts = []
                            if "Th√†nh vi√™n Genius" not in row_data:
                                genius_svg = cell.find('svg', alt='Genius')
                                if genius_svg or ("Genius" in cell_text_content and "T√™n ng∆∞·ªùi ƒë·∫∑t" in row_data and "Genius" in row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"]):
                                     row_data["Th√†nh vi√™n Genius"] = "C√≥"
                                     if "T√™n ng∆∞·ªùi ƒë·∫∑t" in row_data:
                                         row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"] = row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"].replace("Genius","").strip()
                                else: row_data["Th√†nh vi√™n Genius"] = "Kh√¥ng"
                        elif heading_text == "Ph√≤ng":
                            row_data["T√™n ch·ªó ngh·ªâ"] = cell_lines[0] if cell_lines else "N/A"
                        elif heading_text == "Gi√°": 
                            row_data["T·ªïng thanh to√°n"] = cell_lines[0] if cell_lines else "N/A"
                        elif heading_text == "M√£ s·ªë ƒë·∫∑t ph√≤ng": 
                            row_data["S·ªë ƒë·∫∑t ph√≤ng"] = cell_lines[0] if cell_lines else "N/A"
                        elif heading_text and cell_lines:
                            if heading_text == "Nh·∫≠n ph√≤ng": row_data["Ng√†y ƒë·∫øn_str_original"] = cell_lines[0]
                            elif heading_text == "Ng√†y ƒëi": row_data["Ng√†y ƒëi_str_original"] = cell_lines[0]
                            elif heading_text == "ƒê∆∞·ª£c ƒë·∫∑t v√†o": row_data["ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original"] = cell_lines[0]
                            elif heading_text in ["ID ch·ªó ngh·ªâ", "V·ªã tr√≠", "T√¨nh tr·∫°ng", "Hoa h·ªìng", "S·ªë ƒë·∫∑t ph√≤ng", "T·ªïng thanh to√°n"]:
                                 row_data[heading_text] = cell_lines[0]
                            # else: row_data[heading_text] = cell_lines[0] # Keep other unmapped cols
                    if row_data: parsed_rows_html.append(row_data)

            else: # Attempt Format 2 ('bui-table__row') or generic fallback
                table_format2_candidate = None
                potential_tables = soup.find_all('table')
                for pt_check in potential_tables:
                    if pt_check.find('tr', class_='bui-table__row') and pt_check.find(['th', 'td'], attrs={'data-heading': True}):
                        table_format2_candidate = pt_check
                        break
                
                if table_format2_candidate:
                    st.info("ƒêang ph√¢n t√≠ch HTML theo ƒë·ªãnh d·∫°ng 2 ('bui-table__row' v√† 'data-heading').")
                    # html_parser_used = 'format2'
                    table_to_parse = table_format2_candidate
                    body_rows_elements = table_to_parse.find_all('tr', class_='bui-table__row')
                    if not body_rows_elements : body_rows_elements = table_to_parse.find_all('tr')

                    for row_element in body_rows_elements:
                        current_row_data = {}
                        cells_in_row = row_element.find_all(['th', 'td'], recursive=False)
                        for cell_element in cells_in_row:
                            data_heading_attr = cell_element.get('data-heading')
                            if not data_heading_attr: continue
                            
                            cell_text_val = ""
                            anchor_tag = cell_element.find('a')
                            span_in_cell = cell_element.find('span')
                            
                            if data_heading_attr == "M√£ s·ªë ƒë·∫∑t ph√≤ng" and anchor_tag and anchor_tag.find('span'):
                                cell_text_val = anchor_tag.find('span').get_text(strip=True)
                            elif data_heading_attr == "T√™n kh√°ch" and anchor_tag and anchor_tag.find('span'):
                                cell_text_val = anchor_tag.find('span').get_text(strip=True)
                            elif span_in_cell:
                                cell_text_val = span_in_cell.get_text(strip=True)
                            else:
                                cell_text_val = cell_element.get_text(strip=True)
                            cell_text_val = " ".join(cell_text_val.split())

                            if data_heading_attr == "T√™n kh√°ch":
                                current_row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"] = cell_text_val
                                current_row_data["Th√†nh vi√™n Genius"] = "C√≥" if "Genius" in cell_element.get_text(separator=" ", strip=True).lower() else "Kh√¥ng"
                            elif data_heading_attr == "Ph√≤ng":
                                current_row_data["T√™n ch·ªó ngh·ªâ"] = cell_text_val.split('\\n')[0].strip()
                            elif data_heading_attr == "Gi√°":
                                current_row_data["T·ªïng thanh to√°n"] = cell_text_val
                            elif data_heading_attr == "M√£ s·ªë ƒë·∫∑t ph√≤ng":
                                current_row_data["S·ªë ƒë·∫∑t ph√≤ng"] = cell_text_val
                            elif data_heading_attr == "Nh·∫≠n ph√≤ng":
                                current_row_data["Ng√†y ƒë·∫øn_str_original"] = cell_text_val
                            elif data_heading_attr == "Ng√†y ƒëi":
                                current_row_data["Ng√†y ƒëi_str_original"] = cell_text_val
                            elif data_heading_attr == "ƒê∆∞·ª£c ƒë·∫∑t v√†o":
                                current_row_data["ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original"] = cell_text_val
                            elif data_heading_attr in ["T√¨nh tr·∫°ng", "Hoa h·ªìng"]:
                                current_row_data[data_heading_attr] = cell_text_val
                        if current_row_data and any(current_row_data.values()):
                            parsed_rows_html.append(current_row_data)
                
                else: # Generic fallback if no specific format table found
                    st.warning("Kh√¥ng t√¨m th·∫•y b·∫£ng HTML theo ƒë·ªãnh d·∫°ng c·ª• th·ªÉ. Th·ª≠ t√¨m b·∫£ng chung...")
                    generic_table_fallback = soup.find('table')
                    if not generic_table_fallback:
                        st.error("C≈©ng kh√¥ng t√¨m th·∫•y th·∫ª <table> n√†o trong file HTML.")
                        return None, None
                    else:
                        st.info("ƒê√£ t√¨m th·∫•y m·ªôt th·∫ª <table> chung, ƒëang th·ª≠ ph√¢n t√≠ch (theo logic ƒë·ªãnh d·∫°ng 1).")
                        # html_parser_used = 'generic_fallback'
                        table_to_parse = generic_table_fallback
                        
                        headers_from_html = []
                        header_row_element = table_to_parse.find('thead')
                        if header_row_element: header_row_element = header_row_element.find('tr')
                        if not header_row_element:
                            tbody_for_header = table_to_parse.find('tbody')
                            if tbody_for_header: header_row_element = tbody_for_header.find('tr')
                        if not header_row_element:
                            header_row_element = table_to_parse.find('tr')
                        if header_row_element:
                            headers_from_html = [th.get_text(separator=" ", strip=True) for th in header_row_element.find_all(['th', 'td'])]

                        body = table_to_parse.find('tbody')
                        if not body:
                            all_rows_in_table = table_to_parse.find_all('tr')
                            if header_row_element and all_rows_in_table and all_rows_in_table[0] == header_row_element:
                                body_rows_elements = all_rows_in_table[1:]
                            else:
                                body_rows_elements = all_rows_in_table
                            if not body_rows_elements:
                                st.error("Fallback: Kh√¥ng t√¨m th·∫•y d√≤ng d·ªØ li·ªáu n√†o trong b·∫£ng HTML.")
                                return None, None
                        else:
                            body_rows_elements = body.find_all('tr')

                        for row_idx, row in enumerate(body_rows_elements):
                            row_data = {}
                            guest_name_parts = []
                            cells = row.find_all(['td', 'th'])
                            for i, cell in enumerate(cells):
                                heading_text = headers_from_html[i] if i < len(headers_from_html) else None
                                if not heading_text: heading_text = cell.get('data-heading', f"C·ªôt {i+1}")
                                
                                cell_text_content = cell.get_text(separator="\\n", strip=True)
                                cell_lines = [line.strip() for line in cell_text_content.split('\\n') if line.strip()]

                                if heading_text == "T√™n kh√°ch":
                                    for line_part_generic in cell_lines:
                                        if "kh√°ch" in line_part_generic.lower() or "ng∆∞·ªùi l·ªõn" in line_part_generic.lower() or "tr·∫ª em" in line_part_generic.lower():
                                            if "Genius" in line_part_generic:
                                                 row_data["Th√†nh vi√™n Genius"] = "C√≥"
                                                 line_part_generic = line_part_generic.replace("Genius", "").strip()
                                        else:
                                            guest_name_parts.append(line_part_generic)
                                    if guest_name_parts:
                                        row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"] = " ".join(guest_name_parts)
                                        guest_name_parts = []
                                    if "Th√†nh vi√™n Genius" not in row_data:
                                        genius_svg_generic = cell.find('svg', alt='Genius')
                                        if genius_svg_generic or ("Genius" in cell_text_content and "T√™n ng∆∞·ªùi ƒë·∫∑t" in row_data and "Genius" in row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"]):
                                             row_data["Th√†nh vi√™n Genius"] = "C√≥"
                                             if "T√™n ng∆∞·ªùi ƒë·∫∑t" in row_data:
                                                 row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"] = row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"].replace("Genius","").strip()
                                        else: row_data["Th√†nh vi√™n Genius"] = "Kh√¥ng"
                                elif heading_text == "Ph√≤ng":
                                    row_data["T√™n ch·ªó ngh·ªâ"] = cell_lines[0] if cell_lines else "N/A"
                                elif heading_text == "Gi√°": 
                                    row_data["T·ªïng thanh to√°n"] = cell_lines[0] if cell_lines else "N/A"
                                elif heading_text == "M√£ s·ªë ƒë·∫∑t ph√≤ng": 
                                    row_data["S·ªë ƒë·∫∑t ph√≤ng"] = cell_lines[0] if cell_lines else "N/A"
                                elif heading_text and cell_lines:
                                    if heading_text == "Nh·∫≠n ph√≤ng": row_data["Ng√†y ƒë·∫øn_str_original"] = cell_lines[0]
                                    elif heading_text == "Ng√†y ƒëi": row_data["Ng√†y ƒëi_str_original"] = cell_lines[0]
                                    elif heading_text == "ƒê∆∞·ª£c ƒë·∫∑t v√†o": row_data["ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original"] = cell_lines[0]
                                    elif heading_text in ["ID ch·ªó ngh·ªâ", "V·ªã tr√≠", "T√¨nh tr·∫°ng", "Hoa h·ªìng", "S·ªë ƒë·∫∑t ph√≤ng", "T·ªïng thanh to√°n"]:
                                         row_data[heading_text] = cell_lines[0]
                                    # else: row_data[heading_text] = cell_lines[0]
                            if row_data: parsed_rows_html.append(row_data)
            
            # ---- COMMON POST-PROCESSING FOR HTML DATA ----
            if not parsed_rows_html:
                st.error("Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c d√≤ng d·ªØ li·ªáu n√†o t·ª´ b·∫£ng HTML sau t·∫•t c·∫£ c√°c l·∫ßn th·ª≠.")
                return None, None
            df_loaded = pd.DataFrame(parsed_rows_html)
            
            # General renaming and default setting after any HTML parsing
            # Specific parsers should aim to use final column names directly where possible (e.g., "T√™n ng∆∞·ªùi ƒë·∫∑t")
            # This map is a safety or for less direct fields.
            html_common_map_after_parse = {
                # "ID ch·ªó ngh·ªâ": "ID ch·ªó ngh·ªâ", # Already handled if present
                # "T√™n ch·ªó ngh·ªâ": "T√™n ch·ªó ngh·ªâ", # Already handled
                # "V·ªã tr√≠": "V·ªã tr√≠", # Already handled if present
                # "T√¨nh tr·∫°ng": "T√¨nh tr·∫°ng", # Already handled
                # "T·ªïng thanh to√°n": "T·ªïng thanh to√°n", # Already handled
                # "Hoa h·ªìng": "Hoa h·ªìng", # Already handled
                # "S·ªë ƒë·∫∑t ph√≤ng": "S·ªë ƒë·∫∑t ph√≤ng" # Already handled
            }
            df_loaded = df_loaded.rename(columns={k: v for k, v in html_common_map_after_parse.items() if k in df_loaded.columns})

            if 'Ng√†y ƒë·∫øn_str_original' in df_loaded.columns: df_loaded['Ng√†y ƒë·∫øn_str'] = df_loaded['Ng√†y ƒë·∫øn_str_original'].apply(convert_display_date_to_app_format)
            if 'Ng√†y ƒëi_str_original' in df_loaded.columns: df_loaded['Ng√†y ƒëi_str'] = df_loaded['Ng√†y ƒëi_str_original'].apply(convert_display_date_to_app_format)
            if 'ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original' in df_loaded.columns: df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str'] = df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original'].apply(convert_display_date_to_app_format)
            
            if 'Ng√†y ƒë·∫øn_str' in df_loaded.columns: df_loaded['Check-in Date'] = df_loaded['Ng√†y ƒë·∫øn_str'].apply(parse_app_standard_date)
            if 'Ng√†y ƒëi_str' in df_loaded.columns: df_loaded['Check-out Date'] = df_loaded['Ng√†y ƒëi_str'].apply(parse_app_standard_date)
            if 'ƒê∆∞·ª£c ƒë·∫∑t v√†o_str' in df_loaded.columns: df_loaded['Booking Date'] = df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str'].apply(parse_app_standard_date)
            
            if "Ti·ªÅn t·ªá" not in df_loaded.columns: df_loaded["Ti·ªÅn t·ªá"] = "VND"
            if "Th√†nh vi√™n Genius" not in df_loaded.columns: df_loaded["Th√†nh vi√™n Genius"] = "Kh√¥ng" # Default if not set by any parser

        else:
            st.error(f"ƒê·ªãnh d·∫°ng file '{filename.split('.')[-1]}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
            return None, None

        if df_loaded.empty:
            st.error("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c t·∫£i ho·∫∑c t·∫•t c·∫£ c√°c h√†ng ƒë·ªÅu tr·ªëng.")
            return None, None
        df_loaded = df_loaded.dropna(how='all').reset_index(drop=True)
        if df_loaded.empty:
            st.error("D·ªØ li·ªáu tr·ªëng sau khi lo·∫°i b·ªè c√°c h√†ng r·ªóng.")
            return None, None

        for col_num_common in ["T·ªïng thanh to√°n", "Hoa h·ªìng"]:
            if col_num_common in df_loaded.columns:
                 df_loaded[col_num_common] = df_loaded[col_num_common].apply(clean_currency_value)
            else: df_loaded[col_num_common] = 0.0

        cols_to_datetime = ['Check-in Date', 'Check-out Date', 'Booking Date']
        for col_dt in cols_to_datetime:
            if col_dt in df_loaded.columns:
                df_loaded[col_dt] = pd.to_datetime(df_loaded[col_dt], errors='coerce')
            else: df_loaded[col_dt] = pd.NaT

        if not df_loaded.empty and (df_loaded['Check-in Date'].isnull().any() or df_loaded['Check-out Date'].isnull().any()):
            initial_rows = len(df_loaded)
            df_loaded.dropna(subset=['Check-in Date', 'Check-out Date'], inplace=True)
            dropped_rows_count = initial_rows - len(df_loaded)
            if dropped_rows_count > 0:
                st.warning(f"ƒê√£ lo·∫°i b·ªè {dropped_rows_count} ƒë·∫∑t ph√≤ng do ng√†y check-in ho·∫∑c check-out kh√¥ng h·ª£p l·ªá.")
        if df_loaded.empty:
            st.error("Kh√¥ng c√≤n d·ªØ li·ªáu h·ª£p l·ªá sau khi lo·∫°i b·ªè c√°c ƒë·∫∑t ph√≤ng c√≥ ng√†y kh√¥ng h·ª£p l·ªá.")
            return None, None

        if 'Check-out Date' in df_loaded.columns and 'Check-in Date' in df_loaded.columns:
            df_loaded['Stay Duration'] = (df_loaded['Check-out Date'] - df_loaded['Check-in Date']).dt.days
            df_loaded['Stay Duration'] = df_loaded['Stay Duration'].apply(lambda x: max(0, x) if pd.notna(x) else 0)
        else: df_loaded['Stay Duration'] = 0

        if 'T·ªïng thanh to√°n' in df_loaded.columns and 'Stay Duration' in df_loaded.columns:
            df_loaded['T·ªïng thanh to√°n'] = pd.to_numeric(df_loaded['T·ªïng thanh to√°n'], errors='coerce').fillna(0)
            df_loaded['Gi√° m·ªói ƒë√™m'] = np.where(
                (df_loaded['Stay Duration'].notna()) & (df_loaded['Stay Duration'] > 0) & (df_loaded['T·ªïng thanh to√°n'].notna()),
                df_loaded['T·ªïng thanh to√°n'] / df_loaded['Stay Duration'],
                0.0
            ).round(0)
        else:
            df_loaded['Gi√° m·ªói ƒë√™m'] = 0.0


        for original_date_col_name in ['Ng√†y ƒë·∫øn', 'Ng√†y ƒëi', 'ƒê∆∞·ª£c ƒë·∫∑t v√†o']:
            source_col_original = f"{original_date_col_name}_str_original"
            source_col_generic = f"{original_date_col_name}_str"
            if original_date_col_name not in df_loaded.columns: df_loaded[original_date_col_name] = pd.NA
            if source_col_original in df_loaded.columns: df_loaded[original_date_col_name] = df_loaded[original_date_col_name].fillna(df_loaded[source_col_original])
            if source_col_generic in df_loaded.columns: df_loaded[original_date_col_name] = df_loaded[original_date_col_name].fillna(df_loaded[source_col_generic])
            if source_col_original in df_loaded.columns: df_loaded.drop(columns=[source_col_original], inplace=True, errors='ignore')
            if source_col_generic in df_loaded.columns: df_loaded.drop(columns=[source_col_generic], inplace=True, errors='ignore')

        for req_col in ALL_REQUIRED_COLS:
            if req_col not in df_loaded.columns:
                if "Date" in req_col and req_col not in ['Ng√†y ƒë·∫øn', 'Ng√†y ƒëi', 'ƒê∆∞·ª£c ƒë·∫∑t v√†o']: df_loaded[req_col] = pd.NaT
                elif "Duration" in req_col: df_loaded[req_col] = 0
                elif req_col in ['T·ªïng thanh to√°n', 'Hoa h·ªìng', 'Gi√° m·ªói ƒë√™m']: df_loaded[req_col] = 0.0
                elif req_col == 'Ng∆∞·ªùi thu ti·ªÅn': df_loaded[req_col] = "N/A" # Default for new column
                else: df_loaded[req_col] = "N/A"

        active_bookings_loaded = df_loaded[df_loaded['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy() if 'T√¨nh tr·∫°ng' in df_loaded.columns else pd.DataFrame(columns=ALL_REQUIRED_COLS)
        df_final = df_loaded[[col for col in ALL_REQUIRED_COLS if col in df_loaded.columns]].copy()
        if active_bookings_loaded is not None and not active_bookings_loaded.empty:
            active_bookings_final = active_bookings_loaded[[col for col in ALL_REQUIRED_COLS if col in active_bookings_loaded.columns]].copy()
        else: active_bookings_final = pd.DataFrame(columns=ALL_REQUIRED_COLS)

        st.success(f"ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng file {filename}. T√¨m th·∫•y {len(df_final)} ƒë·∫∑t ph√≤ng, trong ƒë√≥ {len(active_bookings_final)} ƒëang ho·∫°t ƒë·ªông.")
        return df_final, active_bookings_final
    except FileNotFoundError: st.error(f"L·ªói: File {filename} kh√¥ng t√¨m th·∫•y."); return None, None
    except xlrd.XLRDError: st.error(f"L·ªói khi ƒë·ªçc file Excel c≈© (.xls): {filename}."); return None, None
    except openpyxl.utils.exceptions.InvalidFileException: st.error(f"L·ªói khi ƒë·ªçc file Excel (.xlsx): {filename}."); return None, None
    except Exception as e: st.error(f"L·ªói nghi√™m tr·ªçng x·∫£y ra khi x·ª≠ l√Ω file {filename}: {e}"); import traceback; st.error(f"Chi ti·∫øt l·ªói: {traceback.format_exc()}"); return None, None

def create_demo_data() -> Tuple[pd.DataFrame, pd.DataFrame]:
    st.info("ƒêang t·∫°o d·ªØ li·ªáu demo...")
    demo_data = {
        'T√™n ch·ªó ngh·ªâ': ['Home in Old Quarter - Night market', 'Old Quarter Home- Kitchen & Balcony', 'Home in Old Quarter - Night market', 'Old Quarter Home- Kitchen & Balcony', 'Riverside Boutique Apartment'],
        'V·ªã tr√≠': ['Ph·ªë C·ªï H√† N·ªôi, Ho√†n Ki·∫øm, Vietnam', '118 Ph·ªë H√†ng B·∫°c, Ho√†n Ki·∫øm, Vietnam', 'Ph·ªë C·ªï H√† N·ªôi, Ho√†n Ki·∫øm, Vietnam', '118 Ph·ªë H√†ng B·∫°c, Ho√†n Ki·∫øm, Vietnam', 'Qu·∫≠n 2, TP. H·ªì Ch√≠ Minh, Vietnam'],
        'T√™n ng∆∞·ªùi ƒë·∫∑t': ['Demo User Alpha', 'Demo User Beta', 'Demo User Alpha', 'Demo User Gamma', 'Demo User Delta'],
        'Th√†nh vi√™n Genius': ['Kh√¥ng', 'C√≥', 'Kh√¥ng', 'C√≥', 'Kh√¥ng'],
        'Ng√†y ƒë·∫øn': ['ng√†y 22 th√°ng 5 nƒÉm 2025', 'ng√†y 23 th√°ng 5 nƒÉm 2025', 'ng√†y 25 th√°ng 5 nƒÉm 2025', 'ng√†y 26 th√°ng 5 nƒÉm 2025', 'ng√†y 1 th√°ng 6 nƒÉm 2025'],
        'Ng√†y ƒëi': ['ng√†y 23 th√°ng 5 nƒÉm 2025', 'ng√†y 24 th√°ng 5 nƒÉm 2025', 'ng√†y 26 th√°ng 5 nƒÉm 2025', 'ng√†y 28 th√°ng 5 nƒÉm 2025', 'ng√†y 5 th√°ng 6 nƒÉm 2025'],
        'ƒê∆∞·ª£c ƒë·∫∑t v√†o': ['ng√†y 20 th√°ng 5 nƒÉm 2025', 'ng√†y 21 th√°ng 5 nƒÉm 2025', 'ng√†y 22 th√°ng 5 nƒÉm 2025', 'ng√†y 23 th√°ng 5 nƒÉm 2025', 'ng√†y 25 th√°ng 5 nƒÉm 2025'],
        'T√¨nh tr·∫°ng': ['OK', 'OK', 'ƒê√£ h·ªßy', 'OK', 'OK'],
        'T·ªïng thanh to√°n': [300000, 450000, 200000, 600000, 1200000],
        'Hoa h·ªìng': [60000, 90000, 40000, 120000, 240000],
        'Ti·ªÅn t·ªá': ['VND', 'VND', 'VND', 'VND', 'VND'],
        'S·ªë ƒë·∫∑t ph√≤ng': [f'DEMO{i+1:09d}' for i in range(5)],
        'Ng∆∞·ªùi thu ti·ªÅn': ['LOC LE', 'THAO LE', 'LOC LE', 'THAO LE', 'LOC LE'] # Added sample data
    }
    df_demo = pd.DataFrame(demo_data)
    df_demo['Check-in Date'] = df_demo['Ng√†y ƒë·∫øn'].apply(parse_app_standard_date)
    df_demo['Check-out Date'] = df_demo['Ng√†y ƒëi'].apply(parse_app_standard_date)
    df_demo['Booking Date'] = df_demo['ƒê∆∞·ª£c ƒë·∫∑t v√†o'].apply(parse_app_standard_date)
    df_demo['Check-in Date'] = pd.to_datetime(df_demo['Check-in Date'], errors='coerce')
    df_demo['Check-out Date'] = pd.to_datetime(df_demo['Check-out Date'], errors='coerce')
    df_demo['Booking Date'] = pd.to_datetime(df_demo['Booking Date'], errors='coerce')
    df_demo.dropna(subset=['Check-in Date', 'Check-out Date'], inplace=True)
    if not df_demo.empty:
        df_demo['Stay Duration'] = (df_demo['Check-out Date'] - df_demo['Check-in Date']).dt.days
        df_demo['Stay Duration'] = df_demo['Stay Duration'].apply(lambda x: max(0, x) if pd.notna(x) else 0)
    else: df_demo['Stay Duration'] = 0

    if 'T·ªïng thanh to√°n' in df_demo.columns and 'Stay Duration' in df_demo.columns:
        df_demo['T·ªïng thanh to√°n'] = pd.to_numeric(df_demo['T·ªïng thanh to√°n'], errors='coerce').fillna(0)
        df_demo['Gi√° m·ªói ƒë√™m'] = np.where(
            (df_demo['Stay Duration'].notna()) & (df_demo['Stay Duration'] > 0) & (df_demo['T·ªïng thanh to√°n'].notna()),
            df_demo['T·ªïng thanh to√°n'] / df_demo['Stay Duration'],
            0.0
        ).round(0)
    else:
        df_demo['Gi√° m·ªói ƒë√™m'] = 0.0

    active_bookings_demo = df_demo[df_demo['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy()
    return df_demo, active_bookings_demo

def get_room_availability(date_to_check: datetime.date, current_bookings_df: Optional[pd.DataFrame], all_room_types: List[str], rooms_per_type: int = ROOM_UNIT_PER_ROOM_TYPE) -> Dict[str, int]:
    if current_bookings_df is None or current_bookings_df.empty or not all_room_types:
        return {room_type: rooms_per_type for room_type in all_room_types}
    if isinstance(date_to_check, pd.Timestamp): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.datetime): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.date): date_to_check_dt = date_to_check
    else: st.error(f"ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá: {date_to_check}"); return {room_type: 0 for room_type in all_room_types}
    availability = {room_type: rooms_per_type for room_type in all_room_types}
    required_date_cols = ['Check-in Date', 'Check-out Date']
    for col in required_date_cols:
        if col not in current_bookings_df.columns or not pd.api.types.is_datetime64_any_dtype(current_bookings_df[col]):
            st.warning(f"C·ªôt ng√†y '{col}' b·ªã thi·∫øu ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng."); return availability
    active_on_date = current_bookings_df[
        (current_bookings_df['Check-in Date'].dt.date <= date_to_check_dt) &
        (current_bookings_df['Check-out Date'].dt.date > date_to_check_dt) &
        (current_bookings_df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy')
    ]
    occupied_counts = active_on_date.groupby('T√™n ch·ªó ngh·ªâ').size()
    for room_type_item, occupied_count_val in occupied_counts.items():
        if room_type_item in availability:
            availability[room_type_item] = max(0, rooms_per_type - occupied_count_val)
    return availability

def get_daily_activity(date_to_check: datetime.date, current_bookings_df: Optional[pd.DataFrame]) -> Dict[str, List[Dict]]:
    if current_bookings_df is None or current_bookings_df.empty:
        return {'check_in': [], 'check_out': [], 'occupied': []}
    if isinstance(date_to_check, pd.Timestamp): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.datetime): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.date): date_to_check_dt = date_to_check
    else: st.error(f"ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá: {date_to_check}"); return {'check_in': [], 'check_out': [], 'occupied': []}
    result = {'check_in': [], 'check_out': [], 'occupied': []}
    required_date_cols = ['Check-in Date', 'Check-out Date']
    for col in required_date_cols:
        if col not in current_bookings_df.columns or not pd.api.types.is_datetime64_any_dtype(current_bookings_df[col]):
            st.warning(f"C·ªôt ng√†y '{col}' b·ªã thi·∫øu ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng."); return result
    active_bookings_df_daily = current_bookings_df[current_bookings_df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy']
    if active_bookings_df_daily.empty: return result
    check_ins_df = active_bookings_df_daily[active_bookings_df_daily['Check-in Date'].dt.date == date_to_check_dt]
    for _, booking in check_ins_df.iterrows():
        result['check_in'].append({'name': booking.get('T√™n ng∆∞·ªùi ƒë·∫∑t', 'N/A'), 'room_type': booking.get('T√™n ch·ªó ngh·ªâ', 'N/A'), 'booking_id': booking.get('S·ªë ƒë·∫∑t ph√≤ng', 'N/A')})
    check_outs_df = active_bookings_df_daily[active_bookings_df_daily['Check-out Date'].dt.date == date_to_check_dt]
    for _, booking in check_outs_df.iterrows():
        result['check_out'].append({'name': booking.get('T√™n ng∆∞·ªùi ƒë·∫∑t', 'N/A'), 'room_type': booking.get('T√™n ch·ªó ngh·ªâ', 'N/A'), 'booking_id': booking.get('S·ªë ƒë·∫∑t ph√≤ng', 'N/A')})
    occupied_df = active_bookings_df_daily[
        (active_bookings_df_daily['Check-in Date'].dt.date <= date_to_check_dt) &
        (active_bookings_df_daily['Check-out Date'].dt.date > date_to_check_dt)
    ]
    for _, booking in occupied_df.iterrows():
        result['occupied'].append({
            'name': booking.get('T√™n ng∆∞·ªùi ƒë·∫∑t', 'N/A'), 'room_type': booking.get('T√™n ch·ªó ngh·ªâ', 'N/A'),
            'booking_id': booking.get('S·ªë ƒë·∫∑t ph√≤ng', 'N/A'),
            'check_in': booking.get('Check-in Date').date() if pd.notnull(booking.get('Check-in Date')) else None,
            'check_out': booking.get('Check-out Date').date() if pd.notnull(booking.get('Check-out Date')) else None,
            'total_payment': booking.get('T·ªïng thanh to√°n', 0.0)
        })
    return result

def get_overall_calendar_day_info(date_to_check: datetime.date, current_bookings_df: Optional[pd.DataFrame], hotel_total_capacity: int) -> Dict[str, Any]:
    if current_bookings_df is None or current_bookings_df.empty or hotel_total_capacity == 0:
        return {'occupied_units': 0, 'available_units': hotel_total_capacity, 'guests': [], 'status_text': f"Tr·ªëng" if hotel_total_capacity > 0 else "N/A", 'color': '#D4EFDF', 'status_indicator_type': 'green_dot' if hotel_total_capacity > 0 else 'error'}
    if isinstance(date_to_check, pd.Timestamp): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.datetime): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.date): date_to_check_dt = date_to_check
    else: return {'occupied_units': 0, 'available_units': 0, 'guests': [], 'status_text': "L·ªói ng√†y", 'color': '#EAECEE', 'status_indicator_type': 'error'}
    required_date_cols = ['Check-in Date', 'Check-out Date']
    for col in required_date_cols:
        if col not in current_bookings_df.columns or not pd.api.types.is_datetime64_any_dtype(current_bookings_df[col]):
            st.warning(f"C·ªôt ng√†y '{col}' b·ªã thi·∫øu ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng."); return {'occupied_units': 0, 'available_units': hotel_total_capacity, 'guests': [], 'status_text': "L·ªói d·ªØ li·ªáu", 'color': '#EAECEE', 'status_indicator_type': 'error'}
    active_on_date_df = current_bookings_df[
        (current_bookings_df['Check-in Date'].dt.date <= date_to_check_dt) &
        (current_bookings_df['Check-out Date'].dt.date > date_to_check_dt) &
        (current_bookings_df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy')
    ]
    occupied_units = len(active_on_date_df)
    available_units = max(0, hotel_total_capacity - occupied_units)
    guests_staying_today = active_on_date_df['T√™n ng∆∞·ªùi ƒë·∫∑t'].unique().tolist() if 'T√™n ng∆∞·ªùi ƒë·∫∑t' in active_on_date_df else []
    status_text = ""; color_indicator = ""; status_indicator_type = ""
    if available_units == hotel_total_capacity and hotel_total_capacity > 0: status_text = f"Tr·ªëng"; status_indicator_type = "green_dot"
    elif available_units > 0: status_text = f"{available_units}/{hotel_total_capacity} tr·ªëng"; status_indicator_type = "green_dot"
    elif hotel_total_capacity > 0 : status_text = f"H·∫øt ph√≤ng"; status_indicator_type = "orange_dash"
    else: status_text = "N/A"; status_indicator_type = "error"
    return {'occupied_units': occupied_units, 'available_units': available_units, 'guests': guests_staying_today, 'status_text': status_text, 'color': color_indicator, 'status_indicator_type': status_indicator_type}


# --- M·∫™U TIN NH·∫ÆN V√Ä H√ÄM X·ª¨ L√ù ---
DEFAULT_MESSAGE_TEMPLATE_CONTENT = """
HET PHONG : We sincerely apologize for this inconvenience. Due to an unforeseen issue, the room you booked is no longer available
Thank you for your understanding.
We hope to have the pleasure of welcoming you on your next visit.
Have a pleasant evening

DON PHONG : You're welcome! Please feel free to relax and get some breakfast.
We'll get your room ready and clean for you, and I'll let you know as soon as possible when it's all set

WELCOME :
1. Welcome!
Thanks for your reservation. We look forward to seeing you soon
2. Hello Alejandro,
I've received your reservation for 118 Hang Bac.
Could you please let me know your approximate arrival time for today?
ARRIVAL : When you arrive at 118 Hang Bac, please text me  I will guide you to your room.
EARLY CHECK IN : Hello, I'm so sorry, but the room isn't available right now.
You're welcome to leave your luggage here and use the Wi-Fi.
I'll check again around 12:00 AM and let you know as soon as possible

CHECK IN : When you arrive at 118 Hang Bac Street, you will see a souvenir shop at the front.
Please walk into the shop about 10 meters, and you will find a staircase on your right-hand side.
Go up the stairs, then look for your room number.
The door will be unlocked, and the key will be inside the room.
FEED BACK : We hope you had a wonderful stay!
We'd love to hear about your experience ‚Äì feel free to leave us a review on Booking.com

PARK : Please park your motorbike across the street, but make sure not to block their right-side door.
"""

def parse_message_templates(text_content: str) -> Dict[str, List[Tuple[str, str]]]:
    templates: Dict[str, List[Tuple[str, str]]] = {}
    current_category: Optional[str] = None
    current_label: Optional[str] = None
    current_message_lines: List[str] = []
    cleaned_content = re.sub(r"'", "", text_content)

    def finalize_and_store_message():
        nonlocal current_category, current_label, current_message_lines, templates
        if current_category and current_label and current_message_lines:
            message = "\n".join(current_message_lines).strip()
            if message:
                if current_category not in templates:
                    templates[current_category] = []
                existing_label_index = -1
                for i, (lbl, _) in enumerate(templates[current_category]):
                    if lbl == current_label:
                        existing_label_index = i
                        break
                if existing_label_index != -1:
                    templates[current_category][existing_label_index] = (current_label, message)
                else:
                    templates[current_category].append((current_label, message))
            current_message_lines = []

    for line in cleaned_content.splitlines():
        stripped_line = line.strip()
        main_cat_match = re.match(r'^([A-Z][A-Z\s]*[A-Z]|[A-Z]+)\s*:\s*(.*)', line)
        sub_label_numbered_match = re.match(r'^\s*(\d+\.)\s*(.*)', stripped_line)
        sub_label_named_match = None
        if current_category:
             potential_sub_label_named_match = re.match(r'^\s*([\w\s()]+?)\s*:\s*(.*)', stripped_line)
             if potential_sub_label_named_match:
                 if potential_sub_label_named_match.group(1).strip() != current_category and potential_sub_label_named_match.group(1).strip().isupper() is False:
                     sub_label_named_match = potential_sub_label_named_match
        if main_cat_match:
            potential_cat_name = main_cat_match.group(1).strip()
            if potential_cat_name.isupper():
                finalize_and_store_message()
                current_category = potential_cat_name
                current_label = "DEFAULT"
                message_on_same_line = main_cat_match.group(2).strip()
                if message_on_same_line:
                    current_message_lines.append(message_on_same_line)
            elif current_category and sub_label_named_match is None:
                sub_label_named_match = main_cat_match
        if current_category:
            is_new_sub_label = False
            if sub_label_numbered_match:
                finalize_and_store_message()
                current_label = sub_label_numbered_match.group(1).strip()
                message_on_same_line = sub_label_numbered_match.group(2).strip()
                if message_on_same_line:
                    current_message_lines.append(message_on_same_line)
                is_new_sub_label = True
            elif sub_label_named_match:
                if not (main_cat_match and main_cat_match.group(1).strip().isupper() and main_cat_match.group(1).strip() == sub_label_named_match.group(1).strip()):
                    finalize_and_store_message()
                    current_label = sub_label_named_match.group(1).strip()
                    message_on_same_line = sub_label_named_match.group(2).strip()
                    if message_on_same_line:
                        current_message_lines.append(message_on_same_line)
                    is_new_sub_label = True
            if not is_new_sub_label and main_cat_match is None:
                if stripped_line or current_message_lines:
                    if not current_label and stripped_line:
                        current_label = "DEFAULT"
                    current_message_lines.append(line)
    finalize_and_store_message()
    return templates

def format_templates_to_text(templates_dict: Dict[str, List[Tuple[str, str]]]) -> str:
    output_lines = []
    for category_name in sorted(templates_dict.keys()):
        labeled_messages = templates_dict[category_name]
        default_message_written_on_cat_line = False
        if labeled_messages and labeled_messages[0][0] == "DEFAULT":
            default_msg_text = labeled_messages[0][1]
            msg_lines = default_msg_text.split('\n')
            output_lines.append(f"{category_name} : {msg_lines[0] if msg_lines else ''}")
            if len(msg_lines) > 1:
                output_lines.extend(msg_lines[1:])
            default_message_written_on_cat_line = True
        else:
            output_lines.append(f"{category_name} :")

        for i, (label, msg_text) in enumerate(labeled_messages):
            if label == "DEFAULT" and default_message_written_on_cat_line and i == 0:
                continue
            msg_lines = msg_text.split('\n')
            if not (label == "DEFAULT" and i==0) :
                 if not (default_message_written_on_cat_line and i==0 and label=="DEFAULT"):
                      if not (not default_message_written_on_cat_line and i==0 and label=="DEFAULT" and output_lines and not output_lines[-1].endswith(":")):
                        output_lines.append("")
            if label == "DEFAULT":
                output_lines.extend(msg_lines)
            elif label.endswith('.'):
                output_lines.append(f"{label} {msg_lines[0] if msg_lines else ''}")
                if len(msg_lines) > 1:
                    output_lines.extend(msg_lines[1:])
            else:
                output_lines.append(f"{label} : {msg_lines[0] if msg_lines else ''}")
                if len(msg_lines) > 1:
                    output_lines.extend(msg_lines[1:])
        output_lines.append("")
    return "\n".join(output_lines) if output_lines else ""


# --- KH·ªûI T·∫†O SESSION STATE ---
if 'df' not in st.session_state: st.session_state.df = None
if 'active_bookings' not in st.session_state: st.session_state.active_bookings = None
if 'room_types' not in st.session_state: st.session_state.room_types = []
if 'data_source' not in st.session_state: st.session_state.data_source = None
if 'uploaded_file_name' not in st.session_state: st.session_state.uploaded_file_name = None
if 'last_action_message' not in st.session_state: st.session_state.last_action_message = None
if 'current_date_calendar' not in st.session_state: st.session_state.current_date_calendar = datetime.date.today()
if 'selected_calendar_date' not in st.session_state: st.session_state.selected_calendar_date = None
if 'booking_sort_column' not in st.session_state:
    st.session_state.booking_sort_column = 'Booking Date'
if 'booking_sort_ascending' not in st.session_state:
    st.session_state.booking_sort_ascending = False

# NEW: Session state for page navigation
if 'page' not in st.session_state:
    st.session_state.page = 'dashboard'

if 'message_templates_dict' not in st.session_state:
    st.session_state.message_templates_dict = parse_message_templates(DEFAULT_MESSAGE_TEMPLATE_CONTENT)

if 'add_form_check_out_final' not in st.session_state:
    st.session_state.add_form_check_out_final = datetime.date.today() + timedelta(days=1)


# --- GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG (UI) & LOGIC T·∫¢I D·ªÆ LI·ªÜU ---
def render_navigation():
    """Renders the main navigation buttons."""
    st.markdown("<div class='nav-container'>", unsafe_allow_html=True)
    cols = st.columns(5) # Changed to 5 columns
    with cols[0]:
        if st.button("üìä T·ªïng Quan", use_container_width=True, key="nav_dashboard"):
            st.session_state.page = 'dashboard'
    with cols[1]:
        if st.button("üìà Ph√¢n T√≠ch", use_container_width=True, key="nav_analytics"): # New Button
            st.session_state.page = 'analytics'
    with cols[2]:
        if st.button("üìÖ L·ªãch", use_container_width=True, key="nav_calendar"):
            st.session_state.page = 'calendar'
    with cols[3]:
        if st.button("üìã Qu·∫£n L√Ω", use_container_width=True, key="nav_manage"):
            st.session_state.page = 'manage'
    with cols[4]:
        if st.button("‚öôÔ∏è C√†i ƒê·∫∑t", use_container_width=True, key="nav_settings"):
            st.session_state.page = 'settings'
    st.markdown("</div>", unsafe_allow_html=True)

# --- PAGE RENDERING LOGIC ---
def render_dashboard():
    st.header("B·∫£ng ƒëi·ªÅu khi·ªÉn")
    df = st.session_state.get('df')
    active_bookings = st.session_state.get('active_bookings')
    if df is not None and not df.empty and active_bookings is not None:
        today_dt = datetime.date.today()

        # --- METRICS ---
        st.markdown("#### S·ªë li·ªáu ch√≠nh")
        # ... (Metrics logic remains here) ...

        st.markdown("---")
        
        # --- CHARTS ---
        st.markdown("#### Bi·ªÉu ƒë·ªì")
        # ... (Charts logic remains here) ...

        # The revenue logic is now REMOVED from the dashboard.

    else:
        st.info("T·∫£i d·ªØ li·ªáu ƒë·ªÉ xem b·∫£ng ƒëi·ªÅu khi·ªÉn.")

def render_analytics():
    """Renders the analytics page with collector revenue."""
    st.header("Ph√¢n T√≠ch")
    df = st.session_state.get('df')
    active_bookings = st.session_state.get('active_bookings')
    
    st.subheader("Doanh thu theo Ng∆∞·ªùi thu ti·ªÅn")
    if df is not None and 'Ng∆∞·ªùi thu ti·ªÅn' in df.columns and 'T·ªïng thanh to√°n' in df.columns:
        collector_revenue = df.groupby('Ng∆∞·ªùi thu ti·ªÅn')['T·ªïng thanh to√°n'].sum().reset_index()
        collector_revenue = collector_revenue.sort_values(by='T·ªïng thanh to√°n', ascending=False)
        
        fig = px.bar(
            collector_revenue,
            x='Ng∆∞·ªùi thu ti·ªÅn',
            y='T·ªïng thanh to√°n',
            title='T·ªïng doanh thu theo ng∆∞·ªùi thu ti·ªÅn',
            labels={'T·ªïng thanh to√°n': 'T·ªïng thanh to√°n (VND)'},
            color='Ng∆∞·ªùi thu ti·ªÅn',
            text_auto='.2s'
        )
        fig.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu 'Ng∆∞·ªùi thu ti·ªÅn' ho·∫∑c 'T·ªïng thanh to√°n' ƒë·ªÉ hi·ªÉn th·ªã.")


def render_calendar():
    st.header("L·ªãch Ph√≤ng")
    df = st.session_state.get('df')
    active_bookings = st.session_state.get('active_bookings')
    # ... (existing code) ...


def render_manage_bookings():
    st.header("Qu·∫£n l√Ω ƒê·∫∑t ph√≤ng")
    df = st.session_state.get('df')
    active_bookings = st.session_state.get('active_bookings')
    # ... (existing booking management logic) ...

def render_settings():
    st.header("C√†i ƒë·∫∑t & Ti·ªán √≠ch")
    df = st.session_state.get('df')
    active_bookings = st.session_state.get('active_bookings')
    # ... (existing settings logic) ...

# Router to display the correct page
page = st.session_state.page

# --- MAIN APP LOGIC ---
if __name__ == "__main__":
    # --- Data Loading and Initialization ---
    initialize_data()
    df = st.session_state.get('df')
    active_bookings = st.session_state.get('active_bookings')

    # --- UI Rendering ---
    render_header()
    render_navigation()
    st.markdown("<hr>", unsafe_allow_html=True)

    # Page routing
    page = st.session_state.get('page', 'dashboard')

    if page == 'dashboard':
        render_dashboard()
    elif page == 'analytics':
        render_analytics()
    elif page == 'calendar':
        render_calendar()
    elif page == 'manage':
        render_manage_bookings()
    elif page == 'settings':
        render_settings()
    else:
        render_dashboard() # Default

# --- DATA INITIALIZATION LOGIC ---
def initialize_data():
    """
    Initializes or loads the booking data.
    Checks for uploaded files, Google Sheets connections, or uses demo data.
    """
    if 'df' not in st.session_state or st.session_state.df is None:
        st.session_state.df = None
        st.session_state.active_bookings = None
        st.session_state.data_source = None
        st.session_state.uploaded_file_name = None

        # This section can be expanded later to automatically connect to GSheets
        # For now, it prioritizes file uploads or demo data.
        
        # In a real-world scenario, you might check for a saved GSheet ID
        # and attempt to load from there first.
        # if st.session_state.get('gsheet_id'):
        #     # Attempt to load from Google Sheets
        # else:
        
        # For now, we just ensure the state is clean if no data is loaded.
        pass # No automatic loading, waits for user action in the UI.

# --- UI & PAGE RENDERING LOGIC ---
def render_header():
    """Renders the main header and data loading UI."""
    st.title("üè® Qu·∫£n l√Ω Kh√°ch s·∫°n PRO")
    
    with st.expander("T·∫£i D·ªØ li·ªáu & T√πy ch·ªçn", expanded=True):
        data_load_cols = st.columns([2, 1, 1])
        
        with data_load_cols[0]:
            uploaded_file = st.file_uploader(
                "T·∫£i t·ªáp ƒë·∫∑t ph√≤ng (Excel, PDF, HTML)",
                type=['xls', 'xlsx', 'pdf', 'html'],
                help="T·∫£i l√™n t·ªáp d·ªØ li·ªáu t·ª´ Booking.com ƒë·ªÉ b·∫Øt ƒë·∫ßu."
            )
            if uploaded_file:
                if uploaded_file.name != st.session_state.get('uploaded_file_name'):
                    with st.spinner(f"ƒêang x·ª≠ l√Ω {uploaded_file.name}..."):
                        df, active_bookings = load_data_from_file(uploaded_file)
                        if df is not None:
                            st.session_state.df = df
                            st.session_state.active_bookings = active_bookings
                            st.session_state.room_types = get_cleaned_room_types(df)
                            st.session_state.data_source = 'file'
                            st.session_state.uploaded_file_name = uploaded_file.name
                            st.success(f"ƒê√£ t·∫£i th√†nh c√¥ng {len(df)} ƒë·∫∑t ph√≤ng.")
                            st.rerun()
                        else:
                            st.error("Kh√¥ng th·ªÉ x·ª≠ l√Ω t·ªáp. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra ƒë·ªãnh d·∫°ng t·ªáp.")
        
        with data_load_cols[1]:
            if st.button("S·ª≠ d·ª•ng D·ªØ li·ªáu Demo", use_container_width=True):
                df, active_bookings = create_demo_data()
                st.session_state.df = df
                st.session_state.active_bookings = active_bookings
                st.session_state.room_types = get_cleaned_room_types(df)
                st.session_state.data_source = 'demo'
                st.session_state.uploaded_file_name = 'Demo Data'
                st.rerun()

    if st.session_state.get('uploaded_file_name'):
        st.caption(f"Ngu·ªìn d·ªØ li·ªáu hi·ªán t·∫°i: `{st.session_state.uploaded_file_name}`")