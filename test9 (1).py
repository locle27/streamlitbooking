"""
üè® HOTEL ROOM MANAGEMENT SYSTEM
=====================================
H·ªá th·ªëng qu·∫£n l√Ω ph√≤ng kh√°ch s·∫°n hi·ªán ƒë·∫°i v·ªõi giao di·ªán th√¢n thi·ªán

INSTALLATION REQUIREMENTS:
pip install streamlit pandas numpy plotly openpyxl xlrd pypdf2 beautifulsoup4

Author: Optimized Version (Reviewed and Enhanced by Gemini)
Version: 3.0.5 (Fixed StreamlitAPIException on add booking form reset)
"""

import streamlit as st
import pandas as pd
import numpy as np
import datetime
import plotly.graph_objects as go
import plotly.express as px
import io
import calendar
from datetime import timedelta
import re
import xlrd # C·∫ßn thi·∫øt cho file .xls c≈©
import openpyxl # C·∫ßn thi·∫øt cho file .xlsx hi·ªán ƒë·∫°i
import csv
from typing import Dict, List, Optional, Tuple, Any
import json

# Google Sheets API imports
import gspread
from google.oauth2.service_account import Credentials

# H·∫±ng s·ªë to√†n c·ª•c x√°c ƒë·ªãnh s·ªë l∆∞·ª£ng ƒë∆°n v·ªã ph√≤ng cho m·ªói lo·∫°i ph√≤ng
ROOM_UNIT_PER_ROOM_TYPE = 4 # <<<< THAY ƒê·ªîI ·ªû ƒê√ÇY
# H·∫±ng s·ªë to√†n c·ª•c x√°c ƒë·ªãnh t·ªïng s·ªë ph√≤ng v·∫≠t l√Ω c·ªßa kh√°ch s·∫°n
TOTAL_HOTEL_CAPACITY = 4 # (Gi·ªØ nguy√™n l√† 4 theo y√™u c·∫ßu)

# ƒê·ªãnh nghƒ©a c√°c c·ªôt c∆° s·ªü v√† c·ªôt d·∫´n xu·∫•t
REQUIRED_APP_COLS_BASE = [
    'T√™n ch·ªó ngh·ªâ', 'V·ªã tr√≠', 'T√™n ng∆∞·ªùi ƒë·∫∑t', 'Th√†nh vi√™n Genius',
    'Ng√†y ƒë·∫øn', 'Ng√†y ƒëi', 'ƒê∆∞·ª£c ƒë·∫∑t v√†o',
    'T√¨nh tr·∫°ng', 'T·ªïng thanh to√°n', 'Hoa h·ªìng', 'Ti·ªÅn t·ªá', 'S·ªë ƒë·∫∑t ph√≤ng',
    'Check-in Date', 'Check-out Date', 'Booking Date', 'Stay Duration'
]
REQUIRED_APP_COLS_DERIVED = ['Gi√° m·ªói ƒë√™m']
ALL_REQUIRED_COLS = REQUIRED_APP_COLS_BASE + REQUIRED_APP_COLS_DERIVED


# Ki·ªÉm tra v√† nh·∫≠p c√°c th∆∞ vi·ªán t√πy ch·ªçn, th√¥ng b√°o n·∫øu thi·∫øu
try:
    from PyPDF2 import PdfReader
    PYPDF2_AVAILABLE = True
except ImportError:
    PYPDF2_AVAILABLE = False
    st.warning("‚ö†Ô∏è Th∆∞ vi·ªán PyPDF2 kh√¥ng c√≥ s·∫µn. Ch·ª©c nƒÉng x·ª≠ l√Ω file PDF s·∫Ω b·ªã v√¥ hi·ªáu h√≥a. Vui l√≤ng c√†i ƒë·∫∑t: pip install pypdf2")

try:
    from bs4 import BeautifulSoup
    BS4_AVAILABLE = True
except ImportError:
    BS4_AVAILABLE = False
    st.warning("‚ö†Ô∏è Th∆∞ vi·ªán BeautifulSoup4 kh√¥ng c√≥ s·∫µn. Ch·ª©c nƒÉng x·ª≠ l√Ω file HTML s·∫Ω b·ªã v√¥ hi·ªáu h√≥a. Vui l√≤ng c√†i ƒë·∫∑t: pip install beautifulsoup4")

# C·∫•u h√¨nh trang Streamlit n√¢ng cao
st.set_page_config(
    page_title="üè® Hotel Management Pro",
    page_icon="üè®",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://www.example.com/help',
        'Report a bug': "https://www.example.com/bugs",
        'About': "# Hotel Management System v3.0.5\nƒê√£ s·ª≠a l·ªói StreamlitAPIException khi reset form th√™m ƒë·∫∑t ph√≤ng."
    }
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    :root {
        --primary-color: #1f77b4; --secondary-color: #ff7f0e; --success-color: #2ca02c;
        --warning-color: #ffbb00; --danger-color: #d62728; --info-color: #17a2b8;
        --light-bg: #f8f9fa; --dark-bg: #343a40;
    }
    .css-1d391kg { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
    .metric-card { background: white; padding: 1.5rem; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); border-left: 5px solid var(--primary-color); margin-bottom: 1rem; transition: transform 0.2s ease, box-shadow 0.2s ease; }
    .metric-card:hover { transform: translateY(-3px); box-shadow: 0 4px 20px rgba(0,0,0,0.15); }
    .stButton > button { border-radius: 20px; border: none; padding: 0.6rem 1.2rem; font-weight: 600; transition: all 0.3s ease; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
    .stButton > button:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0,0,0,0.2); }
    .status-available { color: var(--success-color); font-weight: bold; }
    .status-occupied { color: var(--danger-color); font-weight: bold; }
    .status-partial { color: var(--warning-color); font-weight: bold; }
    .dataframe { border-radius: 10px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
    .loading-spinner { border: 4px solid #f3f3f3; border-top: 4px solid var(--primary-color); border-radius: 50%; width: 40px; height: 40px; animation: spin 1s linear infinite; margin: 20px auto; }
    @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
    .calendar-grid {
        display: grid; grid-template-columns: repeat(7, 1fr);
        gap: 12px; /* Further increased gap for more horizontal space */
        text-align: center; font-family: 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
        margin-top: 20px; /* Increased top margin */
        padding: 10px; /* Increased padding around the grid */
        background-color: #f9f9f9;
        border-radius: 10px;
    }
    .day-header {
        font-weight: 500;
        padding: 12px 0;
        background-color: transparent;
        color: #4a5568;
        border-radius: 6px;
        font-size: 0.8rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    .day-cell {
        border: 1px solid #e2e8f0;
        padding: 8px 4px; /* Adjusted cell padding */
        min-height: 90px; /* Increased cell min-height */
        display: flex; flex-direction: column; justify-content: space-between; align-items: center;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.2s ease, box-shadow 0.2s ease, transform 0.15s ease;
        position: relative;
        background-color: #ffffff;
        box-shadow: 0 1px 2px rgba(0,0,0,0.05);
    }
    .day-cell:hover {
        background-color: #f7fafc;
        box-shadow: 0 4px 8px rgba(0,0,0,0.08);
        transform: translateY(-1px);
    }
    .day-button-overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; z-index: 10; cursor: pointer; }
    .day-number { 
        font-size: 1.1em; /* Slightly adjusted size for professionalism */ 
        font-weight: 500; /* Maintained medium weight */ 
        margin-bottom: 5px; 
        color: #2d3748; 
    }
    .day-status { font-size: 0.75em; color: #718096; padding: 0 2px; word-break: break-word; line-height: 1.35; }
    .dot-indicator { font-size: 1.9em; line-height: 0.3; margin-top: 1px; margin-bottom: 2px; }
    .dot-green { color: var(--success-color); }
    .dot-orange { color: var(--warning-color); }
    .dot-red { color: var(--danger-color); }
    .day-disabled {
        color: #a0aec0; /* Lighter gray for disabled text */
        background-color: #edf2f7; /* Very light gray for disabled background */
        cursor: not-allowed; box-shadow: none;
        border-color: #e2e8f0;
    }
    .day-disabled:hover { transform: none; background-color: #edf2f7; }
    .day-today {
        border: 2px solid var(--primary-color);
        background-color: #ebf8ff; /* Light primary color background (Tailwind-like blue) */
        box-shadow: 0 1px 3px rgba(0,0,0,0.05), 0 0 0 1px var(--primary-color); /* Inner and outer emphasis */
    }
    .day-today .day-number { color: var(--primary-color); font-weight: 600; /* Bolder for today's number */ }
    .day-selected {
        background-color: var(--primary-color);
        border: 2px solid var(--primary-color);
        box-shadow: 0 3px 10px rgba(31, 119, 180, 0.5); /* Stronger shadow for selected */
        color: white;
        transform: translateY(-1px); /* Keep slight lift */
    }
    .day-selected .day-number, .day-selected .day-status, .day-selected .dot-indicator {
        color: white;
    }
    .guest-separator { border-bottom: 1px dashed #ced4da; margin: 4px 0; width: 90%; align-self: center; }
    .calendar-details-expander .streamlit-expanderHeader { font-size: 1.1em; font-weight: bold; }
    .calendar-details-expander p { margin-bottom: 0.3rem; }
</style>
""", unsafe_allow_html=True)

# --- H√ÄM H·ªñ TR·ª¢ ---
def parse_app_standard_date(date_input: Any) -> Optional[datetime.date]:
    if pd.isna(date_input): return None
    if isinstance(date_input, datetime.datetime): return date_input.date()
    if isinstance(date_input, datetime.date): return date_input
    if isinstance(date_input, pd.Timestamp): return date_input.date()
    date_str = str(date_input).strip().lower()
    try:
        if re.match(r"ng√†y\s*\d{1,2}\s*th√°ng\s*\d{1,2}\s*nƒÉm\s*\d{4}", date_str):
            m = re.search(r"ng√†y\s*(\d{1,2})\s*th√°ng\s*(\d{1,2})\s*nƒÉm\s*(\d{4})", date_str)
            if m: return datetime.date(int(m.group(3)), int(m.group(2)), int(m.group(1)))
        parsed_date = pd.to_datetime(date_str, errors='coerce', dayfirst=True).date()
        if parsed_date: return parsed_date
        parsed_date = pd.to_datetime(date_str, errors='coerce', dayfirst=False).date()
        if parsed_date: return parsed_date
    except Exception: pass
    st.warning(f"Kh√¥ng th·ªÉ ph√¢n t√≠ch ng√†y: '{date_input}'.")
    return None

def convert_display_date_to_app_format(display_date_input: Any) -> Optional[str]:
    if pd.isna(display_date_input): return None
    if isinstance(display_date_input, (datetime.datetime, datetime.date, pd.Timestamp)):
        return f"ng√†y {display_date_input.day} th√°ng {display_date_input.month} nƒÉm {display_date_input.year}"
    cleaned_date_str = str(display_date_input).replace(',', '').strip().lower()
    m = re.search(r"(\d{1,2})\s*th√°ng\s*(\d{1,2})\s*(\d{4})", cleaned_date_str)
    if m: return f"ng√†y {m.group(1)} th√°ng {m.group(2)} nƒÉm {m.group(3)}"
    try:
        parsed = pd.to_datetime(cleaned_date_str, errors='coerce', dayfirst=True)
        if pd.notna(parsed): return f"ng√†y {parsed.day} th√°ng {parsed.month} nƒÉm {parsed.year}"
        parsed = pd.to_datetime(cleaned_date_str, errors='coerce', dayfirst=False)
        if pd.notna(parsed): return f"ng√†y {parsed.day} th√°ng {parsed.month} nƒÉm {parsed.year}"
    except Exception: pass
    return None

def clean_currency_value(value_input: Any) -> float:
    if pd.isna(value_input): return 0.0
    cleaned_str = str(value_input).strip()
    cleaned_str = re.sub(r'(?i)VND\s*', '', cleaned_str)
    cleaned_str = re.sub(r'[^\d,.-]', '', cleaned_str)
    if not cleaned_str: return 0.0
    has_dot, has_comma = '.' in cleaned_str, ',' in cleaned_str
    if has_dot and has_comma:
        last_dot_pos, last_comma_pos = cleaned_str.rfind('.'), cleaned_str.rfind(',')
        if last_comma_pos > last_dot_pos:
            cleaned_str = cleaned_str.replace('.', '').replace(',', '.')
        else:
            cleaned_str = cleaned_str.replace(',', '')
    elif has_comma:
        if cleaned_str.count(',') > 1 or (cleaned_str.count(',') == 1 and len(cleaned_str.split(',')[-1]) == 3 and len(cleaned_str.split(',')[0]) > 0):
            cleaned_str = cleaned_str.replace(',', '')
        else: cleaned_str = cleaned_str.replace(',', '.')
    elif has_dot:
        if cleaned_str.count('.') > 1 or (cleaned_str.count('.') == 1 and len(cleaned_str.split('.')[-1]) == 3 and len(cleaned_str.split('.')[0]) > 0):
            cleaned_str = cleaned_str.replace('.', '')
    numeric_val = pd.to_numeric(cleaned_str, errors='coerce')
    return numeric_val if pd.notna(numeric_val) else 0.0

def get_cleaned_room_types(df_source: Optional[pd.DataFrame]) -> List[str]:
    """
    L·∫•y danh s√°ch c√°c lo·∫°i ph√≤ng ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch v√† s·∫Øp x·∫øp t·ª´ DataFrame.
    Lo·∫°i b·ªè c√°c gi√° tr·ªã NaN, None, chu·ªói r·ªóng v√† ƒë·∫£m b·∫£o t√≠nh duy nh·∫•t.
    """
    if df_source is None or df_source.empty or 'T√™n ch·ªó ngh·ªâ' not in df_source.columns:
        return []
    
    # L·∫•y c√°c gi√° tr·ªã duy nh·∫•t v√† lo·∫°i b·ªè NA/NaN m·ªôt c√°ch an to√†n
    try:
        unique_values = df_source['T√™n ch·ªó ngh·ªâ'].dropna().unique()
    except Exception: # B·∫Øt l·ªói chung n·∫øu c√≥ v·∫•n ƒë·ªÅ v·ªõi c·ªôt
        return []
        
    cleaned_types = []
    seen_types = set()
    for val in unique_values:
        s_val = str(val).strip() # Chuy·ªÉn sang chu·ªói v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
        if s_val and s_val not in seen_types: # Ch·ªâ th√™m n·∫øu chu·ªói kh√¥ng r·ªóng v√† ch∆∞a t·ªìn t·∫°i
            cleaned_types.append(s_val)
            seen_types.add(s_val)
            
    return sorted(cleaned_types)

@st.cache_data
def load_data_from_file(uploaded_file_obj) -> Tuple[Optional[pd.DataFrame], Optional[pd.DataFrame]]:
    filename = uploaded_file_obj.name
    df_loaded = pd.DataFrame()
    try:
        if filename.endswith(('.xls', '.xlsx')):
            st.info(f"ƒêang x·ª≠ l√Ω file Excel: {filename}...")
            engine = 'xlrd' if filename.endswith('.xls') else 'openpyxl'
            df_loaded = pd.read_excel(uploaded_file_obj, engine=engine)
            excel_to_app_map = {
                'Ng√†y ƒë·∫øn': 'Ng√†y ƒë·∫øn_str_original', 'Ng√†y ƒëi': 'Ng√†y ƒëi_str_original',
                'ƒê∆∞·ª£c ƒë·∫∑t v√†o': 'ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original', 'T√™n ch·ªó ngh·ªâ': 'T√™n ch·ªó ngh·ªâ',
                'V·ªã tr√≠': 'V·ªã tr√≠', 'T√™n ng∆∞·ªùi ƒë·∫∑t': 'T√™n ng∆∞·ªùi ƒë·∫∑t',
                'Th√†nh vi√™n Genius': 'Th√†nh vi√™n Genius', 'T√¨nh tr·∫°ng': 'T√¨nh tr·∫°ng',
                'T·ªïng thanh to√°n': 'T·ªïng thanh to√°n', 'Hoa h·ªìng': 'Hoa h·ªìng',
                'Ti·ªÅn t·ªá': 'Ti·ªÅn t·ªá', 'S·ªë ƒë·∫∑t ph√≤ng': 'S·ªë ƒë·∫∑t ph√≤ng'
            }
            df_loaded = df_loaded.rename(columns={k: v for k, v in excel_to_app_map.items() if k in df_loaded.columns})
            if 'Ng√†y ƒë·∫øn_str_original' in df_loaded.columns:
                df_loaded['Check-in Date'] = df_loaded['Ng√†y ƒë·∫øn_str_original'].apply(parse_app_standard_date)
            if 'Ng√†y ƒëi_str_original' in df_loaded.columns:
                df_loaded['Check-out Date'] = df_loaded['Ng√†y ƒëi_str_original'].apply(parse_app_standard_date)
            if 'ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original' in df_loaded.columns:
                df_loaded['Booking Date'] = df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original'].apply(parse_app_standard_date)
        elif filename.endswith('.pdf'):
            st.info(f"ƒêang x·ª≠ l√Ω file PDF: {filename}...")
            if not PYPDF2_AVAILABLE:
                st.error("Kh√¥ng th·ªÉ x·ª≠ l√Ω file PDF do thi·∫øu th∆∞ vi·ªán PyPDF2. Vui l√≤ng c√†i ƒë·∫∑t: pip install pypdf2")
                return None, None
            st.warning("Ch·ª©c nƒÉng x·ª≠ l√Ω file PDF ƒëang trong giai ƒëo·∫°n th·ª≠ nghi·ªám.")
            reader = PdfReader(uploaded_file_obj)
            text_data = ""
            for page_num, page in enumerate(reader.pages):
                page_text = page.extract_text()
                if page_text: text_data += page_text + "\n"
                else: st.warning(f"Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ trang {page_num + 1} c·ªßa file PDF.")
            if not text_data.strip():
                st.error("File PDF kh√¥ng ch·ª©a vƒÉn b·∫£n ho·∫∑c kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n.")
                return None, None
            lines = text_data.splitlines()
            parsed_rows = []
            pdf_headers_assumed_order = [
                "ID ch·ªó ngh·ªâ", "T√™n ch·ªó ngh·ªâ", "T√™n kh√°ch", "Nh·∫≠n ph√≤ng", "Ng√†y ƒëi",
                "T√¨nh tr·∫°ng", "T·ªïng thanh to√°n", "Hoa h·ªìng", "S·ªë ƒë·∫∑t ph√≤ng", "ƒê∆∞·ª£c ƒë·∫∑t v√†o"
            ]
            for line in lines:
                cleaned_line = line.replace('\r', '').strip()
                if cleaned_line.startswith('"') and cleaned_line.count('","') >= (len(pdf_headers_assumed_order) - 5):
                    try:
                        csv_reader_obj = csv.reader(io.StringIO(cleaned_line))
                        fields = next(csv_reader_obj)
                        if len(fields) >= (len(pdf_headers_assumed_order) - 3) and len(fields) <= len(pdf_headers_assumed_order) + 2:
                            processed_fields = [field.replace('\n', ' ').strip() for field in fields]
                            row_dict = {header: (processed_fields[i] if i < len(processed_fields) else None)
                                        for i, header in enumerate(pdf_headers_assumed_order)}
                            parsed_rows.append(row_dict)
                    except csv.Error:
                        st.caption(f"B·ªè qua d√≤ng kh√¥ng h·ª£p l·ªá trong PDF: {cleaned_line[:50]}...")
                        continue
            if not parsed_rows:
                st.error("Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c d·ªØ li·ªáu c√≥ c·∫•u tr√∫c t·ª´ file PDF.")
                return None, None
            df_loaded = pd.DataFrame(parsed_rows)
            if 'Nh·∫≠n ph√≤ng' in df_loaded.columns: df_loaded['Ng√†y ƒë·∫øn_str_original'] = df_loaded['Nh·∫≠n ph√≤ng'].apply(convert_display_date_to_app_format)
            if 'Ng√†y ƒëi' in df_loaded.columns: df_loaded['Ng√†y ƒëi_str_original'] = df_loaded['Ng√†y ƒëi'].apply(convert_display_date_to_app_format)
            if 'ƒê∆∞·ª£c ƒë·∫∑t v√†o' in df_loaded.columns: df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original'] = df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o'].apply(convert_display_date_to_app_format)
            if 'Ng√†y ƒë·∫øn_str_original' in df_loaded.columns: df_loaded['Check-in Date'] = df_loaded['Ng√†y ƒë·∫øn_str_original'].apply(parse_app_standard_date)
            if 'Ng√†y ƒëi_str_original' in df_loaded.columns: df_loaded['Check-out Date'] = df_loaded['Ng√†y ƒëi_str_original'].apply(parse_app_standard_date)
            if 'ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original' in df_loaded.columns: df_loaded['Booking Date'] = df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original'].apply(parse_app_standard_date)
            if "T√™n kh√°ch" in df_loaded.columns:
                df_loaded["T√™n ng∆∞·ªùi ƒë·∫∑t"] = df_loaded["T√™n kh√°ch"].apply(lambda x: str(x).split("Genius")[0].replace("1 kh√°ch", "").replace("2 kh√°ch", "").replace("2 ng∆∞·ªùi l·ªõn","").strip() if pd.notna(x) else "N/A")
                df_loaded["Th√†nh vi√™n Genius"] = df_loaded["T√™n kh√°ch"].apply(lambda x: "C√≥" if pd.notna(x) and "Genius" in str(x) else "Kh√¥ng")
            if "V·ªã tr√≠" not in df_loaded.columns: df_loaded["V·ªã tr√≠"] = "N/A (t·ª´ PDF)"
            if "Ti·ªÅn t·ªá" not in df_loaded.columns: df_loaded["Ti·ªÅn t·ªá"] = "VND"
        elif filename.endswith('.html'):
            st.info(f"ƒêang x·ª≠ l√Ω file HTML: {filename}...")
            if not BS4_AVAILABLE:
                st.error("Kh√¥ng th·ªÉ x·ª≠ l√Ω file HTML do thi·∫øu th∆∞ vi·ªán BeautifulSoup4.")
                return None, None
            st.info("ƒêang ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng trong file HTML...")
            soup = BeautifulSoup(uploaded_file_obj.read(), 'html.parser')
            table = soup.find('table', class_='cdd0659f86')
            if not table:
                st.error("Kh√¥ng t√¨m th·∫•y b·∫£ng d·ªØ li·ªáu ph√π h·ª£p trong file HTML (class 'cdd0659f86').")
                table = soup.find('table')
                if not table:
                    st.error("C≈©ng kh√¥ng t√¨m th·∫•y th·∫ª <table> n√†o trong file HTML.")
                    return None, None
                else: st.warning("ƒê√£ t√¨m th·∫•y m·ªôt th·∫ª <table> chung, ƒëang th·ª≠ ph√¢n t√≠ch.")
            parsed_rows_html = []
            headers_from_html = []
            header_row = table.find('thead')
            if header_row:
                header_row = header_row.find('tr')
                if header_row: headers_from_html = [th.get_text(strip=True) for th in header_row.find_all('th')]
            body = table.find('tbody')
            if not body:
                st.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn th√¢n (<tbody>) c·ªßa b·∫£ng trong HTML.")
                return None, None
            for row_idx, row in enumerate(body.find_all('tr')):
                cells = row.find_all(['td', 'th'])
                row_data = {}
                for i, cell in enumerate(cells):
                    heading = cell.get('data-heading')
                    if not heading and i < len(headers_from_html): heading = headers_from_html[i]
                    elif not heading: heading = f"C·ªôt {i+1}"
                    if heading:
                        if heading == "T√™n kh√°ch":
                            guest_name_tag = cell.find('a')
                            guest_name_text = guest_name_tag.get_text(strip=True) if guest_name_tag else cell.get_text(separator=" ", strip=True)
                            row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"] = guest_name_text.split("Genius")[0].replace("1 kh√°ch", "").replace("2 kh√°ch", "").replace("2 ng∆∞·ªùi l·ªõn","").strip()
                            genius_svg = cell.find('svg', alt='Genius')
                            row_data["Th√†nh vi√™n Genius"] = "C√≥" if genius_svg or "Genius" in guest_name_text else "Kh√¥ng"
                        else: row_data[heading] = cell.get_text(separator=" ", strip=True)
                if row_data: parsed_rows_html.append(row_data)
            if not parsed_rows_html:
                st.error("Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c d√≤ng d·ªØ li·ªáu n√†o t·ª´ b·∫£ng HTML.")
                return None, None
            df_loaded = pd.DataFrame(parsed_rows_html)
            html_to_app_map = {
                "ID ch·ªó ngh·ªâ": "ID ch·ªó ngh·ªâ", "T√™n ch·ªó ngh·ªâ": "T√™n ch·ªó ngh·ªâ", "V·ªã tr√≠": "V·ªã tr√≠",
                "Nh·∫≠n ph√≤ng": "Ng√†y ƒë·∫øn_str_original", "Ng√†y ƒëi": "Ng√†y ƒëi_str_original",
                "T√¨nh tr·∫°ng": "T√¨nh tr·∫°ng", "T·ªïng thanh to√°n": "T·ªïng thanh to√°n",
                "Hoa h·ªìng": "Hoa h·ªìng", "S·ªë ƒë·∫∑t ph√≤ng": "S·ªë ƒë·∫∑t ph√≤ng",
                "ƒê∆∞·ª£c ƒë·∫∑t v√†o": "ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original"
            }
            df_loaded = df_loaded.rename(columns={k: v for k, v in html_to_app_map.items() if k in df_loaded.columns})
            if 'Ng√†y ƒë·∫øn_str_original' in df_loaded.columns: df_loaded['Ng√†y ƒë·∫øn_str'] = df_loaded['Ng√†y ƒë·∫øn_str_original'].apply(convert_display_date_to_app_format)
            if 'Ng√†y ƒëi_str_original' in df_loaded.columns: df_loaded['Ng√†y ƒëi_str'] = df_loaded['Ng√†y ƒëi_str_original'].apply(convert_display_date_to_app_format)
            if 'ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original' in df_loaded.columns: df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str'] = df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original'].apply(convert_display_date_to_app_format)
            if 'Ng√†y ƒë·∫øn_str' in df_loaded.columns: df_loaded['Check-in Date'] = df_loaded['Ng√†y ƒë·∫øn_str'].apply(parse_app_standard_date)
            if 'Ng√†y ƒëi_str' in df_loaded.columns: df_loaded['Check-out Date'] = df_loaded['Ng√†y ƒëi_str'].apply(parse_app_standard_date)
            if 'ƒê∆∞·ª£c ƒë·∫∑t v√†o_str' in df_loaded.columns: df_loaded['Booking Date'] = df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str'].apply(parse_app_standard_date)
            if "Ti·ªÅn t·ªá" not in df_loaded.columns: df_loaded["Ti·ªÅn t·ªá"] = "VND"
        else:
            st.error(f"ƒê·ªãnh d·∫°ng file '{filename.split('.')[-1]}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
            return None, None

        if df_loaded.empty:
            st.error("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c t·∫£i ho·∫∑c t·∫•t c·∫£ c√°c h√†ng ƒë·ªÅu tr·ªëng.")
            return None, None
        df_loaded = df_loaded.dropna(how='all').reset_index(drop=True)
        if df_loaded.empty:
            st.error("D·ªØ li·ªáu tr·ªëng sau khi lo·∫°i b·ªè c√°c h√†ng r·ªóng.")
            return None, None

        for col_num_common in ["T·ªïng thanh to√°n", "Hoa h·ªìng"]:
            if col_num_common in df_loaded.columns:
                 df_loaded[col_num_common] = df_loaded[col_num_common].apply(clean_currency_value)
            else: df_loaded[col_num_common] = 0.0

        cols_to_datetime = ['Check-in Date', 'Check-out Date', 'Booking Date']
        for col_dt in cols_to_datetime:
            if col_dt in df_loaded.columns:
                df_loaded[col_dt] = pd.to_datetime(df_loaded[col_dt], errors='coerce')
            else: df_loaded[col_dt] = pd.NaT

        if not df_loaded.empty and (df_loaded['Check-in Date'].isnull().any() or df_loaded['Check-out Date'].isnull().any()):
            initial_rows = len(df_loaded)
            df_loaded.dropna(subset=['Check-in Date', 'Check-out Date'], inplace=True)
            dropped_rows_count = initial_rows - len(df_loaded)
            if dropped_rows_count > 0:
                st.warning(f"ƒê√£ lo·∫°i b·ªè {dropped_rows_count} ƒë·∫∑t ph√≤ng do ng√†y check-in ho·∫∑c check-out kh√¥ng h·ª£p l·ªá.")
        if df_loaded.empty:
            st.error("Kh√¥ng c√≤n d·ªØ li·ªáu h·ª£p l·ªá sau khi lo·∫°i b·ªè c√°c ƒë·∫∑t ph√≤ng c√≥ ng√†y kh√¥ng h·ª£p l·ªá.")
            return None, None

        if 'Check-out Date' in df_loaded.columns and 'Check-in Date' in df_loaded.columns:
            df_loaded['Stay Duration'] = (df_loaded['Check-out Date'] - df_loaded['Check-in Date']).dt.days
            df_loaded['Stay Duration'] = df_loaded['Stay Duration'].apply(lambda x: max(0, x) if pd.notna(x) else 0)
        else: df_loaded['Stay Duration'] = 0

        if 'T·ªïng thanh to√°n' in df_loaded.columns and 'Stay Duration' in df_loaded.columns:
            df_loaded['T·ªïng thanh to√°n'] = pd.to_numeric(df_loaded['T·ªïng thanh to√°n'], errors='coerce').fillna(0)
            df_loaded['Gi√° m·ªói ƒë√™m'] = np.where(
                (df_loaded['Stay Duration'].notna()) & (df_loaded['Stay Duration'] > 0) & (df_loaded['T·ªïng thanh to√°n'].notna()),
                df_loaded['T·ªïng thanh to√°n'] / df_loaded['Stay Duration'],
                0.0
            ).round(0)
        else:
            df_loaded['Gi√° m·ªói ƒë√™m'] = 0.0


        for original_date_col_name in ['Ng√†y ƒë·∫øn', 'Ng√†y ƒëi', 'ƒê∆∞·ª£c ƒë·∫∑t v√†o']:
            source_col_original = f"{original_date_col_name}_str_original"
            source_col_generic = f"{original_date_col_name}_str"
            if original_date_col_name not in df_loaded.columns: df_loaded[original_date_col_name] = pd.NA
            if source_col_original in df_loaded.columns: df_loaded[original_date_col_name] = df_loaded[original_date_col_name].fillna(df_loaded[source_col_original])
            if source_col_generic in df_loaded.columns: df_loaded[original_date_col_name] = df_loaded[original_date_col_name].fillna(df_loaded[source_col_generic])
            if source_col_original in df_loaded.columns: df_loaded.drop(columns=[source_col_original], inplace=True, errors='ignore')
            if source_col_generic in df_loaded.columns: df_loaded.drop(columns=[source_col_generic], inplace=True, errors='ignore')

        for req_col in ALL_REQUIRED_COLS:
            if req_col not in df_loaded.columns:
                if "Date" in req_col and req_col not in ['Ng√†y ƒë·∫øn', 'Ng√†y ƒëi', 'ƒê∆∞·ª£c ƒë·∫∑t v√†o']: df_loaded[req_col] = pd.NaT
                elif "Duration" in req_col: df_loaded[req_col] = 0
                elif req_col in ['T·ªïng thanh to√°n', 'Hoa h·ªìng', 'Gi√° m·ªói ƒë√™m']: df_loaded[req_col] = 0.0
                else: df_loaded[req_col] = "N/A"

        active_bookings_loaded = df_loaded[df_loaded['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy() if 'T√¨nh tr·∫°ng' in df_loaded.columns else pd.DataFrame(columns=ALL_REQUIRED_COLS)
        df_final = df_loaded[[col for col in ALL_REQUIRED_COLS if col in df_loaded.columns]].copy()
        if active_bookings_loaded is not None and not active_bookings_loaded.empty:
            active_bookings_final = active_bookings_loaded[[col for col in ALL_REQUIRED_COLS if col in active_bookings_loaded.columns]].copy()
        else: active_bookings_final = pd.DataFrame(columns=ALL_REQUIRED_COLS)

        st.success(f"ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng file {filename}. T√¨m th·∫•y {len(df_final)} ƒë·∫∑t ph√≤ng, trong ƒë√≥ {len(active_bookings_final)} ƒëang ho·∫°t ƒë·ªông.")
        return df_final, active_bookings_final
    except FileNotFoundError: st.error(f"L·ªói: File {filename} kh√¥ng t√¨m th·∫•y."); return None, None
    except xlrd.XLRDError: st.error(f"L·ªói khi ƒë·ªçc file Excel c≈© (.xls): {filename}."); return None, None
    except openpyxl.utils.exceptions.InvalidFileException: st.error(f"L·ªói khi ƒë·ªçc file Excel (.xlsx): {filename}."); return None, None
    except Exception as e: st.error(f"L·ªói nghi√™m tr·ªçng x·∫£y ra khi x·ª≠ l√Ω file {filename}: {e}"); import traceback; st.error(f"Chi ti·∫øt l·ªói: {traceback.format_exc()}"); return None, None

def create_demo_data() -> Tuple[pd.DataFrame, pd.DataFrame]:
    st.info("ƒêang t·∫°o d·ªØ li·ªáu demo...")
    demo_data = {
        'T√™n ch·ªó ngh·ªâ': ['Home in Old Quarter - Night market', 'Old Quarter Home- Kitchen & Balcony', 'Home in Old Quarter - Night market', 'Old Quarter Home- Kitchen & Balcony', 'Riverside Boutique Apartment'],
        'V·ªã tr√≠': ['Ph·ªë C·ªï H√† N·ªôi, Ho√†n Ki·∫øm, Vietnam', '118 Ph·ªë H√†ng B·∫°c, Ho√†n Ki·∫øm, Vietnam', 'Ph·ªë C·ªï H√† N·ªôi, Ho√†n Ki·∫øm, Vietnam', '118 Ph·ªë H√†ng B·∫°c, Ho√†n Ki·∫øm, Vietnam', 'Qu·∫≠n 2, TP. H·ªì Ch√≠ Minh, Vietnam'],
        'T√™n ng∆∞·ªùi ƒë·∫∑t': ['Demo User Alpha', 'Demo User Beta', 'Demo User Alpha', 'Demo User Gamma', 'Demo User Delta'],
        'Th√†nh vi√™n Genius': ['Kh√¥ng', 'C√≥', 'Kh√¥ng', 'C√≥', 'Kh√¥ng'],
        'Ng√†y ƒë·∫øn': ['ng√†y 22 th√°ng 5 nƒÉm 2025', 'ng√†y 23 th√°ng 5 nƒÉm 2025', 'ng√†y 25 th√°ng 5 nƒÉm 2025', 'ng√†y 26 th√°ng 5 nƒÉm 2025', 'ng√†y 1 th√°ng 6 nƒÉm 2025'],
        'Ng√†y ƒëi': ['ng√†y 23 th√°ng 5 nƒÉm 2025', 'ng√†y 24 th√°ng 5 nƒÉm 2025', 'ng√†y 26 th√°ng 5 nƒÉm 2025', 'ng√†y 28 th√°ng 5 nƒÉm 2025', 'ng√†y 5 th√°ng 6 nƒÉm 2025'],
        'ƒê∆∞·ª£c ƒë·∫∑t v√†o': ['ng√†y 20 th√°ng 5 nƒÉm 2025', 'ng√†y 21 th√°ng 5 nƒÉm 2025', 'ng√†y 22 th√°ng 5 nƒÉm 2025', 'ng√†y 23 th√°ng 5 nƒÉm 2025', 'ng√†y 25 th√°ng 5 nƒÉm 2025'],
        'T√¨nh tr·∫°ng': ['OK', 'OK', 'ƒê√£ h·ªßy', 'OK', 'OK'],
        'T·ªïng thanh to√°n': [300000, 450000, 200000, 600000, 1200000],
        'Hoa h·ªìng': [60000, 90000, 40000, 120000, 240000],
        'Ti·ªÅn t·ªá': ['VND', 'VND', 'VND', 'VND', 'VND'],
        'S·ªë ƒë·∫∑t ph√≤ng': [f'DEMO{i+1:09d}' for i in range(5)]
    }
    df_demo = pd.DataFrame(demo_data)
    df_demo['Check-in Date'] = df_demo['Ng√†y ƒë·∫øn'].apply(parse_app_standard_date)
    df_demo['Check-out Date'] = df_demo['Ng√†y ƒëi'].apply(parse_app_standard_date)
    df_demo['Booking Date'] = df_demo['ƒê∆∞·ª£c ƒë·∫∑t v√†o'].apply(parse_app_standard_date)
    df_demo['Check-in Date'] = pd.to_datetime(df_demo['Check-in Date'], errors='coerce')
    df_demo['Check-out Date'] = pd.to_datetime(df_demo['Check-out Date'], errors='coerce')
    df_demo['Booking Date'] = pd.to_datetime(df_demo['Booking Date'], errors='coerce')
    df_demo.dropna(subset=['Check-in Date', 'Check-out Date'], inplace=True)
    if not df_demo.empty:
        df_demo['Stay Duration'] = (df_demo['Check-out Date'] - df_demo['Check-in Date']).dt.days
        df_demo['Stay Duration'] = df_demo['Stay Duration'].apply(lambda x: max(0, x) if pd.notna(x) else 0)
    else: df_demo['Stay Duration'] = 0

    if 'T·ªïng thanh to√°n' in df_demo.columns and 'Stay Duration' in df_demo.columns:
        df_demo['T·ªïng thanh to√°n'] = pd.to_numeric(df_demo['T·ªïng thanh to√°n'], errors='coerce').fillna(0)
        df_demo['Gi√° m·ªói ƒë√™m'] = np.where(
            (df_demo['Stay Duration'].notna()) & (df_demo['Stay Duration'] > 0) & (df_demo['T·ªïng thanh to√°n'].notna()),
            df_demo['T·ªïng thanh to√°n'] / df_demo['Stay Duration'],
            0.0
        ).round(0)
    else:
        df_demo['Gi√° m·ªói ƒë√™m'] = 0.0

    active_bookings_demo = df_demo[df_demo['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy()
    return df_demo, active_bookings_demo

def get_room_availability(date_to_check: datetime.date, current_bookings_df: Optional[pd.DataFrame], all_room_types: List[str], rooms_per_type: int = ROOM_UNIT_PER_ROOM_TYPE) -> Dict[str, int]:
    if current_bookings_df is None or current_bookings_df.empty or not all_room_types:
        return {room_type: rooms_per_type for room_type in all_room_types}
    if isinstance(date_to_check, pd.Timestamp): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.datetime): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.date): date_to_check_dt = date_to_check
    else: st.error(f"ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá: {date_to_check}"); return {room_type: 0 for room_type in all_room_types}
    availability = {room_type: rooms_per_type for room_type in all_room_types}
    required_date_cols = ['Check-in Date', 'Check-out Date']
    for col in required_date_cols:
        if col not in current_bookings_df.columns or not pd.api.types.is_datetime64_any_dtype(current_bookings_df[col]):
            st.warning(f"C·ªôt ng√†y '{col}' b·ªã thi·∫øu ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng."); return availability
    active_on_date = current_bookings_df[
        (current_bookings_df['Check-in Date'].dt.date <= date_to_check_dt) &
        (current_bookings_df['Check-out Date'].dt.date > date_to_check_dt) &
        (current_bookings_df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy')
    ]
    occupied_counts = active_on_date.groupby('T√™n ch·ªó ngh·ªâ').size()
    for room_type_item, occupied_count_val in occupied_counts.items():
        if room_type_item in availability:
            availability[room_type_item] = max(0, rooms_per_type - occupied_count_val)
    return availability

def get_daily_activity(date_to_check: datetime.date, current_bookings_df: Optional[pd.DataFrame]) -> Dict[str, List[Dict]]:
    if current_bookings_df is None or current_bookings_df.empty:
        return {'check_in': [], 'check_out': [], 'occupied': []}
    if isinstance(date_to_check, pd.Timestamp): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.datetime): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.date): date_to_check_dt = date_to_check
    else: st.error(f"ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá: {date_to_check}"); return {'check_in': [], 'check_out': [], 'occupied': []}
    result = {'check_in': [], 'check_out': [], 'occupied': []}
    required_date_cols = ['Check-in Date', 'Check-out Date']
    for col in required_date_cols:
        if col not in current_bookings_df.columns or not pd.api.types.is_datetime64_any_dtype(current_bookings_df[col]):
            st.warning(f"C·ªôt ng√†y '{col}' b·ªã thi·∫øu ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng."); return result
    active_bookings_df_daily = current_bookings_df[current_bookings_df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy']
    if active_bookings_df_daily.empty: return result
    check_ins_df = active_bookings_df_daily[active_bookings_df_daily['Check-in Date'].dt.date == date_to_check_dt]
    for _, booking in check_ins_df.iterrows():
        result['check_in'].append({'name': booking.get('T√™n ng∆∞·ªùi ƒë·∫∑t', 'N/A'), 'room_type': booking.get('T√™n ch·ªó ngh·ªâ', 'N/A'), 'booking_id': booking.get('S·ªë ƒë·∫∑t ph√≤ng', 'N/A')})
    check_outs_df = active_bookings_df_daily[active_bookings_df_daily['Check-out Date'].dt.date == date_to_check_dt]
    for _, booking in check_outs_df.iterrows():
        result['check_out'].append({'name': booking.get('T√™n ng∆∞·ªùi ƒë·∫∑t', 'N/A'), 'room_type': booking.get('T√™n ch·ªó ngh·ªâ', 'N/A'), 'booking_id': booking.get('S·ªë ƒë·∫∑t ph√≤ng', 'N/A')})
    occupied_df = active_bookings_df_daily[
        (active_bookings_df_daily['Check-in Date'].dt.date <= date_to_check_dt) &
        (active_bookings_df_daily['Check-out Date'].dt.date > date_to_check_dt)
    ]
    for _, booking in occupied_df.iterrows():
        result['occupied'].append({
            'name': booking.get('T√™n ng∆∞·ªùi ƒë·∫∑t', 'N/A'), 'room_type': booking.get('T√™n ch·ªó ngh·ªâ', 'N/A'),
            'booking_id': booking.get('S·ªë ƒë·∫∑t ph√≤ng', 'N/A'),
            'check_in': booking.get('Check-in Date').date() if pd.notnull(booking.get('Check-in Date')) else None,
            'check_out': booking.get('Check-out Date').date() if pd.notnull(booking.get('Check-out Date')) else None,
            'total_payment': booking.get('T·ªïng thanh to√°n', 0.0)
        })
    return result

def get_overall_calendar_day_info(date_to_check: datetime.date, current_bookings_df: Optional[pd.DataFrame], hotel_total_capacity: int) -> Dict[str, Any]:
    if current_bookings_df is None or current_bookings_df.empty or hotel_total_capacity == 0:
        return {'occupied_units': 0, 'available_units': hotel_total_capacity, 'guests': [], 'status_text': f"Tr·ªëng" if hotel_total_capacity > 0 else "N/A", 'color': '#D4EFDF', 'status_indicator_type': 'green_dot' if hotel_total_capacity > 0 else 'error'}
    if isinstance(date_to_check, pd.Timestamp): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.datetime): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.date): date_to_check_dt = date_to_check
    else: return {'occupied_units': 0, 'available_units': 0, 'guests': [], 'status_text': "L·ªói ng√†y", 'color': '#EAECEE', 'status_indicator_type': 'error'}
    required_date_cols = ['Check-in Date', 'Check-out Date']
    for col in required_date_cols:
        if col not in current_bookings_df.columns or not pd.api.types.is_datetime64_any_dtype(current_bookings_df[col]):
            st.warning(f"C·ªôt ng√†y '{col}' b·ªã thi·∫øu ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng."); return {'occupied_units': 0, 'available_units': hotel_total_capacity, 'guests': [], 'status_text': "L·ªói d·ªØ li·ªáu", 'color': '#EAECEE', 'status_indicator_type': 'error'}
    active_on_date_df = current_bookings_df[
        (current_bookings_df['Check-in Date'].dt.date <= date_to_check_dt) &
        (current_bookings_df['Check-out Date'].dt.date > date_to_check_dt) &
        (current_bookings_df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy')
    ]
    occupied_units = len(active_on_date_df)
    available_units = max(0, hotel_total_capacity - occupied_units)
    guests_staying_today = active_on_date_df['T√™n ng∆∞·ªùi ƒë·∫∑t'].unique().tolist() if 'T√™n ng∆∞·ªùi ƒë·∫∑t' in active_on_date_df else []
    status_text = ""; color_indicator = ""; status_indicator_type = ""
    if available_units == hotel_total_capacity and hotel_total_capacity > 0: status_text = f"Tr·ªëng"; status_indicator_type = "green_dot"
    elif available_units > 0: status_text = f"{available_units}/{hotel_total_capacity} tr·ªëng"; status_indicator_type = "green_dot"
    elif hotel_total_capacity > 0 : status_text = f"H·∫øt ph√≤ng"; status_indicator_type = "orange_dash"
    else: status_text = "N/A"; status_indicator_type = "error"
    return {'occupied_units': occupied_units, 'available_units': available_units, 'guests': guests_staying_today, 'status_text': status_text, 'color': color_indicator, 'status_indicator_type': status_indicator_type}


# --- M·∫™U TIN NH·∫ÆN V√Ä H√ÄM X·ª¨ L√ù ---
DEFAULT_MESSAGE_TEMPLATE_CONTENT = """
HET PHONG : We sincerely apologize for this inconvenience. Due to an unforeseen issue, the room you booked is no longer available
Thank you for your understanding.
We hope to have the pleasure of welcoming you on your next visit.
Have a pleasant evening

DON PHONG : You're welcome! Please feel free to relax and get some breakfast.
We'll get your room ready and clean for you, and I'll let you know as soon as possible when it's all set

WELCOME :
1. Welcome!
Thanks for your reservation. We look forward to seeing you soon
2. Hello Alejandro,
I've received your reservation for 118 Hang Bac.
Could you please let me know your approximate arrival time for today?
ARRIVAL : When you arrive at 118 Hang Bac, please text me  I will guide you to your room.
EARLY CHECK IN : Hello, I'm so sorry, but the room isn't available right now.
You're welcome to leave your luggage here and use the Wi-Fi.
I'll check again around 12:00 AM and let you know as soon as possible

CHECK IN : When you arrive at 118 Hang Bac Street, you will see a souvenir shop at the front.
Please walk into the shop about 10 meters, and you will find a staircase on your right-hand side.
Go up the stairs, then look for your room number.
The door will be unlocked, and the key will be inside the room.
FEED BACK : We hope you had a wonderful stay!
We'd love to hear about your experience ‚Äì feel free to leave us a review on Booking.com

PARK : Please park your motorbike across the street, but make sure not to block their right-side door.
"""

def parse_message_templates(text_content: str) -> Dict[str, List[Tuple[str, str]]]:
    templates: Dict[str, List[Tuple[str, str]]] = {}
    current_category: Optional[str] = None
    current_label: Optional[str] = None
    current_message_lines: List[str] = []
    cleaned_content = re.sub(r"'", "", text_content)

    def finalize_and_store_message():
        nonlocal current_category, current_label, current_message_lines, templates
        if current_category and current_label and current_message_lines:
            message = "\n".join(current_message_lines).strip()
            if message:
                if current_category not in templates:
                    templates[current_category] = []
                existing_label_index = -1
                for i, (lbl, _) in enumerate(templates[current_category]):
                    if lbl == current_label:
                        existing_label_index = i
                        break
                if existing_label_index != -1:
                    templates[current_category][existing_label_index] = (current_label, message)
                else:
                    templates[current_category].append((current_label, message))
            current_message_lines = []

    for line in cleaned_content.splitlines():
        stripped_line = line.strip()
        main_cat_match = re.match(r'^([A-Z][A-Z\s]*[A-Z]|[A-Z]+)\s*:\s*(.*)', line)
        sub_label_numbered_match = re.match(r'^\s*(\d+\.)\s*(.*)', stripped_line)
        sub_label_named_match = None
        if current_category:
             potential_sub_label_named_match = re.match(r'^\s*([\w\s()]+?)\s*:\s*(.*)', stripped_line)
             if potential_sub_label_named_match:
                 if potential_sub_label_named_match.group(1).strip() != current_category and potential_sub_label_named_match.group(1).strip().isupper() is False:
                     sub_label_named_match = potential_sub_label_named_match
        if main_cat_match:
            potential_cat_name = main_cat_match.group(1).strip()
            if potential_cat_name.isupper():
                finalize_and_store_message()
                current_category = potential_cat_name
                current_label = "DEFAULT"
                message_on_same_line = main_cat_match.group(2).strip()
                if message_on_same_line:
                    current_message_lines.append(message_on_same_line)
            elif current_category and sub_label_named_match is None:
                sub_label_named_match = main_cat_match
        if current_category:
            is_new_sub_label = False
            if sub_label_numbered_match:
                finalize_and_store_message()
                current_label = sub_label_numbered_match.group(1).strip()
                message_on_same_line = sub_label_numbered_match.group(2).strip()
                if message_on_same_line:
                    current_message_lines.append(message_on_same_line)
                is_new_sub_label = True
            elif sub_label_named_match:
                if not (main_cat_match and main_cat_match.group(1).strip().isupper() and main_cat_match.group(1).strip() == sub_label_named_match.group(1).strip()):
                    finalize_and_store_message()
                    current_label = sub_label_named_match.group(1).strip()
                    message_on_same_line = sub_label_named_match.group(2).strip()
                    if message_on_same_line:
                        current_message_lines.append(message_on_same_line)
                    is_new_sub_label = True
            if not is_new_sub_label and main_cat_match is None:
                if stripped_line or current_message_lines:
                    if not current_label and stripped_line:
                        current_label = "DEFAULT"
                    current_message_lines.append(line)
    finalize_and_store_message()
    return templates

def format_templates_to_text(templates_dict: Dict[str, List[Tuple[str, str]]]) -> str:
    output_lines = []
    for category_name in sorted(templates_dict.keys()):
        labeled_messages = templates_dict[category_name]
        default_message_written_on_cat_line = False
        if labeled_messages and labeled_messages[0][0] == "DEFAULT":
            default_msg_text = labeled_messages[0][1]
            msg_lines = default_msg_text.split('\n')
            output_lines.append(f"{category_name} : {msg_lines[0] if msg_lines else ''}")
            if len(msg_lines) > 1:
                output_lines.extend(msg_lines[1:])
            default_message_written_on_cat_line = True
        else:
            output_lines.append(f"{category_name} :")

        for i, (label, msg_text) in enumerate(labeled_messages):
            if label == "DEFAULT" and default_message_written_on_cat_line and i == 0:
                continue
            msg_lines = msg_text.split('\n')
            if not (label == "DEFAULT" and i==0) :
                 if not (default_message_written_on_cat_line and i==0 and label=="DEFAULT"):
                      if not (not default_message_written_on_cat_line and i==0 and label=="DEFAULT" and output_lines and not output_lines[-1].endswith(":")):
                        output_lines.append("")
            if label == "DEFAULT":
                output_lines.extend(msg_lines)
            elif label.endswith('.'):
                output_lines.append(f"{label} {msg_lines[0] if msg_lines else ''}")
                if len(msg_lines) > 1:
                    output_lines.extend(msg_lines[1:])
            else:
                output_lines.append(f"{label} : {msg_lines[0] if msg_lines else ''}")
                if len(msg_lines) > 1:
                    output_lines.extend(msg_lines[1:])
        output_lines.append("")
    return "\n".join(output_lines) if output_lines else ""


# --- KH·ªûI T·∫†O SESSION STATE ---
if 'df' not in st.session_state: st.session_state.df = None
if 'active_bookings' not in st.session_state: st.session_state.active_bookings = None
if 'room_types' not in st.session_state: st.session_state.room_types = []
if 'data_source' not in st.session_state: st.session_state.data_source = None
if 'uploaded_file_name' not in st.session_state: st.session_state.uploaded_file_name = None
if 'last_action_message' not in st.session_state: st.session_state.last_action_message = None
if 'current_date_calendar' not in st.session_state: st.session_state.current_date_calendar = datetime.date.today()
if 'selected_calendar_date' not in st.session_state: st.session_state.selected_calendar_date = None
if 'booking_sort_column' not in st.session_state:
    st.session_state.booking_sort_column = 'Booking Date'
if 'booking_sort_ascending' not in st.session_state:
    st.session_state.booking_sort_ascending = False

if 'message_templates_dict' not in st.session_state:
    st.session_state.message_templates_dict = parse_message_templates(DEFAULT_MESSAGE_TEMPLATE_CONTENT)

if 'raw_template_content_for_download' not in st.session_state:
    if 'message_templates_dict' in st.session_state and st.session_state.message_templates_dict is not None:
        st.session_state.raw_template_content_for_download = format_templates_to_text(st.session_state.message_templates_dict)
    else:
        st.session_state.raw_template_content_for_download = ""

if 'editing_booking_id_for_dialog' not in st.session_state:
    st.session_state.editing_booking_id_for_dialog = None

# Kh·ªüi t·∫°o gi√° tr·ªã m·∫∑c ƒë·ªãnh cho form th√™m ƒë·∫∑t ph√≤ng n·∫øu ch∆∞a c√≥
if "add_form_check_in_final" not in st.session_state:
    st.session_state.add_form_check_in_final = datetime.date.today()
if "add_form_check_out_final" not in st.session_state:
    st.session_state.add_form_check_out_final = datetime.date.today() + timedelta(days=1)

if 'customer_html_data' not in st.session_state: # Th√™m session state cho d·ªØ li·ªáu kh√°ch h√†ng t·ª´ HTML
    st.session_state.customer_html_data = None


# --- GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG (UI) & LOGIC T·∫¢I D·ªÆ LI·ªÜU ---
st.sidebar.title("üè® Qu·∫£n l√Ω ph√≤ng")
if not PYPDF2_AVAILABLE and not BS4_AVAILABLE: st.sidebar.warning("X·ª≠ l√Ω PDF v√† HTML b·ªã h·∫°n ch·∫ø. C√†i ƒë·∫∑t: `pip install pypdf2 beautifulsoup4`")
elif not PYPDF2_AVAILABLE: st.sidebar.warning("X·ª≠ l√Ω PDF s·∫Ω kh√¥ng ho·∫°t ƒë·ªông. C√†i ƒë·∫∑t: `pip install pypdf2`")
elif not BS4_AVAILABLE: st.sidebar.warning("X·ª≠ l√Ω HTML s·∫Ω kh√¥ng ho·∫°t ƒë·ªông. C√†i ƒë·∫∑t: `pip install beautifulsoup4`")

uploaded_file = st.sidebar.file_uploader("T·∫£i l√™n file ƒë·∫∑t ph√≤ng (Excel, PDF, HTML)", type=['xls', 'xlsx', 'pdf', 'html'], key="file_uploader_key", help="H·ªó tr·ª£ file Excel, PDF, HTML t·ª´ Booking.com.")
if uploaded_file is not None:
    if st.session_state.uploaded_file_name != uploaded_file.name or st.session_state.df is None:
        with st.spinner(f"ƒêang x·ª≠ l√Ω file: {uploaded_file.name}..."):
            df_from_file, active_bookings_from_file = load_data_from_file(uploaded_file)
        if df_from_file is not None and not df_from_file.empty:
            st.session_state.df = df_from_file
            st.session_state.active_bookings = active_bookings_from_file
            st.session_state.room_types = get_cleaned_room_types(df_from_file)
            st.session_state.data_source = 'file'
            st.session_state.uploaded_file_name = uploaded_file.name
            st.sidebar.success(f"ƒê√£ t·∫£i v√† x·ª≠ l√Ω th√†nh c√¥ng file: {uploaded_file.name}")
            st.session_state.selected_calendar_date = None
            st.rerun()
        else:
            st.sidebar.error(f"Kh√¥ng th·ªÉ x·ª≠ l√Ω file {uploaded_file.name} ho·∫∑c file kh√¥ng ch·ª©a d·ªØ li·ªáu h·ª£p l·ªá.")
            st.session_state.data_source = 'error_loading_file'
            st.session_state.uploaded_file_name = uploaded_file.name
elif st.session_state.df is None and st.session_state.data_source != 'error_loading_file':
    st.sidebar.info("ƒêang t·∫£i d·ªØ li·ªáu m·∫∑c ƒë·ªãnh t·ª´ Google Sheets...")
    def import_from_gsheet(sheet_id, creds_path, worksheet_name=None):
        scope = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive',
        ]
        # MODIFICATION START: Load credentials from Streamlit secrets if available
        if "GCP_SERVICE_ACCOUNT_JSON" in st.secrets:
            creds_json_str = st.secrets["GCP_SERVICE_ACCOUNT_JSON"]
            st.error(f"DEBUG (Initial import_from_gsheet MAIN): GCP_SERVICE_ACCOUNT_JSON is {len(creds_json_str)} chars long.") # ENSURED DEBUG LINE
            creds_info = json.loads(creds_json_str)
            creds = Credentials.from_service_account_info(creds_info, scopes=scope)
        elif creds_path and os.path.exists(creds_path): # Fallback to local file if secret not found (for local dev)
            creds = Credentials.from_service_account_file(creds_path, scopes=scope)
        else:
            st.error("Google Sheets credentials not found. Please set GCP_SERVICE_ACCOUNT_JSON secret in Streamlit Cloud or provide a valid local creds_path.")
            return pd.DataFrame() # Return empty DataFrame on credential error
        # MODIFICATION END
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(sheet_id)
        if worksheet_name:
            worksheet = sh.worksheet(worksheet_name)
        else:
            worksheet = sh.sheet1
        data = worksheet.get_all_values()
        if not data or len(data) < 2:
            return pd.DataFrame()
        df = pd.DataFrame(data[1:], columns=data[0])
        return df

    # Construct path relative to the script file
    try:
        import os # Attempt to import os here if not already globally available
        
        # Define the credentials filename
        creds_filename = "streamlit-api-461302-5dfbcb4beaba.json"
        
        # Initial assumption: creds_path is just the filename (implies it's in CWD or PATH)
        creds_path = creds_filename
        
        # Attempt to find the file in the script's directory
        try:
            script_dir = os.path.dirname(__file__)
            path_in_script_dir = os.path.join(script_dir, creds_filename)
            if os.path.exists(path_in_script_dir):
                creds_path = path_in_script_dir
                st.info(f"Using credentials from script directory: {creds_path}")
        except NameError: # __file__ might not be defined
            st.warning(f"__file__ not defined. Cannot check script directory for credentials.")

        # If not found in script_dir (or __file__ was undefined), check the current working directory
        if not os.path.exists(creds_path):
            current_working_directory = os.getcwd()
            path_in_cwd = os.path.join(current_working_directory, creds_filename)
            if os.path.exists(path_in_cwd):
                creds_path = path_in_cwd
                st.info(f"Using credentials from CWD: {creds_path}")
            else:
                # If still not found, log a warning. The gspread call will likely fail.
                st.warning(f"Credentials file '{creds_filename}' not found in script directory or CWD. Will attempt to load using '{creds_path}' which may fail if not in Python's path or accessible.")

    except ImportError:
        creds_path = "streamlit-api-461302-5dfbcb4beaba.json" # Fallback if os module cannot be imported
        st.error("Could not import 'os' module. Critical for locating credentials. Using fallback relative path for credentials, which may not work.")
    except Exception as e_path:
        creds_path = "streamlit-api-461302-5dfbcb4beaba.json" # General fallback
        st.error(f"An unexpected error occurred during credential path construction: {e_path}. Using fallback relative path.")


    default_sheet_id = "13kQETOUGCVUwUqZrxeLy-WAj3b17SugI4L8Oq09SX2w"
    worksheet_name = "BookingManager"
    df_gsheet = import_from_gsheet(default_sheet_id, creds_path, worksheet_name)
    if df_gsheet is not None and not df_gsheet.empty:
        st.session_state.df = df_gsheet
        st.session_state.active_bookings = df_gsheet[df_gsheet['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy() if 'T√¨nh tr·∫°ng' in df_gsheet.columns else df_gsheet.copy()
        st.session_state.room_types = get_cleaned_room_types(df_gsheet)
        st.session_state.data_source = 'gsheet_default'
    else:
        st.session_state.df, st.session_state.active_bookings = create_demo_data()
        if st.session_state.df is not None and not st.session_state.df.empty:
            st.session_state.room_types = get_cleaned_room_types(st.session_state.df)
        else:
            st.session_state.room_types = []
        st.session_state.data_source = 'demo'
    st.session_state.selected_calendar_date = None


df = st.session_state.get('df')
active_bookings = st.session_state.get('active_bookings')
room_types = st.session_state.get('room_types', []) 
default_min_date = datetime.date.today() - timedelta(days=365)
default_max_date = datetime.date.today() + timedelta(days=365)
# Ensure date columns are datetime before using .date()
if df is not None and not df.empty:
    if 'Check-in Date' in df.columns:
        df['Check-in Date'] = pd.to_datetime(df['Check-in Date'], errors='coerce')
    if 'Check-out Date' in df.columns:
        df['Check-out Date'] = pd.to_datetime(df['Check-out Date'], errors='coerce')
    if 'Booking Date' in df.columns:
        df['Booking Date'] = pd.to_datetime(df['Booking Date'], errors='coerce')
if active_bookings is not None and not active_bookings.empty:
    if 'Check-in Date' in active_bookings.columns:
        active_bookings['Check-in Date'] = pd.to_datetime(active_bookings['Check-in Date'], errors='coerce')
    if 'Check-out Date' in active_bookings.columns:
        active_bookings['Check-out Date'] = pd.to_datetime(active_bookings['Check-out Date'], errors='coerce')
    if 'Booking Date' in active_bookings.columns:
        active_bookings['Booking Date'] = pd.to_datetime(active_bookings['Booking Date'], errors='coerce')

min_date_val = (df['Check-in Date'].min().date() if df is not None and not df.empty and 'Check-in Date' in df.columns and not df['Check-in Date'].dropna().empty else default_min_date)
max_date_val = (df['Check-out Date'].max().date() if df is not None and not df.empty and 'Check-out Date' in df.columns and not df['Check-out Date'].dropna().empty else default_max_date)


# --- Function to display day details in a dialog ---
@st.dialog("üóìÔ∏è Chi ti·∫øt ho·∫°t ƒë·ªông ng√†y")
def show_day_details_modal(date_to_show):
    st.subheader(f"{date_to_show.strftime('%A, %d/%m/%Y')}")
    # Ensure active_bookings is available from session_state for the dialog
    active_bookings_for_dialog = st.session_state.get('active_bookings')
    if active_bookings_for_dialog is None:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒë·∫∑t ph√≤ng ƒëang ho·∫°t ƒë·ªông.")
        if st.button("ƒê√≥ng", key=f"close_day_details_modal_error_{date_to_show.strftime('%Y%m%d')}"):
            st.rerun()
        return

    daily_activity_data = get_daily_activity(date_to_show, active_bookings_for_dialog)

    if not daily_activity_data['check_in'] and not daily_activity_data['check_out'] and not daily_activity_data['occupied']:
        st.info("Kh√¥ng c√≥ ho·∫°t ƒë·ªông n√†o cho ng√†y n√†y.")
    else:
        col_checkin, col_checkout, col_occupied = st.columns(3)
        with col_checkin:
            st.markdown("##### üõ¨ Check-in")
            if daily_activity_data['check_in']:
                st.success(f"{len(daily_activity_data['check_in'])} l∆∞·ª£t")
                for guest in daily_activity_data['check_in']:
                    st.markdown(f"- **{guest.get('name','N/A')}**")
                    st.caption(f"  {guest.get('room_type','N/A')}, M√£ ƒêP: {guest.get('booking_id','N/A')}")
            else: st.caption("Kh√¥ng c√≥.")
        with col_checkout:
            st.markdown("##### üõ´ Check-out")
            if daily_activity_data['check_out']:
                st.warning(f"{len(daily_activity_data['check_out'])} l∆∞·ª£t")
                for guest in daily_activity_data['check_out']:
                    st.markdown(f"- **{guest.get('name','N/A')}**")
                    st.caption(f"  {guest.get('room_type','N/A')}, M√£ ƒêP: {guest.get('booking_id','N/A')}")
            else: st.caption("Kh√¥ng c√≥.")
        with col_occupied:
            st.markdown("##### üè® ƒêang ·ªü")
            if daily_activity_data['occupied']:
                st.info(f"{len(daily_activity_data['occupied'])} l∆∞·ª£t")
                for guest in daily_activity_data['occupied']:
                    check_in_str = guest['check_in'].strftime('%d/%m') if guest['check_in'] else 'N/A'
                    check_out_str = guest['check_out'].strftime('%d/%m') if guest['check_out'] else 'N/A'
                    total_payment_val = guest.get('total_payment', 0.0)
                    total_payment_str = f"{total_payment_val:,.0f}" if pd.notna(total_payment_val) and total_payment_val != 0.0 else "0"
                    st.markdown(f"- **{guest.get('name','N/A')}**")
                    st.caption(f"  {guest.get('room_type','N/A')}, {check_in_str} - {check_out_str}, TT: {total_payment_str}")
                    if len(daily_activity_data['occupied']) > 1 : st.markdown("<div class='guest-separator'></div>", unsafe_allow_html=True)
            else: st.caption("Kh√¥ng c√≥.")
    st.markdown("---")
    if st.button("ƒê√≥ng", key=f"close_day_details_modal_{date_to_show.strftime('%Y%m%d')}"):
        st.rerun() # Simply rerun to close the dialog implicitly

# --- C√ÅC TAB CH·ª®C NƒÇNG ---
tab_titles = ["üìä Dashboard", "üìÖ L·ªãch ph√≤ng", "üìã Qu·∫£n l√Ω ƒë·∫∑t ph√≤ng", "üìà Ph√¢n t√≠ch", "‚ûï Th√™m ƒë·∫∑t ph√≤ng", "üíå M·∫´u tin nh·∫Øn", "üë• Kh√°ch m·ªõi HTML"] # Th√™m tab m·ªõi
tab_dashboard, tab_calendar, tab_booking_mgmt, tab_analytics, tab_add_booking, tab_message_templates, tab_customer_html = st.tabs(tab_titles) # Th√™m bi·∫øn tab m·ªõi

# --- TAB DASHBOARD ---
with tab_dashboard:
    st.header("üìä T·ªïng quan Dashboard")
    if df is not None and not df.empty and active_bookings is not None:
        st.markdown("#### S·ªë li·ªáu ch√≠nh")
        # col1, col2, col3, col4 = st.columns(4) # Old 4-column layout
        row1_cols = st.columns(3) # First row of 3 metrics
        row2_cols = st.columns(3) # Second row of 3 metrics

        today_dt = datetime.date.today()

        # Metric 1: T·ªïng s·ªë ƒë·∫∑t ph√≤ng
        total_bookings_count = len(df)
        active_bookings_count = len(active_bookings) if active_bookings is not None else 0
        with row1_cols[0]:
            st.markdown(f"""<div class="metric-card" style="border-left-color: var(--primary-color);"><p style="font-size: 0.9rem; color: #666;">T·ªïng s·ªë ƒë·∫∑t ph√≤ng</p><h3 style="color: var(--primary-color); margin-top: 0.5rem;">{total_bookings_count}</h3><p style="font-size: 0.8rem; color: var(--success-color);">{active_bookings_count} ƒëang ho·∫°t ƒë·ªông</p></div>""", unsafe_allow_html=True)

        # Metric 2: T·ªïng TT ƒë√£ Check-in
        total_checked_in_revenue_dashboard = 0
        if 'T·ªïng thanh to√°n' in active_bookings.columns and not active_bookings.empty:
            # Ensure Check-in Date is datetime before using .dt
            active_bookings_for_revenue = active_bookings.copy()
            active_bookings_for_revenue['Check-in Date'] = pd.to_datetime(active_bookings_for_revenue['Check-in Date'], errors='coerce')
            
            checked_in_df_dashboard = active_bookings_for_revenue[
                (active_bookings_for_revenue['Check-in Date'].dt.date <= today_dt)
            ]
            checked_in_df_dashboard['T·ªïng thanh to√°n'] = pd.to_numeric(checked_in_df_dashboard['T·ªïng thanh to√°n'], errors='coerce').fillna(0)
            total_checked_in_revenue_dashboard = checked_in_df_dashboard['T·ªïng thanh to√°n'].sum()
        with row1_cols[1]:
            st.markdown(f"""<div class="metric-card" style="border-left-color: var(--success-color);"><p style="font-size: 0.9rem; color: #666;">T·ªïng TT ƒë√£ Check-in (VND)</p><h3 style="color: var(--success-color); margin-top: 0.5rem;">{total_checked_in_revenue_dashboard:,.0f}</h3><p style="font-size: 0.8rem; color: #666;">T√≠nh ƒë·∫øn h√¥m nay</p></div>""", unsafe_allow_html=True)

        # Metric 3: T·ªïng TT d·ª± ki·∫øn (T·∫•t c·∫£ Hƒê)
        if 'T·ªïng thanh to√°n' in active_bookings.columns and not active_bookings.empty:
            active_bookings['T·ªïng thanh to√°n'] = pd.to_numeric(active_bookings['T·ªïng thanh to√°n'], errors='coerce').fillna(0)
            total_expected_revenue_all_active_dashboard = active_bookings['T·ªïng thanh to√°n'].sum()
        else:
            total_expected_revenue_all_active_dashboard = 0
        with row1_cols[2]:
            st.markdown(f"""<div class="metric-card" style="border-left-color: var(--secondary-color);"><p style="font-size: 0.9rem; color: #666;">T·ªïng TT d·ª± ki·∫øn (T·∫•t c·∫£ Hƒê, VND)</p><h3 style="color: var(--secondary-color); margin-top: 0.5rem;">{total_expected_revenue_all_active_dashboard:,.0f}</h3><p style="font-size: 0.8rem; color: #666;">T·ª´ c√°c ƒë·∫∑t ph√≤ng ho·∫°t ƒë·ªông</p></div>""", unsafe_allow_html=True)

        # Metric 4: T·ª∑ l·ªá l·∫•p ƒë·∫ßy (T·ªïng)
        if not active_bookings.empty:
             # Ensure Check-in/out Dates are datetime before using .dt
            active_bookings_for_occupancy = active_bookings.copy()
            active_bookings_for_occupancy['Check-in Date'] = pd.to_datetime(active_bookings_for_occupancy['Check-in Date'], errors='coerce')
            active_bookings_for_occupancy['Check-out Date'] = pd.to_datetime(active_bookings_for_occupancy['Check-out Date'], errors='coerce')

            active_on_today_dashboard = active_bookings_for_occupancy[(
                active_bookings_for_occupancy['Check-in Date'].dt.date <= today_dt) & 
                (active_bookings_for_occupancy['Check-out Date'].dt.date > today_dt) & 
                (active_bookings_for_occupancy['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy')
            ]
            occupied_today_count_dashboard_actual = len(active_on_today_dashboard)
        else: occupied_today_count_dashboard_actual = 0
        occupancy_rate_today_dashboard = (occupied_today_count_dashboard_actual / TOTAL_HOTEL_CAPACITY) * 100 if TOTAL_HOTEL_CAPACITY > 0 else 0
        denominator_display_dashboard = TOTAL_HOTEL_CAPACITY
        with row2_cols[0]: # Changed from col4 to row2_cols[0]
            st.markdown(f"""<div class="metric-card" style="border-left-color: var(--info-color);"><p style="font-size: 0.9rem; color: #666;">T·ª∑ l·ªá l·∫•p ƒë·∫ßy (T·ªïng)</p><h3 style="color: var(--info-color); margin-top: 0.5rem;">{occupancy_rate_today_dashboard:.1f}%</h3><p style="font-size: 0.8rem; color: #666;">{occupied_today_count_dashboard_actual}/{denominator_display_dashboard} ph√≤ng</p></div>""", unsafe_allow_html=True)

        # --- New Metrics --- 
        if not active_bookings.empty:
            # Metric 5: Average Length of Stay (ALOS)
            active_bookings_for_calc = active_bookings.copy()
            active_bookings_for_calc['Stay Duration'] = pd.to_numeric(active_bookings_for_calc['Stay Duration'], errors='coerce').fillna(0)
            alos = active_bookings_for_calc['Stay Duration'].mean() if not active_bookings_for_calc['Stay Duration'].empty else 0
            with row2_cols[1]:
                st.markdown(f"""<div class="metric-card" style="border-left-color: #6f42c1;"><p style="font-size: 0.9rem; color: #666;">TB Th·ªùi gian ·ªü (ALOS)</p><h3 style="color: #6f42c1; margin-top: 0.5rem;">{alos:.1f} ng√†y</h3><p style="font-size: 0.8rem; color: #666;">ƒê·∫∑t ph√≤ng ho·∫°t ƒë·ªông</p></div>""", unsafe_allow_html=True)

            # Metric 6: Average Daily Rate (ADR)
            total_revenue_active = pd.to_numeric(active_bookings_for_calc['T·ªïng thanh to√°n'], errors='coerce').sum()
            total_stay_duration_active = pd.to_numeric(active_bookings_for_calc['Stay Duration'], errors='coerce').sum()
            adr = (total_revenue_active / total_stay_duration_active) if total_stay_duration_active > 0 else 0
            with row2_cols[2]:
                st.markdown(f"""<div class="metric-card" style="border-left-color: #fd7e14;"><p style="font-size: 0.9rem; color: #666;">TB Gi√° m·ªói ƒë√™m (ADR)</p><h3 style="color: #fd7e14; margin-top: 0.5rem;">{adr:,.0f} VND</h3><p style="font-size: 0.8rem; color: #666;">ƒê·∫∑t ph√≤ng ho·∫°t ƒë·ªông</p></div>""", unsafe_allow_html=True)
            
            # Metric 7 (Example): Average Booking Lead Time (Optional, can add to a new row if needed)
            # Ensure Booking Date and Check-in Date are datetime
            active_bookings_for_calc['Booking Date'] = pd.to_datetime(active_bookings_for_calc['Booking Date'], errors='coerce')
            active_bookings_for_calc['Check-in Date'] = pd.to_datetime(active_bookings_for_calc['Check-in Date'], errors='coerce')
            
            valid_lead_time_df = active_bookings_for_calc.dropna(subset=['Check-in Date', 'Booking Date'])
            if not valid_lead_time_df.empty:
                lead_time_days = (valid_lead_time_df['Check-in Date'] - valid_lead_time_df['Booking Date']).dt.days
                avg_lead_time = lead_time_days[lead_time_days >= 0].mean() # Only consider non-negative lead times
            else: 
                avg_lead_time = 0
            
            # If adding a third row for metrics:
            # row3_cols = st.columns(3)
            # with row3_cols[0]:
            #     st.markdown(f"""<div class="metric-card" style="border-left-color: #20c997;"><p style="font-size: 0.9rem; color: #666;">TB Th·ªùi gian ƒë·∫∑t tr∆∞·ªõc</p><h3 style="color: #20c997; margin-top: 0.5rem;">{avg_lead_time:.1f} ng√†y</h3><p style="font-size: 0.8rem; color: #666;">ƒê·∫∑t ph√≤ng ho·∫°t ƒë·ªông</p></div>""", unsafe_allow_html=True)

        else: # Handle case where active_bookings might be empty for new metrics
            with row2_cols[1]:
                 st.markdown(f"""<div class="metric-card" style="border-left-color: #6f42c1;"><p style="font-size: 0.9rem; color: #666;">TB Th·ªùi gian ·ªü (ALOS)</p><h3 style="color: #6f42c1; margin-top: 0.5rem;">N/A</h3><p style="font-size: 0.8rem; color: #666;">Kh√¥ng c√≥ d·ªØ li·ªáu</p></div>""", unsafe_allow_html=True)
            with row2_cols[2]:
                 st.markdown(f"""<div class="metric-card" style="border-left-color: #fd7e14;"><p style="font-size: 0.9rem; color: #666;">TB Gi√° m·ªói ƒë√™m (ADR)</p><h3 style="color: #fd7e14; margin-top: 0.5rem;">N/A</h3><p style="font-size: 0.8rem; color: #666;">Kh√¥ng c√≥ d·ªØ li·ªáu</p></div>""", unsafe_allow_html=True)


        st.markdown("---"); st.markdown("#### Bi·ªÉu ƒë·ªì t·ªïng quan")
        col_chart1, col_chart2 = st.columns(2)
        with col_chart1:
            st.subheader("üìà Xu h∆∞·ªõng l·∫•p ƒë·∫ßy (7 ng√†y qua)")
            weekly_data_list = []
            if TOTAL_HOTEL_CAPACITY > 0 and active_bookings is not None and not active_bookings.empty:
                for i in range(7):
                    date_iter_chart = today_dt - datetime.timedelta(days=6-i)
                    active_on_date_iter_chart = active_bookings[(active_bookings['Check-in Date'].dt.date <= date_iter_chart) & (active_bookings['Check-out Date'].dt.date > date_iter_chart) & (active_bookings['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy')]
                    occupied_chart_actual = len(active_on_date_iter_chart)
                    occupancy_chart = (occupied_chart_actual / TOTAL_HOTEL_CAPACITY) * 100 if TOTAL_HOTEL_CAPACITY > 0 else 0
                    weekly_data_list.append({'Ng√†y': date_iter_chart.strftime('%a, %d/%m'), 'T·ª∑ l·ªá l·∫•p ƒë·∫ßy %': occupancy_chart})
            if weekly_data_list:
                weekly_df_chart = pd.DataFrame(weekly_data_list)
                fig_weekly = px.line(weekly_df_chart, x='Ng√†y', y='T·ª∑ l·ªá l·∫•p ƒë·∫ßy %', markers=True, line_shape='spline', hover_data={'T·ª∑ l·ªá l·∫•p ƒë·∫ßy %': ':.1f'})
                fig_weekly.update_layout(height=300, showlegend=False, yaxis_title="T·ª∑ l·ªá l·∫•p ƒë·∫ßy (%)", xaxis_title="Ng√†y", yaxis_range=[0, 105])
                st.plotly_chart(fig_weekly, use_container_width=True)
            else: st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì xu h∆∞·ªõng l·∫•p ƒë·∫ßy 7 ng√†y qua.")
        with col_chart2:
            st.subheader("üè† Hi·ªáu su·∫•t lo·∫°i ph√≤ng (theo T·ªïng thanh to√°n)")
            if active_bookings is not None and not active_bookings.empty and 'T·ªïng thanh to√°n' in active_bookings.columns and 'T√™n ch·ªó ngh·ªâ' in active_bookings.columns:
                active_bookings['T·ªïng thanh to√°n'] = pd.to_numeric(active_bookings['T·ªïng thanh to√°n'], errors='coerce').fillna(0)
                room_revenue_df = active_bookings.groupby('T√™n ch·ªó ngh·ªâ')['T·ªïng thanh to√°n'].sum().reset_index()
                room_revenue_df = room_revenue_df[room_revenue_df['T·ªïng thanh to√°n'] > 0]
                room_revenue_df.columns = ['Lo·∫°i ph√≤ng', 'T·ªïng thanh to√°n']
                room_revenue_df['Lo·∫°i ph√≤ng Display'] = room_revenue_df['Lo·∫°i ph√≤ng'].apply(lambda x: x[:25] + "..." if len(x) > 25 else x)
                if not room_revenue_df.empty:
                    fig_pie_revenue = px.pie(room_revenue_df, values='T·ªïng thanh to√°n', names='Lo·∫°i ph√≤ng Display', hole=0.4, title="Ph√¢n b·ªï T·ªïng thanh to√°n theo Lo·∫°i ph√≤ng")
                    fig_pie_revenue.update_traces(textposition='inside', textinfo='percent+label')
                    fig_pie_revenue.update_layout(height=350, showlegend=True, legend_title_text='Lo·∫°i ph√≤ng', margin=dict(t=50, b=0, l=0, r=0))
                    st.plotly_chart(fig_pie_revenue, use_container_width=True)
                else: st.info("Kh√¥ng c√≥ d·ªØ li·ªáu doanh thu theo lo·∫°i ph√≤ng ƒë·ªÉ hi·ªÉn th·ªã.")
            else: st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ('T·ªïng thanh to√°n', 'T√™n ch·ªó ngh·ªâ') cho bi·ªÉu ƒë·ªì.")
    else:
        st.info(" D·ªØ li·ªáu kh√¥ng ƒë·ªß ho·∫∑c ch∆∞a ƒë∆∞·ª£c t·∫£i. Vui l√≤ng t·∫£i file ƒë·∫∑t ph√≤ng h·ª£p l·ªá.")
        if st.button("üîÑ T·∫£i l·∫°i d·ªØ li·ªáu demo", key="reload_demo_dashboard"):
            st.session_state.df, st.session_state.active_bookings = create_demo_data()
            st.session_state.room_types = get_cleaned_room_types(st.session_state.df)
            st.session_state.data_source = 'demo'; st.session_state.uploaded_file_name = None; st.session_state.selected_calendar_date = None
            if "add_form_check_in_final" in st.session_state: del st.session_state.add_form_check_in_final
            if "add_form_check_out_final" in st.session_state: del st.session_state.add_form_check_out_final
            st.rerun()


# --- TAB L·ªäCH PH√íNG ---
with tab_calendar:
    st.header(" L·ªãch ph√≤ng t·ªïng quan")
    st.subheader("T·ªïng quan ph√≤ng tr·ªëng")
    if active_bookings is not None:
        today_date = datetime.date.today(); tomorrow_date = today_date + timedelta(days=1)
        today_overall_info = get_overall_calendar_day_info(today_date, active_bookings, TOTAL_HOTEL_CAPACITY)
        total_available_today = today_overall_info['available_units']
        tomorrow_overall_info = get_overall_calendar_day_info(tomorrow_date, active_bookings, TOTAL_HOTEL_CAPACITY)
        total_available_tomorrow = tomorrow_overall_info['available_units']
        col_today_avail, col_tomorrow_avail = st.columns(2)
        with col_today_avail:
            st.markdown(f"##### H√¥m nay ({today_date.strftime('%d/%m')})")
            if total_available_today > 0: st.info(f"**{total_available_today}** ph√≤ng tr·ªëng / {TOTAL_HOTEL_CAPACITY} t·ªïng s·ªë")
            else: st.warning(f"H·∫øt ph√≤ng h√¥m nay ({TOTAL_HOTEL_CAPACITY} ph√≤ng ƒë√£ b·ªã chi·∫øm).")
        with col_tomorrow_avail:
            st.markdown(f"##### Ng√†y mai ({tomorrow_date.strftime('%d/%m')})")
            if total_available_tomorrow > 0: st.info(f"**{total_available_tomorrow}** ph√≤ng tr·ªëng / {TOTAL_HOTEL_CAPACITY} t·ªïng s·ªë")
            else: st.warning(f"H·∫øt ph√≤ng ng√†y mai ({TOTAL_HOTEL_CAPACITY} ph√≤ng ƒë√£ b·ªã chi·∫øm).")
    else: st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫∑t ph√≤ng ƒë·ªÉ t√≠nh ph√≤ng tr·ªëng.")
    st.markdown("---")
    col_nav1, col_nav_title, col_nav2 = st.columns([1, 2, 1])
    with col_nav1:
        if st.button("‚óÄÔ∏è Th√°ng tr∆∞·ªõc", key="prev_month_calendar", use_container_width=True):
            current_date_cal = st.session_state.current_date_calendar; first_day_current_month = current_date_cal.replace(day=1); last_day_prev_month = first_day_current_month - timedelta(days=1)
            st.session_state.current_date_calendar = last_day_prev_month.replace(day=1); st.session_state.selected_calendar_date = None; st.rerun()
    with col_nav_title: st.subheader(f"Th√°ng {st.session_state.current_date_calendar.month} nƒÉm {st.session_state.current_date_calendar.year}")
    with col_nav2:
        if st.button("Th√°ng sau ‚ñ∂Ô∏è", key="next_month_calendar", use_container_width=True):
            current_date_cal = st.session_state.current_date_calendar; days_in_month = calendar.monthrange(current_date_cal.year, current_date_cal.month)[1]
            first_day_next_month = current_date_cal.replace(day=1) + timedelta(days=days_in_month + 1)
            st.session_state.current_date_calendar = first_day_next_month.replace(day=1); st.session_state.selected_calendar_date = None; st.rerun()
    if st.button("üìÖ V·ªÅ th√°ng hi·ªán t·∫°i", key="today_month_calendar"):
        st.session_state.current_date_calendar = datetime.date.today(); st.session_state.selected_calendar_date = None; st.rerun()

    day_names = ["Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7", "Ch·ªß nh·∫≠t"]
    cols_header = st.columns(7)
    for i, day_name_header in enumerate(day_names): cols_header[i].markdown(f"<div class='day-header'>{day_name_header}</div>", unsafe_allow_html=True)

    if df is not None and not df.empty:
        current_year = st.session_state.current_date_calendar.year; current_month = st.session_state.current_date_calendar.month
        cal_obj = calendar.Calendar(); month_days_matrix = cal_obj.monthdayscalendar(current_year, current_month)
        for week_data in month_days_matrix:
            cols_week = st.columns(7)
            for i, day_num_cal in enumerate(week_data):
                with cols_week[i]:
                    if day_num_cal == 0: st.markdown(f"<div class='day-cell day-disabled'></div>", unsafe_allow_html=True)
                    else:
                        current_day_date_cal = datetime.date(current_year, current_month, day_num_cal)
                        day_info_cal = get_overall_calendar_day_info(current_day_date_cal, active_bookings, TOTAL_HOTEL_CAPACITY)
                        status_indicator_html = ""
                        if day_info_cal['status_indicator_type'] == "green_dot": status_indicator_html = "<div class='dot-indicator dot-green'>‚Ä¢</div>"
                        elif day_info_cal['status_indicator_type'] == "orange_dash": status_indicator_html = "<div class='dot-indicator dot-orange'>‚Äî</div>"
                        elif day_info_cal['status_indicator_type'] == "red_x": status_indicator_html = "<div class='dot-indicator dot-red'>‚úï</div>"
                        day_class = "day-cell"
                        if current_day_date_cal == datetime.date.today(): day_class += " day-today"
                        # if st.session_state.selected_calendar_date == current_day_date_cal: day_class += " day-selected" # No longer need a persistent selected state for the background style this way
                        
                        # Check if this is the date for which a dialog was requested
                        if st.session_state.get('show_modal_for_date') == current_day_date_cal:
                            day_class += " day-selected" # Style the day that triggered the modal

                        st.markdown(f"""<div class='{day_class}'><div class='day-number'>{day_num_cal}</div>{status_indicator_html}<div class='day-status'>{day_info_cal['status_text']}</div></div>""", unsafe_allow_html=True)
                        button_key_calendar = f"day_button_overlay_{current_day_date_cal.strftime('%Y%m%d')}"
                        
                        if st.button("", key=button_key_calendar, help=f"Xem chi ti·∫øt ng√†y {current_day_date_cal.strftime('%d/%m/%Y')}"):
                            # st.session_state.selected_calendar_date = None if st.session_state.selected_calendar_date == current_day_date_cal else current_day_date_cal
                            # st.rerun() # Old way with expander
                            st.session_state.show_modal_for_date = current_day_date_cal # Flag to identify which date's modal to show
                            # The dialog will be called after the main script runs if this flag is set
                            # No immediate rerun needed here, dialog call handles its own lifecycle. 
                            # However, to make sure the main script re-runs to check the flag and open the dialog:
                            st.rerun() 
    else: st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫∑t ph√≤ng ƒë·ªÉ hi·ªÉn th·ªã l·ªãch.")

    # Check if a modal needs to be shown after the main part of the script has run
    if 'show_modal_for_date' in st.session_state and st.session_state.show_modal_for_date is not None:
        date_for_modal = st.session_state.show_modal_for_date
        st.session_state.show_modal_for_date = None # Reset the flag immediately to prevent re-opening on next rerun after close
        show_day_details_modal(date_for_modal) 
    
    # Remove the old expander logic if it was here.
    # if st.session_state.selected_calendar_date is not None: ... (old expander code was here)

# --- TAB QU·∫¢N L√ù ƒê·∫∂T PH√íNG ---
with tab_booking_mgmt:
    st.header("üìã Qu·∫£n l√Ω t·∫•t c·∫£ ƒë·∫∑t ph√≤ng")
    if df is not None and not df.empty:
        st.subheader("Danh s√°ch ƒë·∫∑t ph√≤ng")
        base_display_columns_map_mgmt = {
            'S·ªë ƒë·∫∑t ph√≤ng': 'M√£ ƒêP', 'T√™n ng∆∞·ªùi ƒë·∫∑t': 'Kh√°ch',
            'T√™n ch·ªó ngh·ªâ': 'Lo·∫°i ph√≤ng', 'Check-in Date': 'Check-in',
            'Check-out Date': 'Check-out', 'Stay Duration': 'S·ªë ƒë√™m',
            'T√¨nh tr·∫°ng': 'Tr·∫°ng th√°i', 'T·ªïng thanh to√°n': 'T·ªïng ti·ªÅn (VND)',
            'Gi√° m·ªói ƒë√™m': 'Gi√°/ƒë√™m (VND)',
            'Booking Date': 'Ng√†y ƒë·∫∑t'
        }
        display_columns_original_names_mgmt = [
            'S·ªë ƒë·∫∑t ph√≤ng', 'T√™n ng∆∞·ªùi ƒë·∫∑t', 'T√™n ch·ªó ngh·ªâ',
            'Check-in Date', 'Check-out Date', 'Stay Duration',
            'T√¨nh tr·∫°ng', 'T·ªïng thanh to√°n', 'Gi√° m·ªói ƒë√™m', 'Booking Date'
        ]
        display_columns_original_names_mgmt = [
            col for col in display_columns_original_names_mgmt
            if col in df.columns and col in base_display_columns_map_mgmt
        ]

        st.markdown("##### B·ªô l·ªçc ƒë·∫∑t ph√≤ng")
        filter_cols_main = st.columns([2,2,3])
        with filter_cols_main[0]:
            unique_statuses_mgmt_list = []
            if 'T√¨nh tr·∫°ng' in df.columns:
                try:
                    unique_statuses_mgmt_list = sorted(df['T√¨nh tr·∫°ng'].dropna().astype(str).unique().tolist())
                except Exception: # Fallback if sorting fails
                    unique_statuses_mgmt_list = df['T√¨nh tr·∫°ng'].dropna().astype(str).unique().tolist()
            status_filter_manage = st.multiselect("Tr·∫°ng th√°i:", options=unique_statuses_mgmt_list, default=unique_statuses_mgmt_list, key="status_filter_manage_tab3")
        with filter_cols_main[1]:
            unique_room_types_manage = st.session_state.get('room_types', []) 
            room_filter_manage = st.multiselect("Lo·∫°i ph√≤ng:", options=unique_room_types_manage, default=unique_room_types_manage, key="room_filter_manage_tab3")
        with filter_cols_main[2]:
            temp_max_date_filter = max_date_val if min_date_val <= max_date_val else min_date_val + timedelta(days=1)
            date_range_manage = st.date_input("Kho·∫£ng ng√†y check-in:", value=(min_date_val, temp_max_date_filter), min_value=min_date_val, max_value=temp_max_date_filter, key="date_range_filter_manage_tab3")

        df_after_main_filters = df.copy()
        if status_filter_manage and 'T√¨nh tr·∫°ng' in df_after_main_filters.columns: df_after_main_filters = df_after_main_filters[df_after_main_filters['T√¨nh tr·∫°ng'].isin(status_filter_manage)]
        if room_filter_manage and 'T√™n ch·ªó ngh·ªâ' in df_after_main_filters.columns: df_after_main_filters = df_after_main_filters[df_after_main_filters['T√™n ch·ªó ngh·ªâ'].isin(room_filter_manage)]
        if date_range_manage and len(date_range_manage) == 2 and 'Check-in Date' in df_after_main_filters.columns:
            start_date_filter_mgmt, end_date_filter_mgmt = date_range_manage
            df_after_main_filters = df_after_main_filters[(pd.to_datetime(df_after_main_filters['Check-in Date']).dt.date >= start_date_filter_mgmt) & (pd.to_datetime(df_after_main_filters['Check-in Date']).dt.date <= end_date_filter_mgmt)]

        st.markdown("##### L·ªçc b·ªï sung")
        additional_filter_options_map = {
            "Kh√¥ng c√≥": None, "Th√†nh vi√™n Genius": "Th√†nh vi√™n Genius", "S·ªë ƒë√™m": "Stay Duration",
            "Gi√° m·ªói ƒë√™m": "Gi√° m·ªói ƒë√™m", "Ti·ªÅn t·ªá": "Ti·ªÅn t·ªá"
        }
        selected_additional_filter_display = st.selectbox(
            "Ch·ªçn c·ªôt ƒë·ªÉ l·ªçc b·ªï sung:", options=list(additional_filter_options_map.keys()), key="additional_filter_column_select"
        )
        additional_filter_column_actual = additional_filter_options_map[selected_additional_filter_display]

        df_filtered_for_table = df_after_main_filters.copy()

        if additional_filter_column_actual and additional_filter_column_actual in df_filtered_for_table.columns:
            if additional_filter_column_actual == "Th√†nh vi√™n Genius":
                unique_genius_values_list = []
                if "Th√†nh vi√™n Genius" in df_filtered_for_table.columns:
                    try:
                        unique_genius_values_list = sorted(df_filtered_for_table["Th√†nh vi√™n Genius"].dropna().astype(str).unique())
                    except Exception:
                        unique_genius_values_list = df_filtered_for_table["Th√†nh vi√™n Genius"].dropna().astype(str).unique().tolist()
                selected_genius_values = st.multiselect(
                    "L·ªçc theo Th√†nh vi√™n Genius:", options=unique_genius_values_list, default=unique_genius_values_list, key="additional_genius_filter_multiselect"
                )
                if selected_genius_values: df_filtered_for_table = df_filtered_for_table[df_filtered_for_table["Th√†nh vi√™n Genius"].isin(selected_genius_values)]
            elif additional_filter_column_actual == "Ti·ªÅn t·ªá":
                unique_currency_values_list = []
                if "Ti·ªÅn t·ªá" in df_filtered_for_table.columns:
                    try:
                        unique_currency_values_list = sorted(df_filtered_for_table["Ti·ªÅn t·ªá"].dropna().astype(str).unique())
                    except Exception:
                         unique_currency_values_list = df_filtered_for_table["Ti·ªÅn t·ªá"].dropna().astype(str).unique().tolist()
                selected_currency_values = st.multiselect(
                    "L·ªçc theo Ti·ªÅn t·ªá:", options=unique_currency_values_list, default=unique_currency_values_list, key="additional_currency_filter_multiselect"
                )
                if selected_currency_values: df_filtered_for_table = df_filtered_for_table[df_filtered_for_table["Ti·ªÅn t·ªá"].isin(selected_currency_values)]
            elif additional_filter_column_actual == "Stay Duration":
                min_sd = int(df_filtered_for_table["Stay Duration"].min()) if not df_filtered_for_table["Stay Duration"].empty else 0
                max_sd = int(df_filtered_for_table["Stay Duration"].max()) if not df_filtered_for_table["Stay Duration"].empty else 1
                if min_sd >= max_sd and max_sd > 0 : max_sd = min_sd + 1
                elif min_sd >= max_sd : min_sd = 0; max_sd = 1
                selected_stay_duration = st.slider(
                    "L·ªçc theo S·ªë ƒë√™m:", min_value=min_sd, max_value=max_sd, value=(min_sd, max_sd), key="additional_stay_duration_slider"
                )
                df_filtered_for_table = df_filtered_for_table[
                    (df_filtered_for_table["Stay Duration"] >= selected_stay_duration[0]) &
                    (df_filtered_for_table["Stay Duration"] <= selected_stay_duration[1])
                ]
            elif additional_filter_column_actual == "Gi√° m·ªói ƒë√™m":
                min_price_night = float(df_filtered_for_table["Gi√° m·ªói ƒë√™m"].min()) if not df_filtered_for_table["Gi√° m·ªói ƒë√™m"].empty else 0.0
                max_price_night = float(df_filtered_for_table["Gi√° m·ªói ƒë√™m"].max()) if not df_filtered_for_table["Gi√° m·ªói ƒë√™m"].empty else 1000000.0
                if min_price_night >= max_price_night and max_price_night > 0 : max_price_night = min_price_night + 1000
                elif min_price_night >= max_price_night : min_price_night = 0.0; max_price_night = 1000000.0
                price_range_cols = st.columns(2)
                with price_range_cols[0]: min_price_input = st.number_input("Gi√° m·ªói ƒë√™m t·ªëi thi·ªÉu:", min_value=0.0, value=min_price_night, step=10000.0, key="additional_min_price_input")
                with price_range_cols[1]: max_price_input = st.number_input("Gi√° m·ªói ƒë√™m t·ªëi ƒëa:", min_value=min_price_input, value=max_price_night, step=10000.0, key="additional_max_price_input")
                if max_price_input >= min_price_input:
                    df_filtered_for_table["Gi√° m·ªói ƒë√™m"] = pd.to_numeric(df_filtered_for_table["Gi√° m·ªói ƒë√™m"], errors='coerce').fillna(0)
                    df_filtered_for_table = df_filtered_for_table[
                        (df_filtered_for_table["Gi√° m·ªói ƒë√™m"] >= min_price_input) &
                        (df_filtered_for_table["Gi√° m·ªói ƒë√™m"] <= max_price_input)
                    ]
        st.markdown("---")
        search_term_mgmt = st.text_input("T√¨m theo t√™n kh√°ch ho·∫∑c m√£ ƒë·∫∑t ph√≤ng:", key="search_booking_tab3", placeholder="Nh·∫≠p t·ª´ kh√≥a...")
        if search_term_mgmt:
            df_filtered_for_table = df_filtered_for_table[(df_filtered_for_table['T√™n ng∆∞·ªùi ƒë·∫∑t'].astype(str).str.contains(search_term_mgmt, case=False, na=False)) | (df_filtered_for_table['S·ªë ƒë·∫∑t ph√≤ng'].astype(str).str.contains(search_term_mgmt, case=False, na=False))]

        current_sort_col = st.session_state.get('booking_sort_column', 'Booking Date')
        current_sort_asc = st.session_state.get('booking_sort_ascending', False)

        if current_sort_col in df_filtered_for_table.columns and not df_filtered_for_table.empty:
            try:
                if current_sort_col in ['T·ªïng thanh to√°n', 'Stay Duration', 'Gi√° m·ªói ƒë√™m']:
                    df_filtered_for_table[current_sort_col] = pd.to_numeric(df_filtered_for_table[current_sort_col], errors='coerce').fillna(0)
                df_filtered_for_table = df_filtered_for_table.sort_values(by=current_sort_col, ascending=current_sort_asc, na_position='last')
            except Exception as e_sort: st.warning(f"L·ªói khi s·∫Øp x·∫øp c·ªôt '{base_display_columns_map_mgmt.get(current_sort_col, current_sort_col)}': {e_sort}")

        if df_filtered_for_table.empty:
            st.info("Kh√¥ng c√≥ ƒë·∫∑t ph√≤ng n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm.")
        else:
            st.write(f"T√¨m th·∫•y {len(df_filtered_for_table)} ƒë·∫∑t ph√≤ng:")

            checkbox_col_header = "Ch·ªçn"
            action_col_header = "H√†nh ƒë·ªông"

            default_data_col_ratios = [1.2, 2.0, 2.0, 1.2, 1.2, 0.8, 1.2, 1.5, 1.5, 1.2]
            action_col_ratio = [1.0]
            checkbox_col_ratio = [0.4]

            current_data_col_ratios_to_use = default_data_col_ratios[:len(display_columns_original_names_mgmt)]
            final_column_ratios = checkbox_col_ratio + current_data_col_ratios_to_use + action_col_ratio

            header_cols_ui = st.columns(final_column_ratios)

            with header_cols_ui[0]:
                st.markdown(f"**{checkbox_col_header}**")

            for i, original_col_name_header in enumerate(display_columns_original_names_mgmt):
                with header_cols_ui[i + 1]:
                    display_name = base_display_columns_map_mgmt.get(original_col_name_header, original_col_name_header)
                    sort_indicator = ""
                    if st.session_state.booking_sort_column == original_col_name_header:
                        sort_indicator = " ‚ñ≤" if st.session_state.booking_sort_ascending else " ‚ñº"
                    button_label = f"{display_name}{sort_indicator}"
                    if st.button(button_label, key=f"sort_btn_header_{original_col_name_header}", use_container_width=True):
                        if st.session_state.booking_sort_column == original_col_name_header:
                            st.session_state.booking_sort_ascending = not st.session_state.booking_sort_ascending
                        else:
                            st.session_state.booking_sort_column = original_col_name_header
                            st.session_state.booking_sort_ascending = True if original_col_name_header not in ['Booking Date', 'Check-in Date', 'Check-out Date'] else False
                        st.rerun()

            with header_cols_ui[len(display_columns_original_names_mgmt) + 1]:
                 st.markdown(f"**{action_col_header}**")
            st.markdown("<hr style='margin:0; padding:0;'>", unsafe_allow_html=True)

            current_view_checkbox_info = {}

            for original_df_index, original_row_mgmt in df_filtered_for_table.iterrows():
                cols_display_row_mgmt = st.columns(final_column_ratios)
                booking_id_for_key = original_row_mgmt.get('S·ªë ƒë·∫∑t ph√≤ng', f"index_{original_df_index}")
                checkbox_key = f"select_booking_cb_{booking_id_for_key}_{original_df_index}"

                current_view_checkbox_info[original_df_index] = (checkbox_key, booking_id_for_key, original_df_index)

                with cols_display_row_mgmt[0]:
                    st.checkbox("", key=checkbox_key, value=st.session_state.get(checkbox_key, False))

                col_idx_offset = 1
                for i, original_col_name_mgmt_row in enumerate(display_columns_original_names_mgmt):
                    val_to_write = original_row_mgmt[original_col_name_mgmt_row]
                    if original_col_name_mgmt_row in ['Check-in Date', 'Check-out Date', 'Booking Date']:
                        if pd.notna(val_to_write) and isinstance(val_to_write, pd.Timestamp): val_to_write = val_to_write.strftime('%d/%m/%Y')
                        elif pd.notna(val_to_write): val_to_write = str(val_to_write)
                        else: val_to_write = "N/A"
                    elif original_col_name_mgmt_row == 'T·ªïng thanh to√°n' or original_col_name_mgmt_row == 'Gi√° m·ªói ƒë√™m':
                        if pd.notna(val_to_write):
                            try:
                                val_to_write = f"{float(pd.to_numeric(val_to_write, errors='coerce')):,.0f}"
                            except ValueError:
                                val_to_write = "L·ªói ƒë·ªãnh d·∫°ng"
                        else:
                            val_to_write = "N/A"
                    elif original_col_name_mgmt_row == 'Stay Duration':
                         if pd.notna(val_to_write):
                            try: val_to_write = str(int(float(val_to_write)))
                            except ValueError: val_to_write = "L·ªói ƒë·ªãnh d·∫°ng"
                         else: val_to_write = "N/A"
                    else:
                        if pd.isna(val_to_write): val_to_write = "N/A"
                        else: val_to_write = str(val_to_write)
                    with cols_display_row_mgmt[i + col_idx_offset]: st.write(val_to_write)

                action_col_idx = len(display_columns_original_names_mgmt) + col_idx_offset
                with cols_display_row_mgmt[action_col_idx]:
                    original_booking_id_action = original_row_mgmt.get('S·ªë ƒë·∫∑t ph√≤ng', f"index_{original_df_index}")
                    action_buttons_cols = st.columns([1,1])
                    with action_buttons_cols[0]:
                        edit_button_key = f"edit_btn_{original_booking_id_action}_{original_df_index}"
                        if st.button("‚úèÔ∏è", key=edit_button_key, help=f"S·ª≠a ƒë·∫∑t ph√≤ng {original_booking_id_action}", use_container_width=True):
                            st.session_state.editing_booking_id_for_dialog = original_booking_id_action
                            st.rerun()

                    with action_buttons_cols[1]:
                        delete_single_button_key = f"delete_single_btn_{original_booking_id_action}_{original_df_index}"
                        if st.button("üóëÔ∏è", key=delete_single_button_key, help=f"X√≥a ƒêP {original_booking_id_action}", use_container_width=True):
                            if st.session_state.df is not None and 'S·ªë ƒë·∫∑t ph√≤ng' in st.session_state.df.columns:
                                df_copy_single_delete = st.session_state.df.copy()
                                if str(original_booking_id_action).startswith("index_"):
                                    df_copy_single_delete = df_copy_single_delete.drop(index=original_df_index)
                                else:
                                    df_copy_single_delete = df_copy_single_delete[df_copy_single_delete['S·ªë ƒë·∫∑t ph√≤ng'] != original_booking_id_action]

                                st.session_state.df = df_copy_single_delete.reset_index(drop=True)
                                st.session_state.active_bookings = st.session_state.df[st.session_state.df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy()
                                st.session_state.room_types = get_cleaned_room_types(st.session_state.df)
                                st.session_state.last_action_message = f"ƒê√£ x√≥a th√†nh c√¥ng ƒë·∫∑t ph√≤ng {original_booking_id_action}."
                                st.session_state.selected_calendar_date = None
                            else:
                                st.session_state.last_action_message = "L·ªói: Kh√¥ng t√¨m th·∫•y DataFrame ho·∫∑c c·ªôt 'S·ªë ƒë·∫∑t ph√≤ng' ƒë·ªÉ x√≥a."
                            st.rerun()
                st.markdown("<hr style='margin-top: 5px; margin-bottom: 5px;'>", unsafe_allow_html=True)

            st.markdown("---")
            if st.button("üóëÔ∏è X√≥a c√°c ƒë·∫∑t ph√≤ng ƒë√£ ch·ªçn", type="primary", key="bulk_delete_bookings_button"):
                ids_to_delete_bulk = []
                indices_to_delete_bulk = []

                for df_idx, (chk_key, booking_id_val, original_df_idx_val) in current_view_checkbox_info.items():
                    if st.session_state.get(chk_key, False):
                        if str(booking_id_val).startswith("index_"):
                            indices_to_delete_bulk.append(original_df_idx_val)
                        else:
                            ids_to_delete_bulk.append(booking_id_val)

                indices_to_delete_bulk = sorted(list(set(indices_to_delete_bulk)), reverse=True)
                ids_to_delete_bulk = list(set(ids_to_delete_bulk))

                if ids_to_delete_bulk or indices_to_delete_bulk:
                    df_main_for_bulk_delete = st.session_state.df.copy()
                    initial_count_bulk = len(df_main_for_bulk_delete)

                    if ids_to_delete_bulk:
                        df_main_for_bulk_delete = df_main_for_bulk_delete[~df_main_for_bulk_delete['S·ªë ƒë·∫∑t ph√≤ng'].isin(ids_to_delete_bulk)]

                    if indices_to_delete_bulk:
                        valid_indices_to_drop_bulk = [idx for idx in indices_to_delete_bulk if idx in df_main_for_bulk_delete.index]
                        if valid_indices_to_drop_bulk:
                             df_main_for_bulk_delete = df_main_for_bulk_delete.drop(index=valid_indices_to_drop_bulk)

                    st.session_state.df = df_main_for_bulk_delete.reset_index(drop=True)
                    st.session_state.active_bookings = st.session_state.df[st.session_state.df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy()
                    st.session_state.room_types = get_cleaned_room_types(st.session_state.df)

                    num_deleted_bulk = initial_count_bulk - len(st.session_state.df)
                    st.session_state.last_action_message = f"ƒê√£ x√≥a th√†nh c√¥ng {num_deleted_bulk} ƒë·∫∑t ph√≤ng ƒë√£ ch·ªçn."
                    st.session_state.selected_calendar_date = None
                    st.rerun()
                else:
                    st.warning("Kh√¥ng c√≥ ƒë·∫∑t ph√≤ng n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ x√≥a.")

            if st.session_state.last_action_message:
                if "L·ªói" in st.session_state.last_action_message: st.error(st.session_state.last_action_message)
                else: st.success(st.session_state.last_action_message)
                st.session_state.last_action_message = None
    else:
        st.info("Vui l√≤ng t·∫£i file d·ªØ li·ªáu ƒë·ªÉ qu·∫£n l√Ω ƒë·∫∑t ph√≤ng.")

    # --- Handle Edit Booking Dialog ---
    _booking_id_to_edit_trigger = st.session_state.get('editing_booking_id_for_dialog')

    if _booking_id_to_edit_trigger:
        # Consume the trigger immediately
        st.session_state.editing_booking_id_for_dialog = None 
        
        booking_id_to_edit = _booking_id_to_edit_trigger # Use the stored value

        current_main_df = st.session_state.get('df', pd.DataFrame())
        booking_to_edit_series = None
        if not current_main_df.empty and 'S·ªë ƒë·∫∑t ph√≤ng' in current_main_df.columns:
            booking_to_edit_series_list = current_main_df[current_main_df['S·ªë ƒë·∫∑t ph√≤ng'] == booking_id_to_edit]
            if not booking_to_edit_series_list.empty:
                booking_to_edit_series = booking_to_edit_series_list.iloc[0]

        if booking_to_edit_series is not None:
            @st.dialog("Ch·ªânh s·ª≠a Ng√†y Check-in/Check-out")
            def edit_booking_dates_dialog_content(booking_data_series, booking_id):
                st.write(f"Ch·ªânh s·ª≠a ƒë·∫∑t ph√≤ng: **{booking_id}**")
                st.write(f"Kh√°ch: {booking_data_series['T√™n ng∆∞·ªùi ƒë·∫∑t']}")
                st.write(f"Lo·∫°i ph√≤ng: {booking_data_series['T√™n ch·ªó ngh·ªâ']}")
                st.caption("L∆∞u √Ω: Thay ƒë·ªïi ng√†y check-in c√≥ th·ªÉ t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ng√†y check-out n·∫øu ng√†y check-out hi·ªán t·∫°i kh√¥ng c√≤n h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra k·ªπ c·∫£ hai ng√†y tr∆∞·ªõc khi l∆∞u.")

                current_check_in_dt = booking_data_series['Check-in Date'].date()
                current_check_out_dt = booking_data_series['Check-out Date'].date()
                
                dialog_cin_key = f"dialog_cin_{booking_id}"
                dialog_cout_key = f"dialog_cout_{booking_id}"

                if dialog_cin_key not in st.session_state:
                    st.session_state[dialog_cin_key] = current_check_in_dt
                if dialog_cout_key not in st.session_state:
                    st.session_state[dialog_cout_key] = current_check_out_dt

                new_check_in = st.date_input(
                    "Ng√†y check-in m·ªõi:",
                    value=st.session_state[dialog_cin_key],
                    min_value=datetime.date.today() - timedelta(days=365*2),
                    max_value=datetime.date.today() + timedelta(days=365*2),
                    key=dialog_cin_key 
                )
                
                min_checkout_dialog = st.session_state[dialog_cin_key] + timedelta(days=1)
                
                current_dialog_checkout_val = st.session_state[dialog_cout_key]
                if current_dialog_checkout_val < min_checkout_dialog:
                    st.session_state[dialog_cout_key] = min_checkout_dialog
                    
                new_check_out = st.date_input(
                    "Ng√†y check-out m·ªõi:",
                    value=st.session_state[dialog_cout_key],
                    min_value=min_checkout_dialog,
                    max_value=st.session_state[dialog_cin_key] + timedelta(days=365*3), 
                    key=dialog_cout_key 
                )

                if st.button("L∆∞u thay ƒë·ªïi", key=f"save_edit_dialog_{booking_id}"):
                    final_new_check_in = st.session_state[dialog_cin_key]
                    final_new_check_out = st.session_state[dialog_cout_key]

                    error_messages_dialog = []
                    if final_new_check_out <= final_new_check_in:
                        error_messages_dialog.append("Ng√†y check-out m·ªõi ph·∫£i sau ng√†y check-in m·ªõi.")

                    if not error_messages_dialog:
                        active_bks_for_check = st.session_state.get('active_bookings', pd.DataFrame())
                        other_active_bookings = active_bks_for_check[active_bks_for_check['S·ªë ƒë·∫∑t ph√≤ng'] != booking_id].copy()
                        room_type_of_booking_edit = booking_data_series['T√™n ch·ªó ngh·ªâ']
                        
                        original_check_in_date_from_series = booking_data_series['Check-in Date'].date()
                        original_check_out_date_from_series = booking_data_series['Check-out Date'].date()

                        current_iter_date_dialog = final_new_check_in
                        while current_iter_date_dialog < final_new_check_out:
                            is_original_stay_day = (original_check_in_date_from_series <= current_iter_date_dialog < original_check_out_date_from_series)

                            if not is_original_stay_day: 
                                availability_specific_dialog = get_room_availability(current_iter_date_dialog, other_active_bookings, [room_type_of_booking_edit], ROOM_UNIT_PER_ROOM_TYPE)
                                if availability_specific_dialog.get(room_type_of_booking_edit, 0) <= 0:
                                    error_msg = f"Lo·∫°i ph√≤ng '{room_type_of_booking_edit}' ƒë√£ h·∫øt v√†o ng√†y {current_iter_date_dialog.strftime('%d/%m/%Y')} (cho ph·∫ßn ng√†y gia h·∫°n)."
                                    error_messages_dialog.append(error_msg)
                                    break  
                                
                                occupied_by_others_on_date_dialog = other_active_bookings[
                                    (other_active_bookings['Check-in Date'].dt.date <= current_iter_date_dialog) &
                                    (other_active_bookings['Check-out Date'].dt.date > current_iter_date_dialog)
                                ]
                                if len(occupied_by_others_on_date_dialog) + 1 > TOTAL_HOTEL_CAPACITY:
                                    error_msg = f"Kh√°ch s·∫°n h·∫øt ph√≤ng v√†o ng√†y {current_iter_date_dialog.strftime('%d/%m/%Y')} (cho ph·∫ßn ng√†y gia h·∫°n, t·ªïng c√¥ng su·∫•t: {TOTAL_HOTEL_CAPACITY})."
                                    error_messages_dialog.append(error_msg)
                                    break  
                            current_iter_date_dialog += timedelta(days=1)
                        
                    if not error_messages_dialog: 
                        df_to_update = st.session_state.df.copy() 
                        booking_idx_list = df_to_update[df_to_update['S·ªë ƒë·∫∑t ph√≤ng'] == booking_id].index
                        if not booking_idx_list.empty:
                            idx_to_update = booking_idx_list[0]
                            df_to_update.loc[idx_to_update, 'Check-in Date'] = pd.Timestamp(final_new_check_in) 
                            df_to_update.loc[idx_to_update, 'Check-out Date'] = pd.Timestamp(final_new_check_out) 
                            df_to_update.loc[idx_to_update, 'Ng√†y ƒë·∫øn'] = f"ng√†y {final_new_check_in.day} th√°ng {final_new_check_in.month} nƒÉm {final_new_check_in.year}"
                            df_to_update.loc[idx_to_update, 'Ng√†y ƒëi'] = f"ng√†y {final_new_check_out.day} th√°ng {final_new_check_out.month} nƒÉm {final_new_check_out.year}"
                            new_stay_duration_dialog = (final_new_check_out - final_new_check_in).days
                            df_to_update.loc[idx_to_update, 'Stay Duration'] = new_stay_duration_dialog
                            total_payment_for_booking_dialog = pd.to_numeric(df_to_update.loc[idx_to_update, 'T·ªïng thanh to√°n'], errors='coerce')
                            df_to_update.loc[idx_to_update, 'Gi√° m·ªói ƒë√™m'] = round(total_payment_for_booking_dialog / new_stay_duration_dialog) if new_stay_duration_dialog > 0 else 0.0
                            
                            st.session_state.df = df_to_update
                            st.session_state.active_bookings = st.session_state.df[st.session_state.df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy()
                            st.session_state.room_types = get_cleaned_room_types(st.session_state.df)

                            st.success(f"ƒê√£ c·∫≠p nh·∫≠t ng√†y cho ƒë·∫∑t ph√≤ng {booking_id}.")
                            # st.session_state.editing_booking_id_for_dialog = None # REMOVED - Handled outside
                            if dialog_cin_key in st.session_state: del st.session_state[dialog_cin_key]
                            if dialog_cout_key in st.session_state: del st.session_state[dialog_cout_key]
                            st.rerun()
                        else: st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng {booking_id} ƒë·ªÉ c·∫≠p nh·∫≠t.")
                    else:
                        for msg_dialog in error_messages_dialog: st.error(msg_dialog)

                if st.button("H·ªßy", key=f"cancel_edit_dialog_{booking_id}"):
                    # st.session_state.editing_booking_id_for_dialog = None # REMOVED - Handled outside
                    if dialog_cin_key in st.session_state: del st.session_state[dialog_cin_key]
                    if dialog_cout_key in st.session_state: del st.session_state[dialog_cout_key]
                    st.rerun()

            edit_booking_dates_dialog_content(booking_to_edit_series, booking_id_to_edit)
        else:
            st.warning(f"Kh√¥ng t√¨m th·∫•y th√¥ng tin chi ti·∫øt cho ƒë·∫∑t ph√≤ng {_booking_id_to_edit_trigger} ƒë·ªÉ s·ª≠a.")
            # Clean up dialog-specific input keys if we couldn't open the dialog and data wasn't found
            dialog_cin_key_cleanup = f"dialog_cin_{_booking_id_to_edit_trigger}"
            dialog_cout_key_cleanup = f"dialog_cout_{_booking_id_to_edit_trigger}"
            if dialog_cin_key_cleanup in st.session_state: del st.session_state[dialog_cin_key_cleanup]
            if dialog_cout_key_cleanup in st.session_state: del st.session_state[dialog_cout_key_cleanup]
    # Removed the elif block that was here:
    # elif st.session_state.editing_booking_id_for_dialog:
    #     st.warning("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ƒë·∫∑t ph√≤ng ƒë·ªÉ s·ª≠a do thi·∫øu d·ªØ li·ªáu.")
    #     st.session_state.editing_booking_id_for_dialog = None


# --- TAB PH√ÇN T√çCH ---
with tab_analytics:
    st.header("üìà Ph√¢n t√≠ch & B√°o c√°o")
    if df is not None and not df.empty and active_bookings is not None and not active_bookings.empty:
        st.sidebar.subheader("B·ªô l·ªçc Ph√¢n t√≠ch")
        min_analytics_filter = min_date_val; max_analytics_filter = max_date_val
        if min_analytics_filter > max_analytics_filter: max_analytics_filter = min_analytics_filter + timedelta(days=1)
        start_date_analytics = st.sidebar.date_input("Ng√†y b·∫Øt ƒë·∫ßu (ph√¢n t√≠ch C/I):", min_analytics_filter, min_value=min_analytics_filter, max_value=max_analytics_filter, key="analytics_start_date_key", help="L·ªçc theo ng√†y Check-in.")
        end_date_analytics = st.sidebar.date_input("Ng√†y k·∫øt th√∫c (ph√¢n t√≠ch C/I):", max_analytics_filter, min_value=start_date_analytics, max_value=max_analytics_filter, key="analytics_end_date_key", help="L·ªçc theo ng√†y Check-in.")
        if start_date_analytics > end_date_analytics: st.error("L·ªói: Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ sau ng√†y k·∫øt th√∫c.")
        else:
            analytics_df_filtered = active_bookings[(active_bookings['Check-in Date'].dt.date >= start_date_analytics) & (active_bookings['Check-in Date'].dt.date <= end_date_analytics)].copy()
            if not analytics_df_filtered.empty:
                st.subheader(f"S·ªë li·ªáu t·ª´ {start_date_analytics.strftime('%d/%m/%Y')} ƒë·∫øn {end_date_analytics.strftime('%d/%m/%Y')}")
                col_metric_anl1, col_metric_anl2, col_metric_anl3, col_metric_anl4 = st.columns(4)
                with col_metric_anl1:
                    analytics_df_filtered['Stay Duration'] = pd.to_numeric(analytics_df_filtered['Stay Duration'], errors='coerce').fillna(0)
                    mean_stay = analytics_df_filtered['Stay Duration'].mean() if not analytics_df_filtered['Stay Duration'].empty else 0
                    st.metric("TB th·ªùi gian ·ªü (ng√†y)", f"{mean_stay:.1f}")
                with col_metric_anl2: total_nights = analytics_df_filtered['Stay Duration'].sum(); st.metric("T·ªïng s·ªë ƒë√™m ƒë√£ ƒë·∫∑t", f"{total_nights:,.0f}")
                with col_metric_anl3: mean_payment = analytics_df_filtered['T·ªïng thanh to√°n'].mean() if not analytics_df_filtered['T·ªïng thanh to√°n'].empty else 0; st.metric("TB T·ªïng TT/ƒë·∫∑t (VND)", f"{mean_payment:,.0f}")
                with col_metric_anl4: st.metric("T·ªïng l∆∞·ª£t kh√°ch (OK)", f"{len(analytics_df_filtered):,.0f}")
                st.markdown("---")
                st.subheader("Th·ªëng k√™ theo kh√°ch h√†ng")
                if 'T√™n ng∆∞·ªùi ƒë·∫∑t' in analytics_df_filtered.columns and 'T·ªïng thanh to√°n' in analytics_df_filtered.columns:
                    guest_stats_anl = analytics_df_filtered.groupby('T√™n ng∆∞·ªùi ƒë·∫∑t').agg(total_bookings_agg=('S·ªë ƒë·∫∑t ph√≤ng', 'count'), total_payment_sum_agg=('T·ªïng thanh to√°n', 'sum'), avg_stay_duration_agg=('Stay Duration', 'mean'), last_booking_date_agg=('Booking Date', 'max')).reset_index()
                    guest_stats_anl.rename(columns={'T√™n ng∆∞·ªùi ƒë·∫∑t': 'T√™n kh√°ch', 'total_bookings_agg': 'T·ªïng ƒë·∫∑t ph√≤ng', 'total_payment_sum_agg': 'T·ªïng thanh to√°n (VND)', 'avg_stay_duration_agg': 'TB s·ªë ƒë√™m ·ªü', 'last_booking_date_agg': 'ƒê·∫∑t ph√≤ng cu·ªëi'}, inplace=True)
                    guest_stats_display_anl = guest_stats_anl.copy()
                    if 'T·ªïng thanh to√°n (VND)' in guest_stats_display_anl.columns: guest_stats_display_anl['T·ªïng thanh to√°n (VND)'] = guest_stats_display_anl['T·ªïng thanh to√°n (VND)'].map('{:,.0f}'.format)
                    if 'TB s·ªë ƒë√™m ·ªü' in guest_stats_display_anl.columns: guest_stats_display_anl['TB s·ªë ƒë√™m ·ªü'] = guest_stats_display_anl['TB s·ªë ƒë√™m ·ªü'].map('{:.1f}'.format)
                    if 'ƒê·∫∑t ph√≤ng cu·ªëi' in guest_stats_display_anl.columns: guest_stats_display_anl['ƒê·∫∑t ph√≤ng cu·ªëi'] = pd.to_datetime(guest_stats_display_anl['ƒê·∫∑t ph√≤ng cu·ªëi']).dt.strftime('%d/%m/%Y')
                    st.dataframe(guest_stats_display_anl.set_index('T√™n kh√°ch').sort_values(by='T·ªïng ƒë·∫∑t ph√≤ng', ascending=False), use_container_width=True)
                    if not guest_stats_anl.empty and 'T·ªïng thanh to√°n (VND)' in guest_stats_anl.columns:
                        guest_stats_anl_chart = guest_stats_anl.copy()
                        guest_stats_anl_chart['T·ªïng thanh to√°n (VND)'] = pd.to_numeric(guest_stats_anl_chart['T·ªïng thanh to√°n (VND)'], errors='coerce').fillna(0)
                        guest_revenue_chart_df_anl = guest_stats_anl_chart.sort_values(by='T·ªïng thanh to√°n (VND)', ascending=False).head(15)
                        fig_guest_revenue_anl = px.bar(guest_revenue_chart_df_anl, x='T√™n kh√°ch', y='T·ªïng thanh to√°n (VND)', title='Top 15 kh√°ch h√†ng theo t·ªïng thanh to√°n', labels={'T·ªïng thanh to√°n (VND)': 'T·ªïng thanh to√°n (VND)', 'T√™n kh√°ch': 'T√™n kh√°ch h√†ng'}, color='T·ªïng thanh to√°n (VND)', color_continuous_scale=px.colors.sequential.Viridis, text_auto='.2s')
                        fig_guest_revenue_anl.update_layout(xaxis_tickangle=-45, height=400); st.plotly_chart(fig_guest_revenue_anl, use_container_width=True)
                else: st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu kh√°ch h√†ng ƒë·ªÉ ph√¢n t√≠ch.")
                st.markdown("---")
                st.subheader("Ph√¢n t√≠ch kh√°ch h√†ng theo Genius")
                if 'Th√†nh vi√™n Genius' in analytics_df_filtered.columns:
                    col_genius_anl1, col_genius_anl2 = st.columns(2)
                    with col_genius_anl1:
                        genius_counts_anl = analytics_df_filtered['Th√†nh vi√™n Genius'].value_counts().reset_index(); genius_counts_anl.columns = ['Lo·∫°i th√†nh vi√™n', 'S·ªë l∆∞·ª£ng ƒë·∫∑t ph√≤ng']
                        fig_genius_pie_anl = px.pie(genius_counts_anl, names='Lo·∫°i th√†nh vi√™n', values='S·ªë l∆∞·ª£ng ƒë·∫∑t ph√≤ng', title='T·ª∑ l·ªá ƒë·∫∑t ph√≤ng theo th√†nh vi√™n Genius', hole=0.3)
                        fig_genius_pie_anl.update_traces(textposition='inside', textinfo='percent+label'); st.plotly_chart(fig_genius_pie_anl, use_container_width=True)
                    with col_genius_anl2:
                        revenue_by_genius_anl = analytics_df_filtered.groupby('Th√†nh vi√™n Genius')['T·ªïng thanh to√°n'].sum().reset_index()
                        fig_genius_revenue_bar_anl = px.bar(revenue_by_genius_anl, x='Th√†nh vi√™n Genius', y='T·ªïng thanh to√°n', title='T·ªïng thanh to√°n theo lo·∫°i th√†nh vi√™n Genius', labels={'T·ªïng thanh to√°n': 'T·ªïng thanh to√°n (VND)'}, color='Th√†nh vi√™n Genius', text_auto='.2s')
                        st.plotly_chart(fig_genius_revenue_bar_anl, use_container_width=True)
                else: st.info("Thi·∫øu c·ªôt 'Th√†nh vi√™n Genius' ƒë·ªÉ ph√¢n t√≠ch.")
                st.markdown("---")
                col_chart_anl_ts1, col_chart_anl_ts2 = st.columns(2)
                with col_chart_anl_ts1:
                    st.subheader("Xu h∆∞·ªõng T·ªïng thanh to√°n h√†ng th√°ng")
                    df_for_monthly_rev_anl = analytics_df_filtered.copy()
                    df_for_monthly_rev_anl['NƒÉm-Th√°ng Check-in'] = df_for_monthly_rev_anl['Check-in Date'].dt.to_period('M').astype(str)
                    monthly_revenue_analytics = df_for_monthly_rev_anl.groupby('NƒÉm-Th√°ng Check-in')['T·ªïng thanh to√°n'].sum().reset_index().sort_values('NƒÉm-Th√°ng Check-in')
                    if not monthly_revenue_analytics.empty:
                        fig_monthly_revenue_anl = px.line(monthly_revenue_analytics, x='NƒÉm-Th√°ng Check-in', y='T·ªïng thanh to√°n', title='T·ªïng thanh to√°n h√†ng th√°ng (theo ng√†y Check-in)', markers=True, labels={'T·ªïng thanh to√°n': 'T·ªïng thanh to√°n (VND)', 'NƒÉm-Th√°ng Check-in': 'Th√°ng Check-in'})
                        st.plotly_chart(fig_monthly_revenue_anl, use_container_width=True)
                    else: st.info("Kh√¥ng c√≥ d·ªØ li·ªáu t·ªïng thanh to√°n h√†ng th√°ng.")
                with col_chart_anl_ts2:
                    st.subheader("T·ª∑ l·ªá l·∫•p ƒë·∫ßy h√†ng th√°ng (∆∞·ªõc t√≠nh)")
                    if TOTAL_HOTEL_CAPACITY > 0:
                        df_for_occupancy_anl = analytics_df_filtered.copy()
                        df_for_occupancy_anl['NƒÉm-Th√°ng Check-in'] = df_for_occupancy_anl['Check-in Date'].dt.to_period('M')
                        actual_nights_per_month_anl = df_for_occupancy_anl.groupby('NƒÉm-Th√°ng Check-in')['Stay Duration'].sum().reset_index(name='S·ªë ƒë√™m ƒë√£ ƒë·∫∑t')
                        if not actual_nights_per_month_anl.empty:
                            def get_max_nights_in_month(period_obj): return TOTAL_HOTEL_CAPACITY * period_obj.days_in_month
                            actual_nights_per_month_anl['S·ªë ƒë√™m t·ªëi ƒëa'] = actual_nights_per_month_anl['NƒÉm-Th√°ng Check-in'].apply(get_max_nights_in_month)
                            actual_nights_per_month_anl['T·ª∑ l·ªá l·∫•p ƒë·∫ßy (%)'] = (actual_nights_per_month_anl['S·ªë ƒë√™m ƒë√£ ƒë·∫∑t'] / actual_nights_per_month_anl['S·ªë ƒë√™m t·ªëi ƒëa']) * 100
                            actual_nights_per_month_anl['NƒÉm-Th√°ng Check-in'] = actual_nights_per_month_anl['NƒÉm-Th√°ng Check-in'].astype(str).sort_values()
                            fig_monthly_occupancy_anl = px.bar(actual_nights_per_month_anl, x='NƒÉm-Th√°ng Check-in', y='T·ª∑ l·ªá l·∫•p ƒë·∫ßy (%)', title='T·ª∑ l·ªá l·∫•p ƒë·∫ßy h√†ng th√°ng (d·ª±a tr√™n s·ªë ƒë√™m)', color='T·ª∑ l·ªá l·∫•p ƒë·∫ßy (%)', color_continuous_scale='RdYlGn', labels={'NƒÉm-Th√°ng Check-in': 'Th√°ng Check-in'}, text_auto='.1f')
                            fig_monthly_occupancy_anl.update_yaxes(range=[0, 105]); st.plotly_chart(fig_monthly_occupancy_anl, use_container_width=True)
                        else: st.info("Kh√¥ng c√≥ d·ªØ li·ªáu s·ªë ƒë√™m ƒë√£ ƒë·∫∑t ƒë·ªÉ t√≠nh t·ª∑ l·ªá l·∫•p ƒë·∫ßy.")
                    else: st.info("TOTAL_HOTEL_CAPACITY = 0. Kh√¥ng th·ªÉ t√≠nh t·ª∑ l·ªá l·∫•p ƒë·∫ßy.")
            else: st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫∑t ph√≤ng (tr·∫°ng th√°i OK) trong kho·∫£ng ng√†y ƒë√£ ch·ªçn.")
    else: st.info("Vui l√≤ng t·∫£i file d·ªØ li·ªáu ƒë·ªÉ xem ph√¢n t√≠ch.")

# --- TAB TH√äM ƒê·∫∂T PH√íNG M·ªöI ---
with tab_add_booking:
    st.header("‚ûï Th√™m ƒë·∫∑t ph√≤ng m·ªõi")

    room_types_options = st.session_state.get('room_types', []) 
    if not room_types_options:
        st.warning("Kh√¥ng c√≥ th√¥ng tin lo·∫°i ph√≤ng. Vui l√≤ng t·∫£i file d·ªØ li·ªáu tr∆∞·ªõc ho·∫∑c ƒë·∫£m b·∫£o file c√≥ c·ªôt 'T√™n ch·ªó ngh·ªâ' h·ª£p l·ªá.")
        room_types_options = ["Ch∆∞a c√≥ lo·∫°i ph√≤ng - Vui l√≤ng t·∫£i d·ªØ li·ªáu"]


    # ƒê·∫£m b·∫£o c√°c key n√†y ƒë∆∞·ª£c kh·ªüi t·∫°o n·∫øu ch∆∞a c√≥
    if 'add_form_check_in_final' not in st.session_state:
        st.session_state.add_form_check_in_final = datetime.date.today()

    _min_checkout_date_calculated_final = st.session_state.add_form_check_in_final + timedelta(days=1)

    if 'add_form_check_out_final' not in st.session_state:
        st.session_state.add_form_check_out_final = _min_checkout_date_calculated_final
    else:
        # ƒêi·ªÅu ch·ªânh ng√†y check-out n·∫øu n√≥ nh·ªè h∆°n ng√†y check-in + 1
        if st.session_state.add_form_check_out_final < _min_checkout_date_calculated_final:
            st.session_state.add_form_check_out_final = _min_checkout_date_calculated_final

    with st.form(key="add_booking_form_v8_stable_dates"):
        st.subheader("Th√¥ng tin ƒë·∫∑t ph√≤ng")
        col_form_add1, col_form_add2 = st.columns(2)

        with col_form_add1:
            guest_name_form = st.text_input("T√™n kh√°ch*", placeholder="Nh·∫≠p t√™n ƒë·∫ßy ƒë·ªß", key="form_v8_guest_name")
            room_type_form = st.selectbox("Lo·∫°i ph√≤ng*", options=room_types_options, key="form_v8_room_type", index=0 if room_types_options else 0)
            
            genius_df_source_add = st.session_state.get('df')
            genius_options_add_list = []
            if genius_df_source_add is not None and not genius_df_source_add.empty and 'Th√†nh vi√™n Genius' in genius_df_source_add.columns:
                try:
                    genius_options_add_list = sorted(genius_df_source_add['Th√†nh vi√™n Genius'].dropna().astype(str).unique().tolist())
                except Exception:
                    genius_options_add_list = genius_df_source_add['Th√†nh vi√™n Genius'].dropna().astype(str).unique().tolist()
            if not genius_options_add_list: genius_options_add_list = ["Kh√¥ng", "C√≥"] # Fallback
            genius_member_form = st.selectbox("Th√†nh vi√™n Genius", options=genius_options_add_list, index=0, key="form_v8_genius")

        with col_form_add2:
            # S·ª≠ d·ª•ng st.session_state tr·ª±c ti·∫øp cho value c·ªßa date_input
            st.date_input(
                "Ng√†y check-in*",
                value=st.session_state.add_form_check_in_final, # ƒê·ªçc t·ª´ session_state
                min_value=datetime.date.today() - timedelta(days=730),
                max_value=datetime.date.today() + timedelta(days=730),
                key="add_form_check_in_final" # Key n√†y s·∫Ω c·∫≠p nh·∫≠t session_state
            )
            st.date_input(
                "Ng√†y check-out*",
                value=st.session_state.add_form_check_out_final, # ƒê·ªçc t·ª´ session_state
                min_value=_min_checkout_date_calculated_final, # T√≠nh to√°n l·∫°i min_value d·ª±a tr√™n check_in hi·ªán t·∫°i
                max_value=st.session_state.add_form_check_in_final + timedelta(days=731),
                key="add_form_check_out_final" # Key n√†y s·∫Ω c·∫≠p nh·∫≠t session_state
            )
            status_df_source_add = st.session_state.get('df')
            status_options_add_list = []
            if status_df_source_add is not None and not status_df_source_add.empty and 'T√¨nh tr·∫°ng' in status_df_source_add.columns:
                try:
                    status_options_add_list = sorted(status_df_source_add['T√¨nh tr·∫°ng'].dropna().astype(str).unique().tolist())
                except Exception:
                    status_options_add_list = status_df_source_add['T√¨nh tr·∫°ng'].dropna().astype(str).unique().tolist()
            if not status_options_add_list: status_options_add_list = ["OK", "ƒê√£ h·ªßy", "Ch·ªù x·ª≠ l√Ω"] # Fallback
            default_status_idx = status_options_add_list.index("OK") if "OK" in status_options_add_list else 0
            booking_status_form = st.selectbox("Tr·∫°ng th√°i ƒë·∫∑t ph√≤ng", options=status_options_add_list, index=default_status_idx, key="form_v8_status")
        
        st.markdown("---"); st.subheader("Th√¥ng tin thanh to√°n")
        col_form_add3, col_form_add4 = st.columns(2)
        with col_form_add3:
            total_payment_form = st.number_input("T·ªïng thanh to√°n (VND)*", min_value=0, value=500000, step=50000, format="%d", key="form_v8_total_payment")
            default_commission = int(total_payment_form * 0.15) if total_payment_form > 0 else 0
            commission_form = st.number_input("Hoa h·ªìng (VND)", min_value=0, value=default_commission, step=10000, format="%d", key="form_v8_commission")
        with col_form_add4:
            currency_df_source_add = st.session_state.get('df')
            currency_options_add_list = []
            if currency_df_source_add is not None and not currency_df_source_add.empty and 'Ti·ªÅn t·ªá' in currency_df_source_add.columns:
                try:
                    currency_options_add_list = sorted(currency_df_source_add['Ti·ªÅn t·ªá'].dropna().astype(str).unique())
                except Exception:
                    currency_options_add_list = currency_df_source_add['Ti·ªÅn t·ªá'].dropna().astype(str).unique().tolist()
            if not currency_options_add_list: currency_options_add_list = ["VND", "USD"] # Fallback
            default_currency_idx = currency_options_add_list.index("VND") if "VND" in currency_options_add_list else 0
            currency_form = st.selectbox("Ti·ªÅn t·ªá", options=currency_options_add_list, index=default_currency_idx, key="form_v8_currency")
            default_booking_id_add = f"MANUAL{datetime.datetime.now().strftime('%y%m%d%H%M%S')}"
            booking_id_form = st.text_input("M√£ ƒë·∫∑t ph√≤ng (t·ª± ƒë·ªông n·∫øu tr·ªëng)", value=default_booking_id_add, key="form_v8_booking_id")
        
        submitted_form_add = st.form_submit_button("üíæ Th√™m ƒë·∫∑t ph√≤ng n√†y", type="primary")
        
        if submitted_form_add:
            errors = [] 
            # L·∫•y gi√° tr·ªã ng√†y th√°ng cu·ªëi c√πng t·ª´ session_state (ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi widget)
            final_check_in_date = st.session_state.add_form_check_in_final
            final_check_out_date = st.session_state.add_form_check_out_final

            if not guest_name_form.strip(): errors.append("T√™n kh√°ch kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
            if final_check_out_date <= final_check_in_date: 
                errors.append(f"Ng√†y check-out ({final_check_out_date.strftime('%d/%m/%Y')}) ph·∫£i sau ng√†y check-in ({final_check_in_date.strftime('%d/%m/%Y')}).")
            if total_payment_form <= 0 and booking_status_form == "OK": errors.append("T·ªïng thanh to√°n ph·∫£i > 0 cho ƒë·∫∑t ph√≤ng 'OK'.")
            if room_type_form == "Ch∆∞a c√≥ lo·∫°i ph√≤ng - Vui l√≤ng t·∫£i d·ªØ li·ªáu" or not room_type_form :
                errors.append("Lo·∫°i ph√≤ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng t·∫£i d·ªØ li·ªáu c√≥ th√¥ng tin lo·∫°i ph√≤ng.")

            final_booking_id = booking_id_form.strip() if booking_id_form.strip() else default_booking_id_add
            current_df_for_check = st.session_state.get('df')
            if current_df_for_check is not None and not current_df_for_check.empty and 'S·ªë ƒë·∫∑t ph√≤ng' in current_df_for_check.columns and final_booking_id in current_df_for_check['S·ªë ƒë·∫∑t ph√≤ng'].values:
                errors.append(f"M√£ ƒë·∫∑t ph√≤ng '{final_booking_id}' ƒë√£ t·ªìn t·∫°i.")

            active_bookings_for_check = st.session_state.get('active_bookings')
            if not errors and booking_status_form == "OK": 
                if active_bookings_for_check is not None and room_types_options and room_type_form not in ["Ch∆∞a c√≥ lo·∫°i ph√≤ng - Vui l√≤ng t·∫£i d·ªØ li·ªáu", None, ""]: 
                    current_check_date_form_add = final_check_in_date 
                    while current_check_date_form_add < final_check_out_date: 
                        availability_check_specific_add = get_room_availability(current_check_date_form_add, active_bookings_for_check, [room_type_form], ROOM_UNIT_PER_ROOM_TYPE)
                        if availability_check_specific_add.get(room_type_form, 0) <= 0:
                            errors.append(f"Ph√≤ng '{room_type_form}' ƒë√£ h·∫øt v√†o ng√†y {current_check_date_form_add.strftime('%d/%m/%Y')}.")
                            break 
                        
                        temp_active_bookings_for_add = active_bookings_for_check[
                            (active_bookings_for_check['Check-in Date'].dt.date <= current_check_date_form_add) & 
                            (active_bookings_for_check['Check-out Date'].dt.date > current_check_date_form_add) & 
                            (active_bookings_for_check['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy')
                        ]
                        if len(temp_active_bookings_for_add) + 1 > TOTAL_HOTEL_CAPACITY:
                            errors.append(f"Kh√°ch s·∫°n ƒë√£ ƒë·∫°t t·ªïng c√¥ng su·∫•t ({TOTAL_HOTEL_CAPACITY} ph√≤ng) v√†o ng√†y {current_check_date_form_add.strftime('%d/%m/%Y')}.")
                            break
                        current_check_date_form_add += timedelta(days=1)
            
            if errors: 
                for error_msg in errors: st.error(error_msg)
            else: 
                default_location = "N/A (Ch∆∞a x√°c ƒë·ªãnh)"
                current_df_for_add = st.session_state.get('df')
                if current_df_for_add is not None and not current_df_for_add.empty and 'T√™n ch·ªó ngh·ªâ' in current_df_for_add.columns and 'V·ªã tr√≠' in current_df_for_add.columns:
                    room_specific_locations_df = current_df_for_add[current_df_for_add['T√™n ch·ªó ngh·ªâ'] == room_type_form]
                    if not room_specific_locations_df.empty:
                        unique_room_locations = room_specific_locations_df['V·ªã tr√≠'].dropna().unique()
                        if len(unique_room_locations) > 0 and pd.notna(unique_room_locations[0]):
                            default_location = str(unique_room_locations[0])
                
                stay_duration_val = (final_check_out_date - final_check_in_date).days
                total_payment_val = float(total_payment_form)
                price_per_night_val = round(total_payment_val / stay_duration_val) if stay_duration_val > 0 else 0.0

                new_booking_data = {
                    'T√™n ch·ªó ngh·ªâ': room_type_form, 'V·ªã tr√≠': default_location,
                    'T√™n ng∆∞·ªùi ƒë·∫∑t': guest_name_form.strip(), 'Th√†nh vi√™n Genius': genius_member_form,
                    'Ng√†y ƒë·∫øn': f"ng√†y {final_check_in_date.day} th√°ng {final_check_in_date.month} nƒÉm {final_check_in_date.year}",
                    'Ng√†y ƒëi': f"ng√†y {final_check_out_date.day} th√°ng {final_check_out_date.month} nƒÉm {final_check_out_date.year}",
                    'ƒê∆∞·ª£c ƒë·∫∑t v√†o': f"ng√†y {datetime.date.today().day} th√°ng {datetime.date.today().month} nƒÉm {datetime.date.today().year}",
                    'T√¨nh tr·∫°ng': booking_status_form, 'T·ªïng thanh to√°n': total_payment_val,
                    'Hoa h·ªìng': float(commission_form), 'Ti·ªÅn t·ªá': currency_form,
                    'S·ªë ƒë·∫∑t ph√≤ng': final_booking_id,
                    'Check-in Date': pd.Timestamp(final_check_in_date),
                    'Check-out Date': pd.Timestamp(final_check_out_date),
                    'Booking Date': pd.Timestamp(datetime.date.today()),
                    'Stay Duration': stay_duration_val,
                    'Gi√° m·ªói ƒë√™m': price_per_night_val
                }
                new_booking_df_row = pd.DataFrame([new_booking_data])
                
                df_to_update = st.session_state.get('df')
                if df_to_update is None or df_to_update.empty:
                    st.session_state.df = new_booking_df_row
                else:
                    st.session_state.df = pd.concat([df_to_update, new_booking_df_row], ignore_index=True)
                
                st.session_state.active_bookings = st.session_state.df[st.session_state.df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy()
                st.session_state.room_types = get_cleaned_room_types(st.session_state.df)

                st.success(f"ƒê·∫∑t ph√≤ng '{final_booking_id}' cho kh√°ch '{guest_name_form.strip()}' ƒë√£ ƒë∆∞·ª£c th√™m!"); st.balloons()
                st.session_state.last_action_message = f"ƒê√£ th√™m ƒë·∫∑t ph√≤ng {final_booking_id}."
                st.session_state.selected_calendar_date = None 
                
                # S·ª¨A L·ªñI ·ªû ƒê√ÇY: X√≥a c√°c key kh·ªèi session_state ƒë·ªÉ reset form
                if "add_form_check_in_final" in st.session_state:
                    del st.session_state.add_form_check_in_final
                if "add_form_check_out_final" in st.session_state:
                    del st.session_state.add_form_check_out_final
                
                st.rerun()

# --- TAB M·∫™U TIN NH·∫ÆN ---
with tab_message_templates:
    st.header("üíå Qu·∫£n l√Ω M·∫´u Tin Nh·∫Øn")

    st.sidebar.subheader("T·∫£i l√™n M·∫´u Tin Nh·∫Øn")
    uploaded_template_file = st.sidebar.file_uploader("T·∫£i l√™n file .txt ch·ª©a m·∫´u tin nh·∫Øn:", type=['txt'], key="template_file_uploader")

    if uploaded_template_file is not None:
        try:
            new_content = uploaded_template_file.read().decode("utf-8")
            parsed_templates = parse_message_templates(new_content)
            if parsed_templates is not None:
                st.session_state.message_templates_dict = parsed_templates
                st.session_state.raw_template_content_for_download = format_templates_to_text(st.session_state.message_templates_dict)
                st.sidebar.success("ƒê√£ t·∫£i v√† ph√¢n t√≠ch th√†nh c√¥ng file m·∫´u tin nh·∫Øn!")
                # st.rerun() # Removed explicit rerun to see if it resolves constant refresh
            else:
                st.sidebar.error("L·ªói khi ph√¢n t√≠ch file m·∫´u tin nh·∫Øn. N·ªôi dung c√≥ th·ªÉ kh√¥ng h·ª£p l·ªá.")
        except Exception as e:
            st.sidebar.error(f"L·ªói khi x·ª≠ l√Ω file: {e}")

    if st.sidebar.button("üîÑ Kh√¥i ph·ª•c m·∫´u tin nh·∫Øn m·∫∑c ƒë·ªãnh", key="reset_default_templates_button"):
        st.session_state.message_templates_dict = parse_message_templates(DEFAULT_MESSAGE_TEMPLATE_CONTENT)
        st.session_state.raw_template_content_for_download = format_templates_to_text(st.session_state.message_templates_dict)
        st.sidebar.success("ƒê√£ kh√¥i ph·ª•c c√°c m·∫´u tin nh·∫Øn v·ªÅ m·∫∑c ƒë·ªãnh!")
        st.rerun() # Rerun to reflect the changes immediately

    st.markdown("---")
    st.subheader("Th√™m M·∫´u Tin Nh·∫Øn M·ªõi")
    with st.form("add_template_form", clear_on_submit=True):
        new_template_category = st.text_input("Ch·ªß ƒë·ªÅ ch√≠nh (VD: CHECK OUT, WIFI INFO):").upper().strip()
        new_template_label = st.text_input("Nh√£n ph·ª• (VD: H∆∞·ªõng d·∫´n, L∆∞u √Ω 1, 2. - B·ªè tr·ªëng n·∫øu l√† tin nh·∫Øn ch√≠nh cho ch·ªß ƒë·ªÅ):").strip()
        new_template_message = st.text_area("N·ªôi dung tin nh·∫Øn:", height=150)
        submit_add_template = st.form_submit_button("‚ûï Th√™m m·∫´u n√†y")

        if submit_add_template:
            if not new_template_category or not new_template_message:
                st.error("Ch·ªß ƒë·ªÅ ch√≠nh v√† N·ªôi dung tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            else:
                label_to_add = new_template_label if new_template_label else "DEFAULT"
                current_templates = st.session_state.message_templates_dict.copy()
                if new_template_category not in current_templates:
                    current_templates[new_template_category] = []
                label_exists_at_index = -1
                for idx, (lbl, _) in enumerate(current_templates[new_template_category]):
                    if lbl == label_to_add:
                        label_exists_at_index = idx
                        break
                if label_exists_at_index != -1:
                    current_templates[new_template_category][label_exists_at_index] = (label_to_add, new_template_message)
                    st.success(f"ƒê√£ c·∫≠p nh·∫≠t m·∫´u tin nh·∫Øn '{label_to_add}' trong ch·ªß ƒë·ªÅ '{new_template_category}'.")
                else:
                    current_templates[new_template_category].append((label_to_add, new_template_message))
                    st.success(f"ƒê√£ th√™m m·∫´u tin nh·∫Øn '{label_to_add}' v√†o ch·ªß ƒë·ªÅ '{new_template_category}'.")
                st.session_state.message_templates_dict = current_templates
                st.session_state.raw_template_content_for_download = format_templates_to_text(current_templates)
                st.rerun()

    st.markdown("---")
    st.subheader("Danh S√°ch M·∫´u Tin Nh·∫Øn Hi·ªán T·∫°i")

    if not st.session_state.get('message_templates_dict'):
        st.info("Ch∆∞a c√≥ m·∫´u tin nh·∫Øn n√†o. H√£y th√™m m·ªõi ho·∫∑c t·∫£i l√™n file.")
    else:
        for category, labeled_messages in sorted(st.session_state.message_templates_dict.items()):
            with st.expander(f"Ch·ªß ƒë·ªÅ: {category}", expanded=False):
                if not labeled_messages:
                    st.caption("Kh√¥ng c√≥ tin nh·∫Øn n√†o cho ch·ªß ƒë·ªÅ n√†y.")
                    continue
                for i, (label, message) in enumerate(labeled_messages):
                    widget_key_prefix = f"tpl_cat_{''.join(filter(str.isalnum, category))}_lbl_{''.join(filter(str.isalnum, label))}_{i}"
                    
                    col1_msg, col2_msg = st.columns([4,1]) 

                    with col1_msg:
                        if label != "DEFAULT":
                            st.markdown(f"**Nh√£n: {label}**")
                        else:
                            st.markdown(f"**N·ªôi dung ch√≠nh:**")
                        st.text_area(
                            label=f"_{label}_in_{category}_content_display_", 
                            value=message,
                            height=max(80, len(message.split('\n')) * 20 + 40),
                            key=f"{widget_key_prefix}_text_area_display", 
                            disabled=True,
                            help="N·ªôi dung tin nh·∫Øn. B·∫°n c√≥ th·ªÉ ch·ªçn v√† sao ch√©p th·ªß c√¥ng t·ª´ ƒë√¢y."
                        )
                    
                    # with col2_msg:
                    #     st.write("") 
                    #     st.write("") 
                    #     if st.button("Sao ch√©p", key=f"{widget_key_prefix}_copy_button", help=f"Nh·∫•n ƒë·ªÉ nh·∫≠n h∆∞·ªõng d·∫´n sao ch√©p tin nh·∫Øn '{label if label != 'DEFAULT' else 'n√†y'}'"):
                    #         st.toast(f"H√£y ch·ªçn n·ªôi dung tin nh·∫Øn '{label if label != 'DEFAULT' else 'ch√≠nh'}' t·ª´ √¥ b√™n tr√°i v√† nh·∫•n Ctrl+C (ho·∫∑c Cmd+C) ƒë·ªÉ sao ch√©p.", icon="üìã")

                    if i < len(labeled_messages) - 1:
                        st.markdown("---")
        
        st.markdown("---")
        current_raw_template_content = st.session_state.get('raw_template_content_for_download', "")
        if isinstance(current_raw_template_content, str):
            st.download_button(
                label="üì• T·∫£i v·ªÅ t·∫•t c·∫£ m·∫´u tin nh·∫Øn (TXT)",
                data=current_raw_template_content.encode("utf-8"),
                file_name="message_templates_download.txt",
                mime="text/plain",
                key="download_message_templates_button_v2" 
            )
        else:
            st.warning("Kh√¥ng th·ªÉ t·∫°o file t·∫£i v·ªÅ do n·ªôi dung m·∫´u tin nh·∫Øn kh√¥ng h·ª£p l·ªá.")


# --- GOOGLE SHEETS UPLOAD TOOL ---
def upload_to_gsheet(df, sheet_id, creds_path, worksheet_name=None):
    """
    Uploads a DataFrame to a specific Google Sheet by its ID (recommended for API reliability).
    If worksheet_name is provided, uploads to that worksheet, otherwise uses the first worksheet.
    """
    scope = [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive',
    ]
    # MODIFICATION START: Load credentials from Streamlit secrets if available
    if "GCP_SERVICE_ACCOUNT_JSON" in st.secrets:
        creds_json_str = st.secrets["GCP_SERVICE_ACCOUNT_JSON"]
        st.error(f"DEBUG (upload_to_gsheet): GCP_SERVICE_ACCOUNT_JSON is {len(creds_json_str)} chars long.") # DEBUG LINE
        creds_info = json.loads(creds_json_str)
        creds = Credentials.from_service_account_info(creds_info, scopes=scope)
    elif creds_path and os.path.exists(creds_path): # Fallback to local file if secret not found
        creds = Credentials.from_service_account_file(creds_path, scopes=scope)
    else:
        st.error("Google Sheets credentials not found for upload. Please set GCP_SERVICE_ACCOUNT_JSON secret in Streamlit Cloud or ensure local creds_path is valid.")
        raise Exception("Credentials not found for upload_to_gsheet")
    # MODIFICATION END
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(sheet_id)
    if worksheet_name:
        try:
            worksheet = sh.worksheet(worksheet_name)
        except gspread.WorksheetNotFound:
            worksheet = sh.add_worksheet(title=worksheet_name, rows="100", cols="20")
    else:
        worksheet = sh.sheet1
    worksheet.clear()
    # Convert all columns to string to avoid serialization issues
    df_str = df.astype(str)
    worksheet.update([df_str.columns.values.tolist()] + df_str.values.tolist())
    return sh.url

st.sidebar.markdown("---")
st.sidebar.subheader("üîó Google Sheets")
if st.session_state.get('df') is not None and not st.session_state['df'].empty:
    st.sidebar.markdown("**T·∫£i d·ªØ li·ªáu l√™n Google Sheets**")
    # Default Google Sheet ID provided by user
    default_sheet_id = "13kQETOUGCVUwUqZrxeLy-WAj3b17SugI4L8Oq09SX2w"
    sheet_id = st.sidebar.text_input("Google Sheet ID", value=default_sheet_id, key="gsheet_id")
    worksheet_name = st.sidebar.text_input("T√™n Worksheet (m·∫∑c ƒë·ªãnh: BookingManager)", value="BookingManager", key="gsheet_worksheet_name")
    
    # --- Robust Credential Path Logic (Copied and adapted) ---
    creds_path_sidebar = "streamlit-api-461302-5dfbcb4beaba.json" # Default
    try:
        import os
        import json # Add json import for parsing secrets
        creds_filename_sidebar = "streamlit-api-461302-5dfbcb4beaba.json"
        creds_path_sidebar = creds_filename_sidebar # Initial assumption

        try:
            script_dir_sidebar = os.path.dirname(__file__)
            path_in_script_dir_sidebar = os.path.join(script_dir_sidebar, creds_filename_sidebar)
            if os.path.exists(path_in_script_dir_sidebar):
                creds_path_sidebar = path_in_script_dir_sidebar
                # st.sidebar.caption(f"Found GSheet creds in script_dir: {creds_path_sidebar}") # Optional: for debugging
        except NameError:
            pass # __file__ not defined, cannot check script dir

        if not os.path.exists(creds_path_sidebar):
            cwd_sidebar = os.getcwd()
            path_in_cwd_sidebar = os.path.join(cwd_sidebar, creds_filename_sidebar)
            if os.path.exists(path_in_cwd_sidebar):
                creds_path_sidebar = path_in_cwd_sidebar
                # st.sidebar.caption(f"Found GSheet creds in CWD: {creds_path_sidebar}") # Optional: for debugging
            # else: # No explicit warning here to keep sidebar cleaner, error will show on action
                # st.sidebar.caption(f"GSheet creds not found, will use: {creds_path_sidebar}") 
    except ImportError:
        st.sidebar.warning("OS module not available for robust GSheet creds path finding.")
    except Exception:
        st.sidebar.warning("Error finding GSheet creds path, using default.")
    # --- End of Robust Credential Path Logic ---

    def import_from_gsheet(sheet_id_func, creds_path_func, worksheet_name_func=None):
        scope = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive',
        ]
        # MODIFICATION START: Load credentials from Streamlit secrets if available
        if "GCP_SERVICE_ACCOUNT_JSON" in st.secrets:
            creds_json_str = st.secrets["GCP_SERVICE_ACCOUNT_JSON"]
            st.error(f"DEBUG (Sidebar import_from_gsheet): GCP_SERVICE_ACCOUNT_JSON is {len(creds_json_str)} chars long.") # DEBUG LINE
            creds_info = json.loads(creds_json_str)
            creds_func = Credentials.from_service_account_info(creds_info, scopes=scope)
        elif creds_path_func and os.path.exists(creds_path_func): # Fallback to local file
            creds_func = Credentials.from_service_account_file(creds_path_func, scopes=scope)
        else:
            st.error("Google Sheets credentials not found for import. Please set GCP_SERVICE_ACCOUNT_JSON secret in Streamlit Cloud or ensure local creds_path_func is valid.")
            return pd.DataFrame() # Return empty DataFrame on credential error
        # MODIFICATION END
        gc = gspread.authorize(creds_func)
        sh = gc.open_by_key(sheet_id_func)
        if worksheet_name_func:
            worksheet = sh.worksheet(worksheet_name_func)
        else:
            worksheet = sh.sheet1
        data = worksheet.get_all_values()
        if not data or len(data) < 2:
            return pd.DataFrame()
        df = pd.DataFrame(data[1:], columns=data[0])
        return df

    def append_guest_to_gsheet(guest_row, sheet_id, creds_path, worksheet_name=None):
        scope = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive',
        ]
        # MODIFICATION START: Load credentials from Streamlit secrets if available
        if "GCP_SERVICE_ACCOUNT_JSON" in st.secrets:
            creds_json_str = st.secrets["GCP_SERVICE_ACCOUNT_JSON"]
            st.error(f"DEBUG (append_guest_to_gsheet): GCP_SERVICE_ACCOUNT_JSON is {len(creds_json_str)} chars long.") # DEBUG LINE
            creds_info = json.loads(creds_json_str)
            creds = Credentials.from_service_account_info(creds_info, scopes=scope)
        elif creds_path and os.path.exists(creds_path): # Fallback to local file
            creds = Credentials.from_service_account_file(creds_path, scopes=scope)
        else:
            st.error("Google Sheets credentials not found for append. Please set GCP_SERVICE_ACCOUNT_JSON secret in Streamlit Cloud or ensure local creds_path is valid.")
            raise Exception("Credentials not found for append_guest_to_gsheet")
        # MODIFICATION END
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(sheet_id)
        if worksheet_name:
            worksheet = sh.worksheet(worksheet_name)
        else:
            worksheet = sh.sheet1
        # Convert guest_row to list of strings
        row_to_append = [str(x) for x in guest_row]
        worksheet.append_row(row_to_append, value_input_option='USER_ENTERED')
        return sh.url

    def append_all_guests_to_gsheet(df_to_append, sheet_id_func, creds_path_func, worksheet_name_func=None):
        """
        Appends all rows from a DataFrame to a specific Google Sheet.
        """
        if df_to_append is None or df_to_append.empty:
            st.sidebar.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ th√™m v√†o Google Sheet.")
            return None

        scope = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive',
        ]
        creds_append_all = None
        if "GCP_SERVICE_ACCOUNT_JSON" in st.secrets:
            creds_json_str = st.secrets["GCP_SERVICE_ACCOUNT_JSON"]
            st.error(f"DEBUG (append_all_guests_to_gsheet): GCP_SERVICE_ACCOUNT_JSON is {len(creds_json_str)} chars long.") # DEBUG LINE
            creds_info = json.loads(creds_json_str)
            creds_append_all = Credentials.from_service_account_info(creds_info, scopes=scope)
        elif creds_path_func and os.path.exists(creds_path_func):
            creds_append_all = Credentials.from_service_account_file(creds_path_func, scopes=scope)
        else:
            st.sidebar.error("Google Sheets credentials not found for appending all guests. Please set GCP_SERVICE_ACCOUNT_JSON secret or ensure local creds_path is valid.")
            raise Exception("Credentials not found for append_all_guests_to_gsheet")

        gc = gspread.authorize(creds_append_all)
        sh = gc.open_by_key(sheet_id_func)
        
        if worksheet_name_func:
            try:
                worksheet = sh.worksheet(worksheet_name_func)
            except gspread.WorksheetNotFound:
                st.sidebar.error(f"Worksheet '{worksheet_name_func}' kh√¥ng t√¨m th·∫•y. Vui l√≤ng t·∫°o worksheet tr∆∞·ªõc ho·∫∑c ki·ªÉm tra l·∫°i t√™n.")
                return None # Or create it: worksheet = sh.add_worksheet(title=worksheet_name_func, rows="100", cols=max(20, len(df_to_append.columns)))
        else:
            worksheet = sh.sheet1 # Default to first sheet

        # Convert all data to string to avoid gspread issues with types like Timestamps
        list_of_lists_to_append = []
        for row_tuple in df_to_append.itertuples(index=False, name=None):
            list_of_lists_to_append.append([str(item) for item in row_tuple])
        
        if not list_of_lists_to_append:
            st.sidebar.info("Kh√¥ng c√≥ h√†ng n√†o ƒë·ªÉ th√™m sau khi chuy·ªÉn ƒë·ªïi.")
            return sh.url

        worksheet.append_rows(list_of_lists_to_append, value_input_option='USER_ENTERED')
        return sh.url

    if st.sidebar.button("‚¨ÜÔ∏è Upload l√™n Google Sheets", key="upload_gsheet_btn"):
        try:
            url = upload_to_gsheet(st.session_state['df'], sheet_id, creds_path_sidebar, worksheet_name)
            st.sidebar.success(f"ƒê√£ upload th√†nh c√¥ng! [M·ªü Google Sheet]({url})")
        except FileNotFoundError:
            st.sidebar.error(f"L·ªói: File credentials Google Sheets ('{creds_path_sidebar}') kh√¥ng t√¨m th·∫•y. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n.")
        except Exception as e:
            st.sidebar.error(f"L·ªói upload: {e}")

    if st.sidebar.button("‚ûï Th√™m kh√°ch cu·ªëi v√†o Google Sheets", key="append_gsheet_btn"):
        try:
            if st.session_state['df'] is not None and not st.session_state['df'].empty:
                last_row = st.session_state['df'].iloc[-1]
                url = append_guest_to_gsheet(last_row, sheet_id, creds_path_sidebar, worksheet_name)
                st.sidebar.success(f"ƒê√£ th√™m kh√°ch cu·ªëi v√†o Google Sheet! [M·ªü Google Sheet]({url})")
            else:
                st.sidebar.warning("Kh√¥ng c√≥ d·ªØ li·ªáu kh√°ch ƒë·ªÉ th√™m.")
        except FileNotFoundError:
            st.sidebar.error(f"L·ªói: File credentials Google Sheets ('{creds_path_sidebar}') kh√¥ng t√¨m th·∫•y. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n.")
        except Exception as e:
            st.sidebar.error(f"L·ªói khi th√™m kh√°ch: {e}")

    if st.sidebar.button("‚ûï‚ûï Th√™m T·∫§T C·∫¢ kh√°ch v√†o Google Sheets", key="append_all_guests_gsheet_btn"):
        try:
            if st.session_state['df'] is not None and not st.session_state['df'].empty:
                # Ensure all necessary columns for the sheet are present in df
                # This might require aligning df columns with expected sheet columns
                # For simplicity, we assume df is already correctly structured.
                url = append_all_guests_to_gsheet(st.session_state['df'], sheet_id, creds_path_sidebar, worksheet_name)
                if url: # append_all_guests_to_gsheet returns None on some errors
                    st.sidebar.success(f"ƒê√£ th√™m T·∫§T C·∫¢ {len(st.session_state['df'])} kh√°ch v√†o Google Sheet! [M·ªü Google Sheet]({url})")
            else:
                st.sidebar.warning("Kh√¥ng c√≥ d·ªØ li·ªáu kh√°ch ƒë·ªÉ th√™m.")
        except FileNotFoundError:
            st.sidebar.error(f"L·ªói: File credentials Google Sheets ('{creds_path_sidebar}') kh√¥ng t√¨m th·∫•y.")
        except Exception as e:
            st.sidebar.error(f"L·ªói khi th√™m t·∫•t c·∫£ kh√°ch: {e}")
            st.error(f"Chi ti·∫øt l·ªói append all: {traceback.format_exc()}")


    if st.sidebar.button("‚¨áÔ∏è T·∫£i d·ªØ li·ªáu t·ª´ Google Sheets", key="import_gsheet_btn"):
        try:
            df_imported = import_from_gsheet(sheet_id, creds_path_sidebar, worksheet_name)
            if not df_imported.empty:
                # Attempt to convert date columns to datetime
                for col in ['Check-in Date', 'Check-out Date', 'Booking Date']:
                    if col in df_imported.columns:
                        df_imported[col] = pd.to_datetime(df_imported[col], errors='coerce')
                st.session_state.df = df_imported
                st.session_state.active_bookings = df_imported[df_imported['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy() if 'T√¨nh tr·∫°ng' in df_imported.columns else df_imported.copy()
                st.session_state.room_types = get_cleaned_room_types(df_imported)
                st.sidebar.success("ƒê√£ t·∫£i v√† thay th·∫ø d·ªØ li·ªáu t·ª´ Google Sheets!")
                st.rerun()
            else:
                st.sidebar.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá trong Google Sheet.")
        except Exception as e:
            st.sidebar.error(f"L·ªói t·∫£i d·ªØ li·ªáu: {e}")

# --- SIDEBAR CU·ªêI TRANG ---
st.sidebar.markdown("---"); st.sidebar.subheader("Th√¥ng tin & Ti·ªán √≠ch")
st.sidebar.info("""üè® **H·ªá th·ªëng Qu·∫£n l√Ω Ph√≤ng Kh√°ch s·∫°n v3.0.5**\n\n**T√≠nh nƒÉng ch√≠nh:**\n- Theo d√µi t√¨nh tr·∫°ng ph√≤ng.\n- L·ªãch tr·ª±c quan.\n- Qu·∫£n l√Ω ƒë·∫∑t ph√≤ng chi ti·∫øt.\n- Ph√¢n t√≠ch doanh thu.\n- Th√™m ƒë·∫∑t ph√≤ng m·ªõi.\n- Xu·∫•t d·ªØ li·ªáu CSV & HTML.""")
if st.sidebar.button("üîÑ L√†m m·ªõi d·ªØ li·ªáu & T·∫£i l·∫°i t·ª´ ƒë·∫ßu", key="refresh_data_button_key_final_v2", help="X√≥a to√†n b·ªô d·ªØ li·ªáu v√† b·∫Øt ƒë·∫ßu l·∫°i."):
    keys_to_clear_sidebar = [
        'df', 'active_bookings', 'room_types', 'data_source', 'uploaded_file_name', 
        'last_action_message', 'current_date_calendar', 'selected_calendar_date', 
        'booking_sort_column', 'booking_sort_ascending', 'editing_booking_id_for_dialog',
        'add_form_check_in_final', 'add_form_check_out_final', 
        'message_templates_dict', 'raw_template_content_for_download' 
    ]
    for key in list(st.session_state.keys()):
        if key.startswith("select_booking_cb_") or key.startswith("dialog_cin_") or key.startswith("dialog_cout_") or key.startswith("tpl_cat_"):
            del st.session_state[key]
            
    for key_to_del_sidebar in keys_to_clear_sidebar:
        if key_to_del_sidebar in st.session_state: 
            del st.session_state[key_to_del_sidebar]
    st.rerun()

if active_bookings is not None and not active_bookings.empty and room_types:
    st.sidebar.markdown("---"); st.sidebar.subheader("üîî Th√¥ng b√°o nhanh")
    notifications_list_sidebar = []
    today_sb_notif_date = datetime.date.today()
    tomorrow_sb_notif_date = today_sb_notif_date + timedelta(days=1)
    for room_type_alert_sb_item in room_types: 
        availability_sb_room_tomorrow = get_room_availability(tomorrow_sb_notif_date, active_bookings, [room_type_alert_sb_item], ROOM_UNIT_PER_ROOM_TYPE)
        available_tomorrow_count = availability_sb_room_tomorrow.get(room_type_alert_sb_item, ROOM_UNIT_PER_ROOM_TYPE)
        room_display_name_sb = room_type_alert_sb_item[:20] + "..." if len(room_type_alert_sb_item) > 20 else room_type_alert_sb_item
        if available_tomorrow_count == 0: notifications_list_sidebar.append(f"üî¥ **{room_display_name_sb}**: H·∫æT PH√íNG ng√†y mai!")
        elif available_tomorrow_count == 1: notifications_list_sidebar.append(f"üü° **{room_display_name_sb}**: Ch·ªâ c√≤n 1 ph√≤ng ({available_tomorrow_count} ƒë∆°n v·ªã) ng√†y mai.")
        elif available_tomorrow_count < ROOM_UNIT_PER_ROOM_TYPE : notifications_list_sidebar.append(f"üü† **{room_display_name_sb}**: C√≤n {available_tomorrow_count} ph√≤ng ng√†y mai.")

    today_activity_sb_data = get_daily_activity(today_sb_notif_date, active_bookings)
    if today_activity_sb_data['check_in']: notifications_list_sidebar.append(f"üõ¨ **{len(today_activity_sb_data['check_in'])}** check-in h√¥m nay.")
    if today_activity_sb_data['check_out']: notifications_list_sidebar.append(f"üõ´ **{len(today_activity_sb_data['check_out'])}** check-out h√¥m nay.")
    
    overall_tomorrow_info = get_overall_calendar_day_info(tomorrow_sb_notif_date, active_bookings, TOTAL_HOTEL_CAPACITY)
    if overall_tomorrow_info['available_units'] == 0:
        notifications_list_sidebar.append(f"üÜò **TO√ÄN KH√ÅCH S·∫†N**: H·∫æT PH√íNG ng√†y mai!")
    elif overall_tomorrow_info['available_units'] == 1:
        notifications_list_sidebar.append(f"‚ö†Ô∏è **TO√ÄN KH√ÅCH S·∫†N**: Ch·ªâ c√≤n 1 ph√≤ng TR·ªêNG ng√†y mai.")

    if notifications_list_sidebar:
        for notif_item_sb in notifications_list_sidebar: st.sidebar.warning(notif_item_sb)
    else: st.sidebar.success("‚úÖ M·ªçi ho·∫°t ƒë·ªông ƒë·ªÅu ·ªïn ƒë·ªãnh!")

st.sidebar.markdown("---"); st.sidebar.subheader("Xu·∫•t d·ªØ li·ªáu")
df_main_export_final = st.session_state.get('df')
if df_main_export_final is not None and not df_main_export_final.empty:
    df_export_final_copy_csv = df_main_export_final.copy()
    date_columns_to_format_export = ['Check-in Date', 'Check-out Date', 'Booking Date']
    for col_date_export_final_item in date_columns_to_format_export:
        if col_date_export_final_item in df_export_final_copy_csv.columns:
            df_export_final_copy_csv[col_date_export_final_item] = pd.to_datetime(df_export_final_copy_csv[col_date_export_final_item], errors='coerce').dt.strftime('%d/%m/%Y')
    try:
        full_csv_data_final_export = df_export_final_copy_csv.to_csv(index=False).encode('utf-8-sig')
        st.sidebar.download_button(label="üìã T·∫£i xu·ªëng to√†n b·ªô d·ªØ li·ªáu (CSV)", data=full_csv_data_final_export, file_name=f"DanhSachDatPhong_{datetime.date.today().strftime('%Y%m%d')}.csv", mime="text/csv", key="download_full_csv_key_final_v2", help="T·∫£i xu·ªëng to√†n b·ªô d·ªØ li·ªáu ƒë·∫∑t ph√≤ng hi·ªán t·∫°i.")
    except Exception as e_export_final: st.sidebar.error(f"L·ªói khi chu·∫©n b·ªã file CSV: {e_export_final}")

    try:
        df_html_export = df_main_export_final.copy()
        display_columns_for_html = [
            'S·ªë ƒë·∫∑t ph√≤ng', 'T√™n ng∆∞·ªùi ƒë·∫∑t', 'T√™n ch·ªó ngh·ªâ',
            'Check-in Date', 'Check-out Date', 'Stay Duration',
            'Gi√° m·ªói ƒë√™m', 'T·ªïng thanh to√°n', 'T√¨nh tr·∫°ng', 'Booking Date'
        ]
        existing_display_columns_html = [col for col in display_columns_for_html if col in df_html_export.columns]

        df_html_export_subset = df_html_export[existing_display_columns_html].copy() if existing_display_columns_html else df_html_export.copy()

        for col_date_html in date_columns_to_format_export:
            if col_date_html in df_html_export_subset.columns:
                df_html_export_subset.loc[:, col_date_html] = pd.to_datetime(df_html_export_subset[col_date_html], errors='coerce').dt.strftime('%d/%m/%Y')

        df_html_export_subset_renamed = df_html_export_subset.rename(columns=base_display_columns_map_mgmt)

        html_data = df_html_export_subset_renamed.to_html(index=False, border=1, classes="dataframe_html_export table table-striped table-hover", justify="center", escape=False)

        html_string_final = f"""
        <html>
            <head>
                <title>Danh S√°ch ƒê·∫∑t Ph√≤ng</title>
                <meta charset="UTF-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 20px; }}
                    .dataframe_html_export {{
                        border-collapse: collapse;
                        width: 90%;
                        margin: 20px auto;
                        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    }}
                    .dataframe_html_export th, .dataframe_html_export td {{
                        border: 1px solid #ddd;
                        padding: 10px;
                        text-align: left;
                    }}
                    .dataframe_html_export th {{
                        background-color: #f2f2f2;
                        font-weight: bold;
                    }}
                    .dataframe_html_export tr:nth-child(even) {{background-color: #f9f9f9;}}
                    .dataframe_html_export tr:hover {{background-color: #f1f1f1;}}
                    h1 {{ text-align: center; color: #333; }}
                </style>
            </head>
            <body>
                <h1>Danh S√°ch ƒê·∫∑t Ph√≤ng - Ng√†y {datetime.date.today().strftime('%d/%m/%Y')}</h1>
                {html_data}
            </body>
        </html>
        """

        st.sidebar.download_button(
            label="üåê T·∫£i xu·ªëng to√†n b·ªô d·ªØ li·ªáu (HTML)",
            data=html_string_final.encode('utf-8'),
            file_name=f"DanhSachDatPhong_{datetime.date.today().strftime('%Y%m%d')}.html",
            mime="text/html",
            key="download_full_html_key",
            help="T·∫£i xu·ªëng to√†n b·ªô d·ªØ li·ªáu ƒë·∫∑t ph√≤ng hi·ªán t·∫°i d∆∞·ªõi d·∫°ng file HTML."
        )
    except Exception as e_export_html:
        st.sidebar.error(f"L·ªói khi chu·∫©n b·ªã file HTML ƒë·ªÉ xu·∫•t: {e_export_html}")

else:
    st.sidebar.info("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.")

# --- H√ÄM H·ªñ TR·ª¢ CHO TAB KH√ÅCH M·ªöI HTML ---
@st.cache_data
def parse_customer_html(uploaded_html_file) -> Optional[pd.DataFrame]:
    """
    Ph√¢n t√≠ch file HTML ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu kh√°ch h√†ng t·ª´ b·∫£ng.
    H√†m n√†y t√¨m ki·∫øm b·∫£ng c√≥ class 'cdd0659f86' ho·∫∑c b·∫£ng ƒë·∫ßu ti√™n n·∫øu kh√¥ng t√¨m th·∫•y.
    """
    if not BS4_AVAILABLE:
        st.error("Th∆∞ vi·ªán BeautifulSoup4 kh√¥ng c√≥ s·∫µn. Kh√¥ng th·ªÉ x·ª≠ l√Ω file HTML.")
        return None
    try:
        st.info(f"ƒêang x·ª≠ l√Ω file HTML kh√°ch h√†ng: {uploaded_html_file.name}...")
        soup = BeautifulSoup(uploaded_html_file.read(), 'html.parser')
        
        # Th·ª≠ t√¨m b·∫£ng ch√≠nh d·ª±a tr√™n class (v√≠ d·ª• t·ª´ file g·ªëc)
        table = soup.find('table', class_='cdd0659f86') # ƒêi·ªÅu ch·ªânh class n·∫øu c·∫ßn
        if not table:
            st.warning("Kh√¥ng t√¨m th·∫•y b·∫£ng v·ªõi class 'cdd0659f86'. ƒêang th·ª≠ t√¨m th·∫ª <table> ƒë·∫ßu ti√™n...")
            table = soup.find('table')
            if not table:
                st.error("Kh√¥ng t√¨m th·∫•y th·∫ª <table> n√†o trong file HTML.")
                return None
        
        parsed_rows_html = []
        headers_from_html = []
        
        header_row = table.find('thead')
        if header_row:
            header_row_tr = header_row.find('tr')
            if header_row_tr: headers_from_html = [th.get_text(strip=True) for th in header_row_tr.find_all('th')]
        
        body = table.find('tbody')
        if not body:
            # N·∫øu kh√¥ng c√≥ tbody, th·ª≠ t√¨m tr tr·ª±c ti·∫øp trong table (m·ªôt s·ªë HTML c√≥ th·ªÉ kh√¥ng c√≥ tbody)
            st.warning("Kh√¥ng t√¨m th·∫•y <tbody>, ƒëang th·ª≠ t√¨m <tr> tr·ª±c ti·∫øp trong <table>.")
            rows_in_table = table.find_all('tr')
            if not headers_from_html and rows_in_table: #N·∫øu kh√¥ng c√≥ thead, l·∫•y h√†ng ƒë·∫ßu ti√™n l√†m header
                 first_row_cells = rows_in_table[0].find_all(['th', 'td'])
                 headers_from_html = [cell.get_text(strip=True) for cell in first_row_cells]
                 body_rows_start_index = 1 # B·ªè qua h√†ng header
            else:
                 body_rows_start_index = 0 # N·∫øu c√≥ thead, x·ª≠ l√Ω t·∫•t c·∫£ tr trong table l√† body

            for row_idx, row in enumerate(rows_in_table[body_rows_start_index:]):
                cells = row.find_all(['td', 'th'])
                row_data = {}
                for i, cell in enumerate(cells):
                    heading = cell.get('data-heading') # M·ªôt s·ªë b·∫£ng d√πng data-heading
                    if not heading and i < len(headers_from_html): heading = headers_from_html[i]
                    elif not heading: heading = f"C·ªôt {i+1}"
                    
                    # Enhanced logic for this path
                    text_content = cell.get_text(separator=" ", strip=True)
                    guest_name_headers = ["t√™n kh√°ch", "h·ªç v√† t√™n", "guest name", "customer name", "t√™n ng∆∞·ªùi ƒë·∫∑t"]
                    is_guest_name_col = any(h.lower() in heading.lower() for h in guest_name_headers)

                    if is_guest_name_col:
                        link_tag = cell.find('a')
                        name_text = link_tag.get_text(strip=True) if link_tag else text_content
                        if "genius" in name_text.lower():
                            row_data["Th√†nh vi√™n Genius"] = "C√≥"
                            name_text = re.sub(r'(?i)genius', '', name_text).strip()
                        else:
                            genius_svg = cell.find('svg', alt=lambda x: x and 'genius' in x.lower())
                            row_data["Th√†nh vi√™n Genius"] = "C√≥" if genius_svg else "Kh√¥ng"
                        name_text = re.sub(r'(?i)(1 kh√°ch|2 kh√°ch|2 ng∆∞·ªùi l·ªõn|\d+ adults?)', '', name_text).strip()
                        row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"] = name_text
                        if heading not in row_data : row_data[heading] = text_content
                    elif "th√†nh vi√™n genius" in heading.lower() or "genius member" in heading.lower():
                        row_data["Th√†nh vi√™n Genius"] = "C√≥" if "c√≥" in text_content.lower() or "yes" in text_content.lower() else "Kh√¥ng"
                    else:
                        row_data[heading] = text_content
                if row_data: parsed_rows_html.append(row_data)

        else: # N·∫øu c√≥ tbody
            for row_idx, row in enumerate(body.find_all('tr')):
                cells = row.find_all(['td', 'th'])
                row_data = {}
                for i, cell in enumerate(cells):
                    heading = cell.get('data-heading')
                    if not heading and i < len(headers_from_html): heading = headers_from_html[i]
                    elif not heading: heading = f"C·ªôt {i+1}"
                    
                    # Enhanced logic for the tbody path
                    text_content = cell.get_text(separator=" ", strip=True)
                    guest_name_headers = ["t√™n kh√°ch", "h·ªç v√† t√™n", "guest name", "customer name", "t√™n ng∆∞·ªùi ƒë·∫∑t"]
                    is_guest_name_col = any(h.lower() in heading.lower() for h in guest_name_headers)

                    if is_guest_name_col:
                        link_tag = cell.find('a')
                        name_text = link_tag.get_text(strip=True) if link_tag else text_content
                        if "genius" in name_text.lower():
                            row_data["Th√†nh vi√™n Genius"] = "C√≥"
                            name_text = re.sub(r'(?i)genius', '', name_text).strip()
                        else:
                            genius_svg = cell.find('svg', alt=lambda x: x and 'genius' in x.lower())
                            row_data["Th√†nh vi√™n Genius"] = "C√≥" if genius_svg else "Kh√¥ng"
                        name_text = re.sub(r'(?i)(1 kh√°ch|2 kh√°ch|2 ng∆∞·ªùi l·ªõn|\d+ adults?)', '', name_text).strip()
                        row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"] = name_text
                        if heading not in row_data : row_data[heading] = text_content
                    elif "th√†nh vi√™n genius" in heading.lower() or "genius member" in heading.lower():
                        row_data["Th√†nh vi√™n Genius"] = "C√≥" if "c√≥" in text_content.lower() or "yes" in text_content.lower() else "Kh√¥ng"
                    else:
                        row_data[heading] = text_content
                if row_data: parsed_rows_html.append(row_data)

        if not parsed_rows_html:
            st.error("Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c d√≤ng d·ªØ li·ªáu n√†o t·ª´ b·∫£ng HTML.")
            return None
            
        df_loaded_html_customer = pd.DataFrame(parsed_rows_html)
        st.success(f"ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng file HTML kh√°ch h√†ng: {uploaded_html_file.name}. T√¨m th·∫•y {len(df_loaded_html_customer)} d√≤ng.")
        return df_loaded_html_customer

    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω file HTML kh√°ch h√†ng {uploaded_html_file.name}: {e}")
        import traceback
        st.error(f"Chi ti·∫øt l·ªói: {traceback.format_exc()}")
        return None

# --- TAB KH√ÅCH M·ªöI HTML ---
with tab_customer_html:
    st.header("üë• Qu·∫£n l√Ω Kh√°ch m·ªõi t·ª´ HTML")
    
    uploaded_customer_html_file = st.file_uploader("T·∫£i l√™n file HTML ch·ª©a danh s√°ch kh√°ch h√†ng m·ªõi", type=['html', 'htm'], key="customer_html_uploader")

    if uploaded_customer_html_file is not None:
        df_customer_html = parse_customer_html(uploaded_customer_html_file)
        if df_customer_html is not None and not df_customer_html.empty:
            st.session_state.customer_html_data = df_customer_html
        else:
            st.session_state.customer_html_data = None # X√≥a d·ªØ li·ªáu c≈© n·∫øu file m·ªõi kh√¥ng h·ª£p l·ªá

    if st.session_state.customer_html_data is not None and not st.session_state.customer_html_data.empty:
        st.subheader("Danh s√°ch kh√°ch h√†ng t·ª´ HTML")
        st.dataframe(st.session_state.customer_html_data, use_container_width=True)
        
        # Th√™m c√°c n√∫t ho·∫∑c ch·ª©c nƒÉng qu·∫£n l√Ω ·ªü ƒë√¢y n·∫øu c·∫ßn
        st.markdown("---")
        st.subheader("Ch·ª©c nƒÉng qu·∫£n l√Ω (v√≠ d·ª•)")

        if st.button("‚ûï G·ªôp kh√°ch m·ªõi v√†o DS ƒë·∫∑t ph√≤ng ch√≠nh", key="merge_new_customers_to_main_bookings"):
            if st.session_state.customer_html_data is not None and not st.session_state.customer_html_data.empty:
                if 'T√™n ng∆∞·ªùi ƒë·∫∑t' not in st.session_state.customer_html_data.columns:
                    st.error("L·ªói: File HTML ƒë∆∞·ª£c t·∫£i l√™n kh√¥ng c√≥ c·ªôt 'T√™n ng∆∞·ªùi ƒë·∫∑t' r√µ r√†ng. Vui l√≤ng ki·ªÉm tra c·∫•u tr√∫c file HTML.")
                else:
                    main_df = st.session_state.get('df', pd.DataFrame(columns=ALL_REQUIRED_COLS))
                    if main_df is None or main_df.empty:
                         main_df = pd.DataFrame(columns=ALL_REQUIRED_COLS)
                    
                    existing_guest_names = set()
                    if 'T√™n ng∆∞·ªùi ƒë·∫∑t' in main_df.columns:
                        existing_guest_names = set(main_df['T√™n ng∆∞·ªùi ƒë·∫∑t'].astype(str).str.strip().str.title().dropna().unique())
                    
                    new_customers_appended_count = 0
                    duplicates_skipped_count = 0
                    new_records_list = []

                    default_room_type_add = room_types[0] if room_types else "N/A (Kh√¥ng c√≥ lo·∫°i ph√≤ng)"
                    default_location_add = "N/A (T·ª´ HTML)"
                    if main_df is not None and not main_df.empty and 'T√™n ch·ªó ngh·ªâ' in main_df.columns and 'V·ªã tr√≠' in main_df.columns and default_room_type_add != "N/A (Kh√¥ng c√≥ lo·∫°i ph√≤ng)":
                        room_specific_locs = main_df[main_df['T√™n ch·ªó ngh·ªâ'] == default_room_type_add]
                        if not room_specific_locs.empty:
                            unique_locs = room_specific_locs['V·ªã tr√≠'].dropna().unique()
                            if len(unique_locs) > 0: default_location_add = str(unique_locs[0])

                    for index, new_customer_row in st.session_state.customer_html_data.iterrows():
                        html_guest_name = new_customer_row.get('T√™n ng∆∞·ªùi ƒë·∫∑t')
                        if pd.isna(html_guest_name) or str(html_guest_name).strip() == "":
                            st.warning(f"B·ªè qua d√≤ng {index+1} t·ª´ HTML do thi·∫øu t√™n kh√°ch.")
                            continue
                        
                        normalized_html_guest_name = str(html_guest_name).strip().title()

                        if normalized_html_guest_name not in existing_guest_names:
                            new_booking_id = f"HTML{datetime.datetime.now().strftime('%y%m%d%H%M%S')}{index:02d}"
                            genius_status_html = new_customer_row.get('Th√†nh vi√™n Genius', "Kh√¥ng") 
                            if pd.isna(genius_status_html): genius_status_html = "Kh√¥ng"

                            record = {
                                'T√™n ch·ªó ngh·ªâ': default_room_type_add,
                                'V·ªã tr√≠': default_location_add,
                                'T√™n ng∆∞·ªùi ƒë·∫∑t': normalized_html_guest_name,
                                'Th√†nh vi√™n Genius': genius_status_html,
                                'Ng√†y ƒë·∫øn': f"ng√†y {datetime.date.today().day} th√°ng {datetime.date.today().month} nƒÉm {datetime.date.today().year}", # Placeholder
                                'Ng√†y ƒëi': f"ng√†y {(datetime.date.today() + timedelta(days=1)).day} th√°ng {(datetime.date.today() + timedelta(days=1)).month} nƒÉm {(datetime.date.today() + timedelta(days=1)).year}", # Placeholder
                                'ƒê∆∞·ª£c ƒë·∫∑t v√†o': f"ng√†y {datetime.date.today().day} th√°ng {datetime.date.today().month} nƒÉm {datetime.date.today().year}",
                                'T√¨nh tr·∫°ng': "OK (M·ªõi t·ª´ HTML)",
                                'T·ªïng thanh to√°n': 0.0,
                                'Hoa h·ªìng': 0.0,
                                'Ti·ªÅn t·ªá': "VND",
                                'S·ªë ƒë·∫∑t ph√≤ng': new_booking_id,
                                'Check-in Date': pd.Timestamp(datetime.date.today()), # Placeholder
                                'Check-out Date': pd.Timestamp(datetime.date.today() + timedelta(days=1)), # Placeholder
                                'Booking Date': pd.Timestamp(datetime.date.today()),
                                'Stay Duration': 1, # Placeholder
                                'Gi√° m·ªói ƒë√™m': 0.0
                            }
                            # Ensure all required columns are present
                            for req_col in ALL_REQUIRED_COLS:
                                if req_col not in record:
                                    if "Date" in req_col: record[req_col] = pd.NaT
                                    elif "Duration" in req_col: record[req_col] = 0
                                    elif req_col in ['T·ªïng thanh to√°n', 'Hoa h·ªìng', 'Gi√° m·ªói ƒë√™m']: record[req_col] = 0.0
                                    else: record[req_col] = "N/A"
                            
                            new_records_list.append(record)
                            existing_guest_names.add(normalized_html_guest_name) # Add to set to prevent adding same new customer multiple times if they appear >1 in HTML
                            new_customers_appended_count += 1
                        else:
                            duplicates_skipped_count += 1
                    
                    if new_records_list:
                        new_bookings_df = pd.DataFrame(new_records_list)
                        st.session_state.df = pd.concat([main_df, new_bookings_df], ignore_index=True)
                        st.session_state.active_bookings = st.session_state.df[st.session_state.df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy()
                        st.session_state.room_types = get_cleaned_room_types(st.session_state.df)
                        st.session_state.last_action_message = f"ƒê√£ g·ªôp th√†nh c√¥ng! Th√™m {new_customers_appended_count} kh√°ch m·ªõi. B·ªè qua {duplicates_skipped_count} kh√°ch tr√πng t√™n."
                        st.success(st.session_state.last_action_message)
                         # Optionally clear HTML data after merge
                        # st.session_state.customer_html_data = None 
                        st.rerun()
                    elif duplicates_skipped_count > 0:
                        st.info(f"Kh√¥ng c√≥ kh√°ch h√†ng m·ªõi n√†o ƒë∆∞·ª£c th√™m. {duplicates_skipped_count} kh√°ch h√†ng ƒë∆∞·ª£c t√¨m th·∫•y ƒë√£ t·ªìn t·∫°i trong danh s√°ch ch√≠nh.")
                    else:
                        st.info("Kh√¥ng c√≥ kh√°ch h√†ng m·ªõi n√†o trong file HTML ƒë·ªÉ th√™m ho·∫∑c t·∫•t c·∫£ ƒë·ªÅu tr√πng t√™n.")
            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu kh√°ch h√†ng t·ª´ HTML ƒë·ªÉ g·ªôp. Vui l√≤ng t·∫£i file tr∆∞·ªõc.")

        if st.button("X√≥a d·ªØ li·ªáu kh√°ch ƒë√£ t·∫£i", key="clear_customer_html_data"):
            st.session_state.customer_html_data = None
            st.rerun()

    elif uploaded_customer_html_file is None:
        st.info("Vui l√≤ng t·∫£i l√™n file HTML ƒë·ªÉ xem v√† qu·∫£n l√Ω kh√°ch h√†ng.")
    else: # uploaded_customer_html_file is not None but processing failed
        st.warning("Kh√¥ng th·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu kh√°ch h√†ng do l·ªói x·ª≠ l√Ω file HTML ho·∫∑c file kh√¥ng ch·ª©a d·ªØ li·ªáu h·ª£p l·ªá.")
