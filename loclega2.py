"""
üè® HOTEL ROOM MANAGEMENT SYSTEM
=====================================
H·ªá th·ªëng qu·∫£n l√Ω ph√≤ng kh√°ch s·∫°n hi·ªán ƒë·∫°i v·ªõi giao di·ªán th√¢n thi·ªán

INSTALLATION REQUIREMENTS:
pip install streamlit pandas numpy plotly openpyxl xlrd pypdf2 beautifulsoup4 Pillow pytesseract python-dateutil google-generativeai toml

Author: Optimized Version (Reviewed and Enhanced by Gemini)
Version: 3.2.6 (Final GSheet Integration for Messages)
"""

import streamlit as st
import pandas as pd
import numpy as np
import datetime
import plotly.graph_objects as go
import plotly.express as px
import io
import calendar
from datetime import timedelta
import re
import xlrd # C·∫ßn thi·∫øt cho file .xls c≈©
import openpyxl # C·∫ßn thi·∫øt cho file .xlsx hi·ªán ƒë·∫°i
import csv
from typing import Dict, List, Optional, Tuple, Any
import asyncio # Added for running async Telegram function
import base64
import os # Import the os library
import streamlit.components.v1 as components # Import for custom components

# Google Sheets API imports
import gspread
from google.oauth2.service_account import Credentials

import telegram # Added for Telegram bot functionality

# --- New imports for Image Processing ---
from PIL import Image
import pytesseract
from dateutil import parser as date_parser
# --- End New imports ---

import json
import google.generativeai as genai
import toml # Import the toml library


# --- TELEGRAM BOT CONFIGURATION ---
TELEGRAM_BOT_TOKEN = "7998311603:AAGFoxqsbBe5nhocp9Tco635o9tbdT4DTDI" # User provided test token
TELEGRAM_CHAT_ID = "1189687917" # Corrected Chat ID based on user's getUpdates output

# --- TELEGRAM BOT FUNCTION ---
async def send_telegram_message(bot_token: str, chat_id: str, message: str) -> bool:
    try:
        bot = telegram.Bot(token=bot_token)
        await bot.send_message(chat_id=chat_id, text=message)
        print(f"Telegram message sent to chat ID {chat_id[:4]}****.")
        return True
    except telegram.error.TelegramError as e:
        print(f"TelegramError sending message: {e}")
        return False
    except Exception as e:
        print(f"Unexpected error sending Telegram message: {e}")
        return False

async def send_daily_status_telegram():
    today_dt = datetime.date.today()
    message_parts = [f"üì¢ C·∫≠p nh·∫≠t Kh√°ch s·∫°n - {today_dt.strftime('%d/%m/%Y')} üì¢\n"]
    active_bookings_df = st.session_state.get('active_bookings')
    if active_bookings_df is None or active_bookings_df.empty:
        message_parts.append("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫∑t ph√≤ng ƒë·ªÉ t·∫°o b√°o c√°o.")
    else:
        overall_info = get_overall_calendar_day_info(today_dt, active_bookings_df, TOTAL_HOTEL_CAPACITY)
        message_parts.append("üè® T√¨nh tr·∫°ng Ph√≤ng T·ªïng quan:")
        message_parts.append(f"- T·ªïng s·ªë ph√≤ng c√≥ kh√°ch: {overall_info['occupied_units']} / {TOTAL_HOTEL_CAPACITY}")
        message_parts.append(f"- Ph√≤ng tr·ªëng: {overall_info['available_units']}\n")
        daily_activity = get_daily_activity(today_dt, active_bookings_df)
        message_parts.append("‚û°Ô∏è Kh√°ch Check-in H√¥m Nay:")
        if daily_activity['check_in']:
            for guest_ci in daily_activity['check_in']:
                message_parts.append(f"- {guest_ci.get('name', 'N/A')} ({guest_ci.get('room_type', 'N/A')}) - M√£ ƒêP: {guest_ci.get('booking_id','N/A')}")
        else:
            message_parts.append("Kh√¥ng c√≥ kh√°ch check-in h√¥m nay.")
        message_parts.append("")
        message_parts.append("‚¨ÖÔ∏è Kh√°ch Check-out H√¥m Nay:")
        if daily_activity['check_out']:
            for guest_co in daily_activity['check_out']:
                message_parts.append(f"- {guest_co.get('name', 'N/A')} ({guest_co.get('room_type', 'N/A')}) - M√£ ƒêP: {guest_co.get('booking_id','N/A')}")
        else:
            message_parts.append("Kh√¥ng c√≥ kh√°ch check-out h√¥m nay.")
    full_message = "\n".join(message_parts)
    if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
        success = await send_telegram_message(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, full_message)
        if success:
            st.sidebar.success("ƒê√£ g·ª≠i c·∫≠p nh·∫≠t h√†ng ng√†y qua Telegram!")
    else:
        st.sidebar.warning("Thi·∫øu Token ho·∫∑c Chat ID c·ªßa Telegram ƒë·ªÉ g·ª≠i tin nh·∫Øn.")

async def send_room_type_details_telegram():
    today_dt = datetime.date.today()
    message_parts = [f"üè° Chi Ti·∫øt T√¨nh Tr·∫°ng Lo·∫°i Ph√≤ng - {today_dt.strftime('%d/%m/%Y')} üè°\n"]
    active_bookings_df = st.session_state.get('active_bookings')
    all_room_types_list = st.session_state.get('room_types', [])
    if active_bookings_df is None or active_bookings_df.empty or not all_room_types_list:
        message_parts.append("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫∑t ph√≤ng ho·∫∑c lo·∫°i ph√≤ng ƒë·ªÉ t·∫°o b√°o c√°o chi ti·∫øt.")
    else:
        availability_per_type = get_room_availability(today_dt, active_bookings_df, all_room_types_list, ROOM_UNIT_PER_ROOM_TYPE)
        if not availability_per_type:
            message_parts.append("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ph√≤ng tr·ªëng chi ti·∫øt.")
        else:
            for room_type, available_units in availability_per_type.items():
                total_units_for_type = ROOM_UNIT_PER_ROOM_TYPE
                message_parts.append(f"- {room_type}: {available_units}/{total_units_for_type} tr·ªëng")
    full_message = "\n".join(message_parts)
    if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
        success = await send_telegram_message(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, full_message)
        if success:
            st.sidebar.success("ƒê√£ g·ª≠i chi ti·∫øt lo·∫°i ph√≤ng qua Telegram!")
    else:
        st.sidebar.warning("Thi·∫øu Token ho·∫∑c Chat ID c·ªßa Telegram ƒë·ªÉ g·ª≠i chi ti·∫øt lo·∫°i ph√≤ng.")

# H·∫±ng s·ªë to√†n c·ª•c
ROOM_UNIT_PER_ROOM_TYPE = 4
TOTAL_HOTEL_CAPACITY = 4

# ƒê·ªãnh nghƒ©a c√°c c·ªôt
REQUIRED_APP_COLS_BASE = [
    'T√™n ch·ªó ngh·ªâ', 'V·ªã tr√≠', 'T√™n ng∆∞·ªùi ƒë·∫∑t', 'Th√†nh vi√™n Genius',
    'Ng√†y ƒë·∫øn', 'Ng√†y ƒëi', 'ƒê∆∞·ª£c ƒë·∫∑t v√†o',
    'T√¨nh tr·∫°ng', 'T·ªïng thanh to√°n', 'Hoa h·ªìng', 'Ti·ªÅn t·ªá', 'S·ªë ƒë·∫∑t ph√≤ng',
    'Check-in Date', 'Check-out Date', 'Booking Date', 'Stay Duration'
]
REQUIRED_APP_COLS_DERIVED = ['Gi√° m·ªói ƒë√™m']
ALL_REQUIRED_COLS = REQUIRED_APP_COLS_BASE + REQUIRED_APP_COLS_DERIVED + ['Ng∆∞·ªùi thu ti·ªÅn']

# Ki·ªÉm tra th∆∞ vi·ªán t√πy ch·ªçn
try:
    from PyPDF2 import PdfReader
    PYPDF2_AVAILABLE = True
except ImportError:
    PYPDF2_AVAILABLE = False
try:
    from bs4 import BeautifulSoup
    BS4_AVAILABLE = True
except ImportError:
    BS4_AVAILABLE = False

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="üè® Hotel Management Pro",
    page_icon="üè®",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://www.example.com/help',
        'Report a bug': "https://www.example.com/bugs",
        'About': "# Hotel Management System v3.2.6\nƒê√£ t√≠ch h·ª£p Google Sheets cho M·∫´u tin nh·∫Øn."
    }
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    :root {
        --primary-color: #1f77b4; --secondary-color: #ff7f0e; --success-color: #2ca02c;
        --warning-color: #ffbb00; --danger-color: #d62728; --info-color: #17a2b8;
        --light-bg: #f8f9fa; --dark-bg: #343a40;
    }
    .css-1d391kg { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
    .metric-card { background: white; padding: 1.5rem; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); border-left: 5px solid var(--primary-color); margin-bottom: 1rem; transition: transform 0.2s ease, box-shadow 0.2s ease; }
    .metric-card:hover { transform: translateY(-3px); box-shadow: 0 4px 20px rgba(0,0,0,0.15); }
    .stButton > button { border-radius: 20px; border: none; padding: 0.6rem 1.2rem; font-weight: 600; transition: all 0.3s ease; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
    .stButton > button:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0,0,0,0.2); }
    .calendar-grid { display: grid; grid-template-columns: repeat(7, 1fr); gap: 5px; text-align: center; font-family: 'Segoe UI', sans-serif; } .day-header { font-weight: bold; padding: 8px 0; background-color: #e9ecef; color: #495057; border-radius: 5px; font-size: 0.9em; } .day-cell { border: 1px solid #dee2e6; padding: 8px 2px; min-height: 75px; display: flex; flex-direction: column; justify-content: space-between; align-items: center; border-radius: 5px; cursor: pointer; transition: background-color 0.2s, box-shadow 0.2s ease; position: relative; background-color: #fff; } .day-cell:hover { background-color: #f8f9fa; box-shadow: 0 0 5px rgba(0,0,0,0.1); } .day-number { font-size: 1.1em; font-weight: bold; margin-bottom: 3px; color: #343a40; } .day-status { font-size: 0.75em; color: #6c757d; padding: 0 2px; word-break: break-word; } .dot-indicator { font-size: 1.8em; line-height: 0.5; margin-top: -2px; margin-bottom: 2px; } .dot-green { color: var(--success-color); } .dot-orange { color: var(--warning-color); } .day-disabled { color: #adb5bd; background-color: #f1f3f5; cursor: not-allowed; } .day-today { border: 2px solid var(--primary-color); background-color: #e7f3ff; } .day-selected { background-color: #cfe2ff; border: 2px solid #0a58ca; } .guest-separator { border-bottom: 1px dashed #ced4da; margin: 4px 0; width: 90%; align-self: center; }
</style>
""", unsafe_allow_html=True)

# --- H√ÄM H·ªñ TR·ª¢ ---
def parse_app_standard_date(date_input: Any) -> Optional[datetime.date]:
    if pd.isna(date_input): return None
    if isinstance(date_input, datetime.datetime): return date_input.date()
    if isinstance(date_input, datetime.date): return date_input
    if isinstance(date_input, pd.Timestamp): return date_input.date()
    date_str = str(date_input).strip().lower()
    try:
        if re.match(r"ng√†y\s*\d{1,2}\s*th√°ng\s*\d{1,2}\s*nƒÉm\s*\d{4}", date_str):
            m = re.search(r"ng√†y\s*(\d{1,2})\s*th√°ng\s*(\d{1,2})\s*nƒÉm\s*(\d{4})", date_str)
            if m: return datetime.date(int(m.group(3)), int(m.group(2)), int(m.group(1)))
        parsed_date = pd.to_datetime(date_str, errors='coerce', dayfirst=True).date()
        if parsed_date: return parsed_date
        parsed_date = pd.to_datetime(date_str, errors='coerce', dayfirst=False).date()
        if parsed_date: return parsed_date
    except Exception: pass
    return None

def convert_display_date_to_app_format(display_date_input: Any) -> Optional[str]:
    if pd.isna(display_date_input): return None
    if isinstance(display_date_input, (datetime.datetime, datetime.date, pd.Timestamp)):
        return f"ng√†y {display_date_input.day} th√°ng {display_date_input.month} nƒÉm {display_date_input.year}"
    cleaned_date_str = str(display_date_input).replace(',', '').strip().lower()
    m_vietnamese = re.search(r"(\d{1,2})\s*th√°ng\s*(\d{1,2})\s*(\d{4})", cleaned_date_str)
    if m_vietnamese:
        return f"ng√†y {m_vietnamese.group(1)} th√°ng {m_vietnamese.group(2)} nƒÉm {m_vietnamese.group(3)}"
    try:
        parsed = pd.to_datetime(cleaned_date_str, errors='coerce', dayfirst=True)
        if pd.notna(parsed): return f"ng√†y {parsed.day} th√°ng {parsed.month} nƒÉm {parsed.year}"
        parsed = pd.to_datetime(cleaned_date_str, errors='coerce', dayfirst=False)
        if pd.notna(parsed): return f"ng√†y {parsed.day} th√°ng {parsed.month} nƒÉm {parsed.year}"
    except Exception: pass
    return None

def clean_currency_value(value_input: Any) -> float:
    if pd.isna(value_input): return 0.0
    cleaned_str = str(value_input).strip()
    cleaned_str = re.sub(r'(?i)VND\s*', '', cleaned_str)
    cleaned_str = re.sub(r'[^\d,.-]', '', cleaned_str)
    if not cleaned_str: return 0.0
    has_dot, has_comma = '.' in cleaned_str, ',' in cleaned_str
    if has_dot and has_comma:
        last_dot_pos, last_comma_pos = cleaned_str.rfind('.'), cleaned_str.rfind(',')
        if last_comma_pos > last_dot_pos:
            cleaned_str = cleaned_str.replace('.', '').replace(',', '.')
        else:
            cleaned_str = cleaned_str.replace(',', '')
    elif has_comma:
        if cleaned_str.count(',') > 1 or (cleaned_str.count(',') == 1 and len(cleaned_str.split(',')[-1]) == 3 and len(cleaned_str.split(',')[0]) > 0):
            cleaned_str = cleaned_str.replace(',', '')
        else: cleaned_str = cleaned_str.replace(',', '.')
    elif has_dot:
        if cleaned_str.count('.') > 1 or (cleaned_str.count('.') == 1 and len(cleaned_str.split('.')[-1]) == 3 and len(cleaned_str.split('.')[0]) > 0):
            cleaned_str = cleaned_str.replace('.', '')
    numeric_val = pd.to_numeric(cleaned_str, errors='coerce')
    return numeric_val if pd.notna(numeric_val) else 0.0

def get_cleaned_room_types(df_source: Optional[pd.DataFrame]) -> List[str]:
    if df_source is None or df_source.empty or 'T√™n ch·ªó ngh·ªâ' not in df_source.columns:
        return []
    try:
        unique_values = df_source['T√™n ch·ªó ngh·ªâ'].dropna().unique()
    except Exception:
        return []
    cleaned_types = []
    seen_types = set()
    for val in unique_values:
        s_val = str(val).strip()
        if s_val and s_val not in seen_types:
            cleaned_types.append(s_val)
            seen_types.add(s_val)
    return sorted(cleaned_types)

# --- S·ª¨A L·ªñI: S·ª≠ d·ª•ng credentials t·ª´ st.secrets thay v√¨ ƒë∆∞·ªùng d·∫´n t·ªáp ---
def import_from_gsheet(sheet_id, gcp_creds_dict, worksheet_name=None):
    """
    Imports data from a Google Sheet using service account credentials
    provided as a dictionary (from st.secrets).
    """
    scope = [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive',
    ]
    creds = Credentials.from_service_account_info(gcp_creds_dict, scopes=scope)
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(sheet_id)
    if worksheet_name:
        worksheet = sh.worksheet(worksheet_name)
    else:
        worksheet = sh.sheet1
    data = worksheet.get_all_values()
    if not data or len(data) < 2:
        return pd.DataFrame()
    df = pd.DataFrame(data[1:], columns=data[0])
    return df

# --- S·ª¨A L·ªñI: S·ª≠ d·ª•ng credentials t·ª´ st.secrets thay v√¨ ƒë∆∞·ªùng d·∫´n t·ªáp ---
def upload_to_gsheet(df, sheet_id, gcp_creds_dict, worksheet_name=None):
    """
    Uploads a DataFrame to a Google Sheet using service account credentials
    provided as a dictionary (from st.secrets).
    """
    scope = [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive',
    ]
    creds = Credentials.from_service_account_info(gcp_creds_dict, scopes=scope)
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(sheet_id)
    if worksheet_name:
        try:
            worksheet = sh.worksheet(worksheet_name)
        except gspread.WorksheetNotFound:
            worksheet = sh.add_worksheet(title=worksheet_name, rows="100", cols="20")
    else:
        worksheet = sh.sheet1
    worksheet.clear()
    df_str = df.astype(str)
    worksheet.update([df_str.columns.values.tolist()] + df_str.values.tolist())
    return sh.url

@st.cache_data
def load_data_from_file(uploaded_file_obj) -> Tuple[Optional[pd.DataFrame], Optional[pd.DataFrame]]:
    filename = uploaded_file_obj.name
    df_loaded = pd.DataFrame()
    try:
        if filename.endswith(('.xls', '.xlsx')):
            st.info(f"ƒêang x·ª≠ l√Ω file Excel: {filename}...")
            engine = 'xlrd' if filename.endswith('.xls') else 'openpyxl'
            df_loaded = pd.read_excel(uploaded_file_obj, engine=engine)
            excel_to_app_map = {
                'Ng√†y ƒë·∫øn': 'Ng√†y ƒë·∫øn_str_original', 'Ng√†y ƒëi': 'Ng√†y ƒëi_str_original',
                'ƒê∆∞·ª£c ƒë·∫∑t v√†o': 'ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original', 'T√™n ch·ªó ngh·ªâ': 'T√™n ch·ªó ngh·ªâ',
                'V·ªã tr√≠': 'V·ªã tr√≠', 'T√™n ng∆∞·ªùi ƒë·∫∑t': 'T√™n ng∆∞·ªùi ƒë·∫∑t',
                'Th√†nh vi√™n Genius': 'Th√†nh vi√™n Genius', 'T√¨nh tr·∫°ng': 'T√¨nh tr·∫°ng',
                'T·ªïng thanh to√°n': 'T·ªïng thanh to√°n', 'Hoa h·ªìng': 'Hoa h·ªìng',
                'Ti·ªÅn t·ªá': 'Ti·ªÅn t·ªá', 'S·ªë ƒë·∫∑t ph√≤ng': 'S·ªë ƒë·∫∑t ph√≤ng'
            }
            df_loaded = df_loaded.rename(columns={k: v for k, v in excel_to_app_map.items() if k in df_loaded.columns})
            if 'Ng√†y ƒë·∫øn_str_original' in df_loaded.columns:
                df_loaded['Check-in Date'] = df_loaded['Ng√†y ƒë·∫øn_str_original'].apply(parse_app_standard_date)
            if 'Ng√†y ƒëi_str_original' in df_loaded.columns:
                df_loaded['Check-out Date'] = df_loaded['Ng√†y ƒëi_str_original'].apply(parse_app_standard_date)
            if 'ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original' in df_loaded.columns:
                df_loaded['Booking Date'] = df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original'].apply(parse_app_standard_date)
        elif filename.endswith('.pdf'):
            st.info(f"ƒêang x·ª≠ l√Ω file PDF: {filename}...")
            if not PYPDF2_AVAILABLE:
                st.error("Kh√¥ng th·ªÉ x·ª≠ l√Ω file PDF do thi·∫øu th∆∞ vi·ªán PyPDF2. Vui l√≤ng c√†i ƒë·∫∑t: pip install pypdf2")
                return None, None
            st.warning("Ch·ª©c nƒÉng x·ª≠ l√Ω file PDF ƒëang trong giai ƒëo·∫°n th·ª≠ nghi·ªám.")
            reader = PdfReader(uploaded_file_obj)
            text_data = ""
            for page_num, page in enumerate(reader.pages):
                page_text = page.extract_text()
                if page_text: text_data += page_text + "\n"
                else: st.warning(f"Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ trang {page_num + 1} c·ªßa file PDF.")
            if not text_data.strip():
                st.error("File PDF kh√¥ng ch·ª©a vƒÉn b·∫£n ho·∫∑c kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n.")
                return None, None
            lines = text_data.splitlines()
            parsed_rows = []
            pdf_headers_assumed_order = [
                "ID ch·ªó ngh·ªâ", "T√™n ch·ªó ngh·ªâ", "T√™n kh√°ch", "Nh·∫≠n ph√≤ng", "Ng√†y ƒëi",
                "T√¨nh tr·∫°ng", "T·ªïng thanh to√°n", "Hoa h·ªìng", "S·ªë ƒë·∫∑t ph√≤ng", "ƒê∆∞·ª£c ƒë·∫∑t v√†o"
            ]
            for line in lines:
                cleaned_line = line.replace('\r', '').strip()
                if cleaned_line.startswith('"') and cleaned_line.count('","') >= (len(pdf_headers_assumed_order) - 5):
                    try:
                        csv_reader_obj = csv.reader(io.StringIO(cleaned_line))
                        fields = next(csv_reader_obj)
                        if len(fields) >= (len(pdf_headers_assumed_order) - 3) and len(fields) <= len(pdf_headers_assumed_order) + 2:
                            processed_fields = [field.replace('\n', ' ').strip() for field in fields]
                            row_dict = {header: (processed_fields[i] if i < len(processed_fields) else None)
                                        for i, header in enumerate(pdf_headers_assumed_order)}
                            parsed_rows.append(row_dict)
                    except csv.Error:
                        st.caption(f"B·ªè qua d√≤ng kh√¥ng h·ª£p l·ªá trong PDF: {cleaned_line[:50]}...")
                        continue
            if not parsed_rows:
                st.error("Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c d·ªØ li·ªáu c√≥ c·∫•u tr√∫c t·ª´ file PDF.")
                return None, None
            df_loaded = pd.DataFrame(parsed_rows)
            if 'Nh·∫≠n ph√≤ng' in df_loaded.columns: df_loaded['Ng√†y ƒë·∫øn_str_original'] = df_loaded['Nh·∫≠n ph√≤ng'].apply(convert_display_date_to_app_format)
            if 'Ng√†y ƒëi' in df_loaded.columns: df_loaded['Ng√†y ƒëi_str_original'] = df_loaded['Ng√†y ƒëi'].apply(convert_display_date_to_app_format)
            if 'ƒê∆∞·ª£c ƒë·∫∑t v√†o' in df_loaded.columns: df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original'] = df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o'].apply(convert_display_date_to_app_format)
            if 'Ng√†y ƒë·∫øn_str_original' in df_loaded.columns: df_loaded['Check-in Date'] = df_loaded['Ng√†y ƒë·∫øn_str_original'].apply(parse_app_standard_date)
            if 'Ng√†y ƒëi_str_original' in df_loaded.columns: df_loaded['Check-out Date'] = df_loaded['Ng√†y ƒëi_str_original'].apply(parse_app_standard_date)
            if 'ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original' in df_loaded.columns: df_loaded['Booking Date'] = df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original'].apply(parse_app_standard_date)
            if "T√™n kh√°ch" in df_loaded.columns:
                df_loaded["T√™n ng∆∞·ªùi ƒë·∫∑t"] = df_loaded["T√™n kh√°ch"].apply(lambda x: str(x).split("Genius")[0].replace("1 kh√°ch", "").replace("2 kh√°ch", "").replace("2 ng∆∞·ªùi l·ªõn","").strip() if pd.notna(x) else "N/A")
                df_loaded["Th√†nh vi√™n Genius"] = df_loaded["T√™n kh√°ch"].apply(lambda x: "C√≥" if pd.notna(x) and "Genius" in str(x) else "Kh√¥ng")
            if "V·ªã tr√≠" not in df_loaded.columns: df_loaded["V·ªã tr√≠"] = "N/A (t·ª´ PDF)"
            if "Ti·ªÅn t·ªá" not in df_loaded.columns: df_loaded["Ti·ªÅn t·ªá"] = "VND"
        elif filename.endswith('.html'):
            st.info(f"ƒêang x·ª≠ l√Ω file HTML: {filename}...")
            if not BS4_AVAILABLE:
                st.error("Kh√¥ng th·ªÉ x·ª≠ l√Ω file HTML do thi·∫øu th∆∞ vi·ªán BeautifulSoup4.")
                return None, None
            
            soup = BeautifulSoup(uploaded_file_obj.read(), 'html.parser')
            parsed_rows_html = []
            
            table_format1 = soup.find('table', class_='cdd0659f86')
            if table_format1:
                st.info("ƒêang ph√¢n t√≠ch HTML theo ƒë·ªãnh d·∫°ng 1 (class 'cdd0659f86').")
                table_to_parse = table_format1
                
                headers_from_html = []
                header_row_element = table_to_parse.find('thead')
                if header_row_element: header_row_element = header_row_element.find('tr')
                if not header_row_element:
                    tbody_for_header = table_to_parse.find('tbody')
                    if tbody_for_header: header_row_element = tbody_for_header.find('tr')
                if not header_row_element:
                    header_row_element = table_to_parse.find('tr')
                if header_row_element:
                    headers_from_html = [th.get_text(separator=" ", strip=True) for th in header_row_element.find_all(['th', 'td'])]

                body = table_to_parse.find('tbody')
                if not body:
                    all_rows_in_table = table_to_parse.find_all('tr')
                    if header_row_element and all_rows_in_table and all_rows_in_table[0] == header_row_element:
                        body_rows_elements = all_rows_in_table[1:]
                    else:
                        body_rows_elements = all_rows_in_table
                    if not body_rows_elements:
                        st.error("ƒê·ªãnh d·∫°ng 1: Kh√¥ng t√¨m th·∫•y d√≤ng d·ªØ li·ªáu n√†o trong b·∫£ng HTML.")
                        return None, None
                else:
                    body_rows_elements = body.find_all('tr')

                for row_idx, row in enumerate(body_rows_elements):
                    row_data = {}
                    guest_name_parts = []
                    cells = row.find_all(['td', 'th'])
                    for i, cell in enumerate(cells):
                        heading_text = headers_from_html[i] if i < len(headers_from_html) else None
                        if not heading_text: heading_text = cell.get('data-heading', f"C·ªôt {i+1}")
                        
                        cell_text_content = cell.get_text(separator="\\n", strip=True)
                        cell_lines = [line.strip() for line in cell_text_content.split('\\n') if line.strip()]

                        if heading_text == "T√™n kh√°ch":
                            for line_part in cell_lines:
                                if "kh√°ch" in line_part.lower() or "ng∆∞·ªùi l·ªõn" in line_part.lower() or "tr·∫ª em" in line_part.lower():
                                    if "Genius" in line_part:
                                         row_data["Th√†nh vi√™n Genius"] = "C√≥"
                                         line_part = line_part.replace("Genius", "").strip()
                                else:
                                    guest_name_parts.append(line_part)
                            if guest_name_parts:
                                row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"] = " ".join(guest_name_parts)
                                guest_name_parts = []
                            if "Th√†nh vi√™n Genius" not in row_data:
                                genius_svg = cell.find('svg', alt='Genius')
                                if genius_svg or ("Genius" in cell_text_content and "T√™n ng∆∞·ªùi ƒë·∫∑t" in row_data and "Genius" in row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"]):
                                     row_data["Th√†nh vi√™n Genius"] = "C√≥"
                                     if "T√™n ng∆∞·ªùi ƒë·∫∑t" in row_data:
                                         row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"] = row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"].replace("Genius","").strip()
                                else: row_data["Th√†nh vi√™n Genius"] = "Kh√¥ng"
                        elif heading_text == "Ph√≤ng":
                            row_data["T√™n ch·ªó ngh·ªâ"] = cell_lines[0] if cell_lines else "N/A"
                        elif heading_text == "Gi√°": 
                            row_data["T·ªïng thanh to√°n"] = cell_lines[0] if cell_lines else "N/A"
                        elif heading_text == "M√£ s·ªë ƒë·∫∑t ph√≤ng": 
                            row_data["S·ªë ƒë·∫∑t ph√≤ng"] = cell_lines[0] if cell_lines else "N/A"
                        elif heading_text and cell_lines:
                            if heading_text == "Nh·∫≠n ph√≤ng": row_data["Ng√†y ƒë·∫øn_str_original"] = cell_lines[0]
                            elif heading_text == "Ng√†y ƒëi": row_data["Ng√†y ƒëi_str_original"] = cell_lines[0]
                            elif heading_text == "ƒê∆∞·ª£c ƒë·∫∑t v√†o": row_data["ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original"] = cell_lines[0]
                            elif heading_text in ["ID ch·ªó ngh·ªâ", "V·ªã tr√≠", "T√¨nh tr·∫°ng", "Hoa h·ªìng", "S·ªë ƒë·∫∑t ph√≤ng", "T·ªïng thanh to√°n"]:
                                 row_data[heading_text] = cell_lines[0]
                    if row_data: parsed_rows_html.append(row_data)

            else:
                table_format2_candidate = None
                potential_tables = soup.find_all('table')
                for pt_check in potential_tables:
                    if pt_check.find('tr', class_='bui-table__row') and pt_check.find(['th', 'td'], attrs={'data-heading': True}):
                        table_format2_candidate = pt_check
                        break
                
                if table_format2_candidate:
                    st.info("ƒêang ph√¢n t√≠ch HTML theo ƒë·ªãnh d·∫°ng 2 ('bui-table__row' v√† 'data-heading').")
                    table_to_parse = table_format2_candidate
                    body_rows_elements = table_to_parse.find_all('tr', class_='bui-table__row')
                    if not body_rows_elements : body_rows_elements = table_to_parse.find_all('tr')

                    for row_element in body_rows_elements:
                        current_row_data = {}
                        cells_in_row = row_element.find_all(['th', 'td'], recursive=False)
                        for cell_element in cells_in_row:
                            data_heading_attr = cell_element.get('data-heading')
                            if not data_heading_attr: continue
                            
                            cell_text_val = ""
                            anchor_tag = cell_element.find('a')
                            span_in_cell = cell_element.find('span')
                            
                            if data_heading_attr == "M√£ s·ªë ƒë·∫∑t ph√≤ng" and anchor_tag and anchor_tag.find('span'):
                                cell_text_val = anchor_tag.find('span').get_text(strip=True)
                            elif data_heading_attr == "T√™n kh√°ch" and anchor_tag and anchor_tag.find('span'):
                                cell_text_val = anchor_tag.find('span').get_text(strip=True)
                            elif span_in_cell:
                                cell_text_val = span_in_cell.get_text(strip=True)
                            else:
                                cell_text_val = cell_element.get_text(strip=True)
                            cell_text_val = " ".join(cell_text_val.split())

                            if data_heading_attr == "T√™n kh√°ch":
                                current_row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"] = cell_text_val
                                current_row_data["Th√†nh vi√™n Genius"] = "C√≥" if "Genius" in cell_element.get_text(separator=" ", strip=True).lower() else "Kh√¥ng"
                            elif data_heading_attr == "Ph√≤ng":
                                current_row_data["T√™n ch·ªó ngh·ªâ"] = cell_text_val.split('\\n')[0].strip()
                            elif data_heading_attr == "Gi√°":
                                current_row_data["T·ªïng thanh to√°n"] = cell_text_val
                            elif data_heading_attr == "M√£ s·ªë ƒë·∫∑t ph√≤ng":
                                current_row_data["S·ªë ƒë·∫∑t ph√≤ng"] = cell_text_val
                            elif data_heading_attr == "Nh·∫≠n ph√≤ng":
                                current_row_data["Ng√†y ƒë·∫øn_str_original"] = cell_text_val
                            elif data_heading_attr == "Ng√†y ƒëi":
                                current_row_data["Ng√†y ƒëi_str_original"] = cell_text_val
                            elif data_heading_attr == "ƒê∆∞·ª£c ƒë·∫∑t v√†o":
                                current_row_data["ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original"] = cell_text_val
                            elif data_heading_attr in ["T√¨nh tr·∫°ng", "Hoa h·ªìng"]:
                                current_row_data[data_heading_attr] = cell_text_val
                        if current_row_data and any(current_row_data.values()):
                            parsed_rows_html.append(current_row_data)
                
                else:
                    st.warning("Kh√¥ng t√¨m th·∫•y b·∫£ng HTML theo ƒë·ªãnh d·∫°ng c·ª• th·ªÉ. Th·ª≠ t√¨m b·∫£ng chung...")
                    generic_table_fallback = soup.find('table')
                    if not generic_table_fallback:
                        st.error("C≈©ng kh√¥ng t√¨m th·∫•y th·∫ª <table> n√†o trong file HTML.")
                        return None, None
                    else:
                        st.info("ƒê√£ t√¨m th·∫•y m·ªôt th·∫ª <table> chung, ƒëang th·ª≠ ph√¢n t√≠ch (theo logic ƒë·ªãnh d·∫°ng 1).")
                        table_to_parse = generic_table_fallback
                        
                        headers_from_html = []
                        header_row_element = table_to_parse.find('thead')
                        if header_row_element: header_row_element = header_row_element.find('tr')
                        if not header_row_element:
                            tbody_for_header = table_to_parse.find('tbody')
                            if tbody_for_header: header_row_element = tbody_for_header.find('tr')
                        if not header_row_element:
                            header_row_element = table_to_parse.find('tr')
                        if header_row_element:
                            headers_from_html = [th.get_text(separator=" ", strip=True) for th in header_row_element.find_all(['th', 'td'])]

                        body = table_to_parse.find('tbody')
                        if not body:
                            all_rows_in_table = table_to_parse.find_all('tr')
                            if header_row_element and all_rows_in_table and all_rows_in_table[0] == header_row_element:
                                body_rows_elements = all_rows_in_table[1:]
                            else:
                                body_rows_elements = all_rows_in_table
                            if not body_rows_elements:
                                st.error("Fallback: Kh√¥ng t√¨m th·∫•y d√≤ng d·ªØ li·ªáu n√†o trong b·∫£ng HTML.")
                                return None, None
                        else:
                            body_rows_elements = body.find_all('tr')

                        for row_idx, row in enumerate(body_rows_elements):
                            row_data = {}
                            guest_name_parts = []
                            cells = row.find_all(['td', 'th'])
                            for i, cell in enumerate(cells):
                                heading_text = headers_from_html[i] if i < len(headers_from_html) else None
                                if not heading_text: heading_text = cell.get('data-heading', f"C·ªôt {i+1}")
                                
                                cell_text_content = cell.get_text(separator="\\n", strip=True)
                                cell_lines = [line.strip() for line in cell_text_content.split('\\n') if line.strip()]

                                if heading_text == "T√™n kh√°ch":
                                    for line_part_generic in cell_lines:
                                        if "kh√°ch" in line_part_generic.lower() or "ng∆∞·ªùi l·ªõn" in line_part_generic.lower() or "tr·∫ª em" in line_part_generic.lower():
                                            if "Genius" in line_part_generic:
                                                 row_data["Th√†nh vi√™n Genius"] = "C√≥"
                                                 line_part_generic = line_part_generic.replace("Genius", "").strip()
                                        else:
                                            guest_name_parts.append(line_part_generic)
                                    if guest_name_parts:
                                        row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"] = " ".join(guest_name_parts)
                                        guest_name_parts = []
                                    if "Th√†nh vi√™n Genius" not in row_data:
                                        genius_svg_generic = cell.find('svg', alt='Genius')
                                        if genius_svg_generic or ("Genius" in cell_text_content and "T√™n ng∆∞·ªùi ƒë·∫∑t" in row_data and "Genius" in row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"]):
                                             row_data["Th√†nh vi√™n Genius"] = "C√≥"
                                             if "T√™n ng∆∞·ªùi ƒë·∫∑t" in row_data:
                                                 row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"] = row_data["T√™n ng∆∞·ªùi ƒë·∫∑t"].replace("Genius","").strip()
                                        else: row_data["Th√†nh vi√™n Genius"] = "Kh√¥ng"
                                elif heading_text == "Ph√≤ng":
                                    row_data["T√™n ch·ªó ngh·ªâ"] = cell_lines[0] if cell_lines else "N/A"
                                elif heading_text == "Gi√°": 
                                    row_data["T·ªïng thanh to√°n"] = cell_lines[0] if cell_lines else "N/A"
                                elif heading_text == "M√£ s·ªë ƒë·∫∑t ph√≤ng": 
                                    row_data["S·ªë ƒë·∫∑t ph√≤ng"] = cell_lines[0] if cell_lines else "N/A"
                                elif heading_text and cell_lines:
                                    if heading_text == "Nh·∫≠n ph√≤ng": row_data["Ng√†y ƒë·∫øn_str_original"] = cell_lines[0]
                                    elif heading_text == "Ng√†y ƒëi": row_data["Ng√†y ƒëi_str_original"] = cell_lines[0]
                                    elif heading_text == "ƒê∆∞·ª£c ƒë·∫∑t v√†o": row_data["ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original"] = cell_lines[0]
                                    elif heading_text in ["ID ch·ªó ngh·ªâ", "V·ªã tr√≠", "T√¨nh tr·∫°ng", "Hoa h·ªìng", "S·ªë ƒë·∫∑t ph√≤ng", "T·ªïng thanh to√°n"]:
                                         row_data[heading_text] = cell_lines[0]
                            if row_data: parsed_rows_html.append(row_data)
            
            if not parsed_rows_html:
                st.error("Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c d√≤ng d·ªØ li·ªáu n√†o t·ª´ b·∫£ng HTML sau t·∫•t c·∫£ c√°c l·∫ßn th·ª≠.")
                return None, None
            df_loaded = pd.DataFrame(parsed_rows_html)
            
            html_common_map_after_parse = {}
            df_loaded = df_loaded.rename(columns={k: v for k, v in html_common_map_after_parse.items() if k in df_loaded.columns})

            if 'Ng√†y ƒë·∫øn_str_original' in df_loaded.columns: df_loaded['Ng√†y ƒë·∫øn_str'] = df_loaded['Ng√†y ƒë·∫øn_str_original'].apply(convert_display_date_to_app_format)
            if 'Ng√†y ƒëi_str_original' in df_loaded.columns: df_loaded['Ng√†y ƒëi_str'] = df_loaded['Ng√†y ƒëi_str_original'].apply(convert_display_date_to_app_format)
            if 'ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original' in df_loaded.columns: df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str'] = df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str_original'].apply(convert_display_date_to_app_format)
            
            if 'Ng√†y ƒë·∫øn_str' in df_loaded.columns: df_loaded['Check-in Date'] = df_loaded['Ng√†y ƒë·∫øn_str'].apply(parse_app_standard_date)
            if 'Ng√†y ƒëi_str' in df_loaded.columns: df_loaded['Check-out Date'] = df_loaded['Ng√†y ƒëi_str'].apply(parse_app_standard_date)
            if 'ƒê∆∞·ª£c ƒë·∫∑t v√†o_str' in df_loaded.columns: df_loaded['Booking Date'] = df_loaded['ƒê∆∞·ª£c ƒë·∫∑t v√†o_str'].apply(parse_app_standard_date)
            
            if "Ti·ªÅn t·ªá" not in df_loaded.columns: df_loaded["Ti·ªÅn t·ªá"] = "VND"
            if "Th√†nh vi√™n Genius" not in df_loaded.columns: df_loaded["Th√†nh vi√™n Genius"] = "Kh√¥ng"

        else:
            st.error(f"ƒê·ªãnh d·∫°ng file '{filename.split('.')[-1]}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
            return None, None

        if df_loaded.empty:
            st.error("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c t·∫£i ho·∫∑c t·∫•t c·∫£ c√°c h√†ng ƒë·ªÅu tr·ªëng.")
            return None, None
        df_loaded = df_loaded.dropna(how='all').reset_index(drop=True)
        if df_loaded.empty:
            st.error("D·ªØ li·ªáu tr·ªëng sau khi lo·∫°i b·ªè c√°c h√†ng r·ªóng.")
            return None, None

        for col_num_common in ["T·ªïng thanh to√°n", "Hoa h·ªìng"]:
            if col_num_common in df_loaded.columns:
                 df_loaded[col_num_common] = df_loaded[col_num_common].apply(clean_currency_value)
            else: df_loaded[col_num_common] = 0.0

        cols_to_datetime = ['Check-in Date', 'Check-out Date', 'Booking Date']
        for col_dt in cols_to_datetime:
            if col_dt in df_loaded.columns:
                df_loaded[col_dt] = pd.to_datetime(df_loaded[col_dt], errors='coerce')
            else: df_loaded[col_dt] = pd.NaT

        if not df_loaded.empty and (df_loaded['Check-in Date'].isnull().any() or df_loaded['Check-out Date'].isnull().any()):
            initial_rows = len(df_loaded)
            df_loaded.dropna(subset=['Check-in Date', 'Check-out Date'], inplace=True)
            dropped_rows_count = initial_rows - len(df_loaded)
            if dropped_rows_count > 0:
                st.warning(f"ƒê√£ lo·∫°i b·ªè {dropped_rows_count} ƒë·∫∑t ph√≤ng do ng√†y check-in ho·∫∑c check-out kh√¥ng h·ª£p l·ªá.")
        if df_loaded.empty:
            st.error("Kh√¥ng c√≤n d·ªØ li·ªáu h·ª£p l·ªá sau khi lo·∫°i b·ªè c√°c ƒë·∫∑t ph√≤ng c√≥ ng√†y kh√¥ng h·ª£p l·ªá.")
            return None, None

        if 'Check-out Date' in df_loaded.columns and 'Check-in Date' in df_loaded.columns:
            df_loaded['Stay Duration'] = (df_loaded['Check-out Date'] - df_loaded['Check-in Date']).dt.days
            df_loaded['Stay Duration'] = df_loaded['Stay Duration'].apply(lambda x: max(0, x) if pd.notna(x) else 0)
        else: df_loaded['Stay Duration'] = 0

        if 'T·ªïng thanh to√°n' in df_loaded.columns and 'Stay Duration' in df_loaded.columns:
            df_loaded['T·ªïng thanh to√°n'] = pd.to_numeric(df_loaded['T·ªïng thanh to√°n'], errors='coerce').fillna(0)
            df_loaded['Gi√° m·ªói ƒë√™m'] = np.where(
                (df_loaded['Stay Duration'].notna()) & (df_loaded['Stay Duration'] > 0) & (df_loaded['T·ªïng thanh to√°n'].notna()),
                df_loaded['T·ªïng thanh to√°n'] / df_loaded['Stay Duration'],
                0.0
            ).round(0)
        else:
            df_loaded['Gi√° m·ªói ƒë√™m'] = 0.0


        for original_date_col_name in ['Ng√†y ƒë·∫øn', 'Ng√†y ƒëi', 'ƒê∆∞·ª£c ƒë·∫∑t v√†o']:
            source_col_original = f"{original_date_col_name}_str_original"
            source_col_generic = f"{original_date_col_name}_str"
            if original_date_col_name not in df_loaded.columns: df_loaded[original_date_col_name] = pd.NA
            if source_col_original in df_loaded.columns: df_loaded[original_date_col_name] = df_loaded[original_date_col_name].fillna(df_loaded[source_col_original])
            if source_col_generic in df_loaded.columns: df_loaded[original_date_col_name] = df_loaded[original_date_col_name].fillna(df_loaded[source_col_generic])
            if source_col_original in df_loaded.columns: df_loaded.drop(columns=[source_col_original], inplace=True, errors='ignore')
            if source_col_generic in df_loaded.columns: df_loaded.drop(columns=[source_col_generic], inplace=True, errors='ignore')

        for req_col in ALL_REQUIRED_COLS:
            if req_col not in df_loaded.columns:
                if "Date" in req_col and req_col not in ['Ng√†y ƒë·∫øn', 'Ng√†y ƒëi', 'ƒê∆∞·ª£c ƒë·∫∑t v√†o']: df_loaded[req_col] = pd.NaT
                elif "Duration" in req_col: df_loaded[req_col] = 0
                elif req_col in ['T·ªïng thanh to√°n', 'Hoa h·ªìng', 'Gi√° m·ªói ƒë√™m']: df_loaded[req_col] = 0.0
                elif req_col == 'Ng∆∞·ªùi thu ti·ªÅn': df_loaded[req_col] = "N/A"
                else: df_loaded[req_col] = "N/A"

        active_bookings_loaded = df_loaded[df_loaded['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy() if 'T√¨nh tr·∫°ng' in df_loaded.columns else pd.DataFrame(columns=ALL_REQUIRED_COLS)
        df_final = df_loaded[[col for col in ALL_REQUIRED_COLS if col in df_loaded.columns]].copy()
        if active_bookings_loaded is not None and not active_bookings_loaded.empty:
            active_bookings_final = active_bookings_loaded[[col for col in ALL_REQUIRED_COLS if col in active_bookings_loaded.columns]].copy()
        else: active_bookings_final = pd.DataFrame(columns=ALL_REQUIRED_COLS)

        st.success(f"ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng file {filename}. T√¨m th·∫•y {len(df_final)} ƒë·∫∑t ph√≤ng, trong ƒë√≥ {len(active_bookings_final)} ƒëang ho·∫°t ƒë·ªông.")
        return df_final, active_bookings_final
    except FileNotFoundError: st.error(f"L·ªói: File {filename} kh√¥ng t√¨m th·∫•y."); return None, None
    except xlrd.XLRDError: st.error(f"L·ªói khi ƒë·ªçc file Excel c≈© (.xls): {filename}."); return None, None
    except openpyxl.utils.exceptions.InvalidFileException: st.error(f"L·ªói khi ƒë·ªçc file Excel (.xlsx): {filename}."); return None, None
    except Exception as e: st.error(f"L·ªói nghi√™m tr·ªçng x·∫£y ra khi x·ª≠ l√Ω file {filename}: {e}"); import traceback; st.error(f"Chi ti·∫øt l·ªói: {traceback.format_exc()}"); return None, None

def create_demo_data() -> Tuple[pd.DataFrame, pd.DataFrame]:
    st.info("ƒêang t·∫°o d·ªØ li·ªáu demo...")
    demo_data = {
        'T√™n ch·ªó ngh·ªâ': ['Home in Old Quarter - Night market', 'Old Quarter Home- Kitchen & Balcony', 'Home in Old Quarter - Night market', 'Old Quarter Home- Kitchen & Balcony', 'Riverside Boutique Apartment'],
        'V·ªã tr√≠': ['Ph·ªë C·ªï H√† N·ªôi, Ho√†n Ki·∫øm, Vietnam', '118 Ph·ªë H√†ng B·∫°c, Ho√†n Ki·∫øm, Vietnam', 'Ph·ªë C·ªï H√† N·ªôi, Ho√†n Ki·∫øm, Vietnam', '118 Ph·ªë H√†ng B·∫°c, Ho√†n Ki·∫øm, Vietnam', 'Qu·∫≠n 2, TP. H·ªì Ch√≠ Minh, Vietnam'],
        'T√™n ng∆∞·ªùi ƒë·∫∑t': ['Demo User Alpha', 'Demo User Beta', 'Demo User Alpha', 'Demo User Gamma', 'Demo User Delta'],
        'Th√†nh vi√™n Genius': ['Kh√¥ng', 'C√≥', 'Kh√¥ng', 'C√≥', 'Kh√¥ng'],
        'Ng√†y ƒë·∫øn': ['ng√†y 22 th√°ng 5 nƒÉm 2025', 'ng√†y 23 th√°ng 5 nƒÉm 2025', 'ng√†y 25 th√°ng 5 nƒÉm 2025', 'ng√†y 26 th√°ng 5 nƒÉm 2025', 'ng√†y 1 th√°ng 6 nƒÉm 2025'],
        'Ng√†y ƒëi': ['ng√†y 23 th√°ng 5 nƒÉm 2025', 'ng√†y 24 th√°ng 5 nƒÉm 2025', 'ng√†y 26 th√°ng 5 nƒÉm 2025', 'ng√†y 28 th√°ng 5 nƒÉm 2025', 'ng√†y 5 th√°ng 6 nƒÉm 2025'],
        'ƒê∆∞·ª£c ƒë·∫∑t v√†o': ['ng√†y 20 th√°ng 5 nƒÉm 2025', 'ng√†y 21 th√°ng 5 nƒÉm 2025', 'ng√†y 22 th√°ng 5 nƒÉm 2025', 'ng√†y 23 th√°ng 5 nƒÉm 2025', 'ng√†y 25 th√°ng 5 nƒÉm 2025'],
        'T√¨nh tr·∫°ng': ['OK', 'OK', 'ƒê√£ h·ªßy', 'OK', 'OK'],
        'T·ªïng thanh to√°n': [300000, 450000, 200000, 600000, 1200000],
        'Hoa h·ªìng': [60000, 90000, 40000, 120000, 240000],
        'Ti·ªÅn t·ªá': ['VND', 'VND', 'VND', 'VND', 'VND'],
        'S·ªë ƒë·∫∑t ph√≤ng': [f'DEMO{i+1:09d}' for i in range(5)],
        'Ng∆∞·ªùi thu ti·ªÅn': ['LOC LE', 'THAO LE', 'LOC LE', 'THAO LE', 'LOC LE']
    }
    df_demo = pd.DataFrame(demo_data)
    df_demo['Check-in Date'] = df_demo['Ng√†y ƒë·∫øn'].apply(parse_app_standard_date)
    df_demo['Check-out Date'] = df_demo['Ng√†y ƒëi'].apply(parse_app_standard_date)
    df_demo['Booking Date'] = df_demo['ƒê∆∞·ª£c ƒë·∫∑t v√†o'].apply(parse_app_standard_date)
    df_demo['Check-in Date'] = pd.to_datetime(df_demo['Check-in Date'], errors='coerce')
    df_demo['Check-out Date'] = pd.to_datetime(df_demo['Check-out Date'], errors='coerce')
    df_demo['Booking Date'] = pd.to_datetime(df_demo['Booking Date'], errors='coerce')
    df_demo.dropna(subset=['Check-in Date', 'Check-out Date'], inplace=True)
    if not df_demo.empty:
        df_demo['Stay Duration'] = (df_demo['Check-out Date'] - df_demo['Check-in Date']).dt.days
        df_demo['Stay Duration'] = df_demo['Stay Duration'].apply(lambda x: max(0, x) if pd.notna(x) else 0)
    else: df_demo['Stay Duration'] = 0

    if 'T·ªïng thanh to√°n' in df_demo.columns and 'Stay Duration' in df_demo.columns:
        df_demo['T·ªïng thanh to√°n'] = pd.to_numeric(df_demo['T·ªïng thanh to√°n'], errors='coerce').fillna(0)
        df_demo['Gi√° m·ªói ƒë√™m'] = np.where(
            (df_demo['Stay Duration'].notna()) & (df_demo['Stay Duration'] > 0) & (df_demo['T·ªïng thanh to√°n'].notna()),
            df_demo['T·ªïng thanh to√°n'] / df_demo['Stay Duration'],
            0.0
        ).round(0)
    else:
        df_demo['Gi√° m·ªói ƒë√™m'] = 0.0

    active_bookings_demo = df_demo[df_demo['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy()
    return df_demo, active_bookings_demo

def get_room_availability(date_to_check: datetime.date, current_bookings_df: Optional[pd.DataFrame], all_room_types: List[str], rooms_per_type: int = ROOM_UNIT_PER_ROOM_TYPE) -> Dict[str, int]:
    if current_bookings_df is None or current_bookings_df.empty or not all_room_types:
        return {room_type: rooms_per_type for room_type in all_room_types}
    if isinstance(date_to_check, pd.Timestamp): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.datetime): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.date): date_to_check_dt = date_to_check
    else: st.error(f"ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá: {date_to_check}"); return {room_type: 0 for room_type in all_room_types}
    availability = {room_type: rooms_per_type for room_type in all_room_types}
    required_date_cols = ['Check-in Date', 'Check-out Date']
    for col in required_date_cols:
        if col not in current_bookings_df.columns or not pd.api.types.is_datetime64_any_dtype(current_bookings_df[col]):
            st.warning(f"C·ªôt ng√†y '{col}' b·ªã thi·∫øu ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng."); return availability
    active_on_date = current_bookings_df[
        (current_bookings_df['Check-in Date'].dt.date <= date_to_check_dt) &
        (current_bookings_df['Check-out Date'].dt.date > date_to_check_dt) &
        (current_bookings_df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy')
    ]
    occupied_counts = active_on_date.groupby('T√™n ch·ªó ngh·ªâ').size()
    for room_type_item, occupied_count_val in occupied_counts.items():
        if room_type_item in availability:
            availability[room_type_item] = max(0, rooms_per_type - occupied_count_val)
    return availability

def get_daily_activity(date_to_check: datetime.date, current_bookings_df: Optional[pd.DataFrame]) -> Dict[str, List[Dict]]:
    if current_bookings_df is None or current_bookings_df.empty:
        return {'check_in': [], 'check_out': [], 'occupied': []}
    if isinstance(date_to_check, pd.Timestamp): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.datetime): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.date): date_to_check_dt = date_to_check
    else: st.error(f"ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá: {date_to_check}"); return {'check_in': [], 'check_out': [], 'occupied': []}
    result = {'check_in': [], 'check_out': [], 'occupied': []}
    required_date_cols = ['Check-in Date', 'Check-out Date']
    for col in required_date_cols:
        if col not in current_bookings_df.columns or not pd.api.types.is_datetime64_any_dtype(current_bookings_df[col]):
            st.warning(f"C·ªôt ng√†y '{col}' b·ªã thi·∫øu ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng."); return result
    active_bookings_df_daily = current_bookings_df[current_bookings_df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy']
    if active_bookings_df_daily.empty: return result
    check_ins_df = active_bookings_df_daily[active_bookings_df_daily['Check-in Date'].dt.date == date_to_check_dt]
    for _, booking in check_ins_df.iterrows():
        result['check_in'].append({'name': booking.get('T√™n ng∆∞·ªùi ƒë·∫∑t', 'N/A'), 'room_type': booking.get('T√™n ch·ªó ngh·ªâ', 'N/A'), 'booking_id': booking.get('S·ªë ƒë·∫∑t ph√≤ng', 'N/A')})
    check_outs_df = active_bookings_df_daily[active_bookings_df_daily['Check-out Date'].dt.date == date_to_check_dt]
    for _, booking in check_outs_df.iterrows():
        result['check_out'].append({'name': booking.get('T√™n ng∆∞·ªùi ƒë·∫∑t', 'N/A'), 'room_type': booking.get('T√™n ch·ªó ngh·ªâ', 'N/A'), 'booking_id': booking.get('S·ªë ƒë·∫∑t ph√≤ng', 'N/A')})
    occupied_df = active_bookings_df_daily[
        (active_bookings_df_daily['Check-in Date'].dt.date <= date_to_check_dt) &
        (active_bookings_df_daily['Check-out Date'].dt.date > date_to_check_dt)
    ]
    for _, booking in occupied_df.iterrows():
        result['occupied'].append({
            'name': booking.get('T√™n ng∆∞·ªùi ƒë·∫∑t', 'N/A'), 'room_type': booking.get('T√™n ch·ªó ngh·ªâ', 'N/A'),
            'booking_id': booking.get('S·ªë ƒë·∫∑t ph√≤ng', 'N/A'),
            'check_in': booking.get('Check-in Date').date() if pd.notnull(booking.get('Check-in Date')) else None,
            'check_out': booking.get('Check-out Date').date() if pd.notnull(booking.get('Check-out Date')) else None,
            'total_payment': booking.get('T·ªïng thanh to√°n', 0.0)
        })
    return result

def get_overall_calendar_day_info(date_to_check: datetime.date, current_bookings_df: Optional[pd.DataFrame], hotel_total_capacity: int) -> Dict[str, Any]:
    if current_bookings_df is None or current_bookings_df.empty or hotel_total_capacity == 0:
        return {'occupied_units': 0, 'available_units': hotel_total_capacity, 'guests': [], 'status_text': f"Tr·ªëng" if hotel_total_capacity > 0 else "N/A", 'color': '#D4EFDF', 'status_indicator_type': 'green_dot' if hotel_total_capacity > 0 else 'error'}
    if isinstance(date_to_check, pd.Timestamp): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.datetime): date_to_check_dt = date_to_check.date()
    elif isinstance(date_to_check, datetime.date): date_to_check_dt = date_to_check
    else: return {'occupied_units': 0, 'available_units': 0, 'guests': [], 'status_text': "L·ªói ng√†y", 'color': '#EAECEE', 'status_indicator_type': 'error'}
    required_date_cols = ['Check-in Date', 'Check-out Date']
    for col in required_date_cols:
        if col not in current_bookings_df.columns or not pd.api.types.is_datetime64_any_dtype(current_bookings_df[col]):
            st.warning(f"C·ªôt ng√†y '{col}' b·ªã thi·∫øu ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng."); return {'occupied_units': 0, 'available_units': hotel_total_capacity, 'guests': [], 'status_text': "L·ªói d·ªØ li·ªáu", 'color': '#EAECEE', 'status_indicator_type': 'error'}
    active_on_date_df = current_bookings_df[
        (current_bookings_df['Check-in Date'].dt.date <= date_to_check_dt) &
        (current_bookings_df['Check-out Date'].dt.date > date_to_check_dt) &
        (current_bookings_df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy')
    ]
    occupied_units = len(active_on_date_df)
    available_units = max(0, hotel_total_capacity - occupied_units)
    guests_staying_today = active_on_date_df['T√™n ng∆∞·ªùi ƒë·∫∑t'].unique().tolist() if 'T√™n ng∆∞·ªùi ƒë·∫∑t' in active_on_date_df else []
    status_text = ""; color_indicator = ""; status_indicator_type = ""
    if available_units == hotel_total_capacity and hotel_total_capacity > 0: status_text = f"Tr·ªëng"; status_indicator_type = "green_dot"
    elif available_units > 0: status_text = f"{available_units}/{hotel_total_capacity} tr·ªëng"; status_indicator_type = "green_dot"
    elif hotel_total_capacity > 0 : status_text = f"H·∫øt ph√≤ng"; status_indicator_type = "orange_dash"
    else: status_text = "N/A"; status_indicator_type = "error"
    return {'occupied_units': occupied_units, 'available_units': available_units, 'guests': guests_staying_today, 'status_text': status_text, 'color': color_indicator, 'status_indicator_type': status_indicator_type}

DEFAULT_MESSAGE_TEMPLATE_CONTENT = """
HET PHONG : We sincerely apologize for this inconvenience. Due to an unforeseen issue, the room you booked is no longer available
Thank you for your understanding.
We hope to have the pleasure of welcoming you on your next visit.
Have a pleasant evening

DON PHONG : You're welcome! Please feel free to relax and get some breakfast.
We'll get your room ready and clean for you, and I'll let you know as soon as possible when it's all set

WELCOME :
1. Welcome!
Thanks for your reservation. We look forward to seeing you soon
2. Hello Alejandro,
I've received your reservation for 118 Hang Bac.
Could you please let me know your approximate arrival time for today?
ARRIVAL : When you arrive at 118 Hang Bac, please text me  I will guide you to your room.
EARLY CHECK IN : Hello, I'm so sorry, but the room isn't available right now.
You're welcome to leave your luggage here and use the Wi-Fi.
I'll check again around 12:00 AM and let you know as soon as possible when it's all set

CHECK IN : When you arrive at 118 Hang Bac Street, you will see a souvenir shop at the front.
Please walk into the shop about 10 meters, and you will find a staircase on your right-hand side.
Go up the stairs, then look for your room number.
The door will be unlocked, and the key will be inside the room.
FEED BACK : We hope you had a wonderful stay!
We'd love to hear about your experience ‚Äì feel free to leave us a review on Booking.com

PARK : Please park your motorbike across the street, but make sure not to block their right-side door.
"""

def parse_message_templates(text_content: str) -> Dict[str, List[Tuple[str, str]]]:
    templates: Dict[str, List[Tuple[str, str]]] = {}
    current_category: Optional[str] = None
    current_label: Optional[str] = None
    current_message_lines: List[str] = []
    cleaned_content = re.sub(r"'", "", text_content)

    def finalize_and_store_message():
        nonlocal current_category, current_label, current_message_lines, templates
        if current_category and current_label and current_message_lines:
            message = "\n".join(current_message_lines).strip()
            if message:
                if current_category not in templates:
                    templates[current_category] = []
                existing_label_index = -1
                for i, (lbl, _) in enumerate(templates[current_category]):
                    if lbl == current_label:
                        existing_label_index = i
                        break
                if existing_label_index != -1:
                    templates[current_category][existing_label_index] = (current_label, message)
                else:
                    templates[current_category].append((current_label, message))
            current_message_lines = []

    for line in cleaned_content.splitlines():
        stripped_line = line.strip()
        main_cat_match = re.match(r'^([A-Z][A-Z\s]*[A-Z]|[A-Z]+)\s*:\s*(.*)', line)
        sub_label_numbered_match = re.match(r'^\s*(\d+\.)\s*(.*)', stripped_line)
        sub_label_named_match = None
        if current_category:
             potential_sub_label_named_match = re.match(r'^\s*([\w\s()]+?)\s*:\s*(.*)', stripped_line)
             if potential_sub_label_named_match:
                 if potential_sub_label_named_match.group(1).strip() != current_category and potential_sub_label_named_match.group(1).strip().isupper() is False:
                     sub_label_named_match = potential_sub_label_named_match
        if main_cat_match:
            potential_cat_name = main_cat_match.group(1).strip()
            if potential_cat_name.isupper():
                finalize_and_store_message()
                current_category = potential_cat_name
                current_label = "DEFAULT"
                message_on_same_line = main_cat_match.group(2).strip()
                if message_on_same_line:
                    current_message_lines.append(message_on_same_line)
            elif current_category and sub_label_named_match is None:
                sub_label_named_match = main_cat_match
        if current_category:
            is_new_sub_label = False
            if sub_label_numbered_match:
                finalize_and_store_message()
                current_label = sub_label_numbered_match.group(1).strip()
                message_on_same_line = sub_label_numbered_match.group(2).strip()
                if message_on_same_line:
                    current_message_lines.append(message_on_same_line)
                is_new_sub_label = True
            elif sub_label_named_match:
                if not (main_cat_match and main_cat_match.group(1).strip().isupper() and main_cat_match.group(1).strip() == sub_label_named_match.group(1).strip()):
                    finalize_and_store_message()
                    current_label = sub_label_named_match.group(1).strip()
                    message_on_same_line = sub_label_named_match.group(2).strip()
                    if message_on_same_line:
                        current_message_lines.append(message_on_same_line)
                    is_new_sub_label = True
            if not is_new_sub_label and main_cat_match is None:
                if stripped_line or current_message_lines:
                    if not current_label and stripped_line:
                        current_label = "DEFAULT"
                    current_message_lines.append(line)
    finalize_and_store_message()
    return templates

def format_templates_to_text(templates_dict: Dict[str, List[Tuple[str, str]]]) -> str:
    output_lines = []
    for category_name in sorted(templates_dict.keys()):
        labeled_messages = templates_dict[category_name]
        default_message_written_on_cat_line = False
        if labeled_messages and labeled_messages[0][0] == "DEFAULT":
            default_msg_text = labeled_messages[0][1]
            msg_lines = default_msg_text.split('\n')
            output_lines.append(f"{category_name} : {msg_lines[0] if msg_lines else ''}")
            if len(msg_lines) > 1:
                output_lines.extend(msg_lines[1:])
            default_message_written_on_cat_line = True
        else:
            output_lines.append(f"{category_name} :")

        for i, (label, msg_text) in enumerate(labeled_messages):
            if label == "DEFAULT" and default_message_written_on_cat_line and i == 0:
                continue
            msg_lines = msg_text.split('\n')
            if not (label == "DEFAULT" and i==0) :
                 if not (default_message_written_on_cat_line and i==0 and label=="DEFAULT"):
                      if not (not default_message_written_on_cat_line and i==0 and label=="DEFAULT" and output_lines and not output_lines[-1].endswith(":")):
                        output_lines.append("")
            if label == "DEFAULT":
                output_lines.extend(msg_lines)
            elif label.endswith('.'):
                output_lines.append(f"{label} {msg_lines[0] if msg_lines else ''}")
                if len(msg_lines) > 1:
                    output_lines.extend(msg_lines[1:])
            else:
                output_lines.append(f"{label} : {msg_lines[0] if msg_lines else ''}")
                if len(msg_lines) > 1:
                    output_lines.extend(msg_lines[1:])
        output_lines.append("")
    return "\n".join(output_lines) if output_lines else ""

@st.dialog("Th√¥ng b√°o")
def show_success_notification_dialog(message):
    st.markdown(f"<h3 style='text-align: center; color: green;'>‚úÖ {message}</h3>", unsafe_allow_html=True)
    st.balloons()
    if st.button("OK", key="success_dialog_ok_button", use_container_width=True):
        st.session_state.show_add_booking_success_dialog = False
        st.rerun()

def extract_booking_info_from_image_content(image_bytes: bytes) -> List[Dict[str, Any]]:
    all_extracted_bookings = []
    try:
        try:
            secrets_path = os.path.join(".streamlit", "secrets.toml")
            with open(secrets_path, "r") as f:
                secrets = toml.load(f)
            api_key = secrets.get("GOOGLE_API_KEY")
            if not api_key:
                raise ValueError("GOOGLE_API_KEY not found in secrets.toml")
            genai.configure(api_key=api_key)
        except (FileNotFoundError, ValueError) as e:
            return [{"errors": [f"L·ªói khi ƒë·ªçc API Key: {e}. H√£y ch·∫Øc ch·∫Øn t·ªáp .streamlit/secrets.toml t·ªìn t·∫°i v√† ch·ª©a GOOGLE_API_KEY."]}]

        img = Image.open(io.BytesIO(image_bytes))
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        prompt = """
            B·∫°n l√† m·ªôt tr·ª£ l√Ω nh·∫≠p li·ªáu chuy√™n nghi·ªáp cho kh√°ch s·∫°n, c√≥ nhi·ªám v·ª• tr√≠ch xu·∫•t th√¥ng tin t·ª´ m·ªôt h√¨nh ·∫£nh.
            H√¨nh ·∫£nh n√†y c√≥ th·ªÉ ch·ª©a m·ªôt b·∫£ng ho·∫∑c danh s√°ch c·ªßa NHI·ªÄU ƒë·∫∑t ph√≤ng.

            Nhi·ªám v·ª• c·ªßa b·∫°n:
            1. Qu√©t to√†n b·ªô h√¨nh ·∫£nh v√† x√°c ƒë·ªãnh t·ª´ng h√†ng (m·ªói h√†ng l√† m·ªôt ƒë·∫∑t ph√≤ng ri√™ng bi·ªát).
            2. V·ªõi M·ªñI ƒë·∫∑t ph√≤ng, h√£y tr√≠ch xu·∫•t c√°c th√¥ng tin sau.
            3. Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng m·ªôt M·∫¢NG JSON (JSON array), trong ƒë√≥ m·ªói ph·∫ßn t·ª≠ c·ªßa m·∫£ng l√† m·ªôt ƒë·ªëi t∆∞·ª£ng JSON ƒë·∫°i di·ªán cho m·ªôt ƒë·∫∑t ph√≤ng.

            C·∫•u tr√∫c c·ªßa m·ªói ƒë·ªëi t∆∞·ª£ng JSON trong m·∫£ng ph·∫£i nh∆∞ sau:
            - "guest_name" (string): H·ªç v√† t√™n ƒë·∫ßy ƒë·ªß c·ªßa kh√°ch.
            - "booking_id" (string): M√£ s·ªë ƒë·∫∑t ph√≤ng.
            - "is_genius_member" (boolean): True n·∫øu kh√°ch l√† th√†nh vi√™n Genius, ng∆∞·ª£c l·∫°i l√† false.
            - "check_in_date" (string): Ng√†y nh·∫≠n ph√≤ng theo ƒë·ªãnh d·∫°ng YYYY-MM-DD.
            - "check_out_date" (string): Ng√†y tr·∫£ ph√≤ng theo ƒë·ªãnh d·∫°ng YYYY-MM-DD.
            - "room_type" (string): T√™n lo·∫°i ph√≤ng ƒë√£ ƒë·∫∑t.
            - "total_payment" (number): T·ªïng s·ªë ti·ªÅn thanh to√°n (ch·ªâ l·∫•y s·ªë, lo·∫°i b·ªè k√Ω hi·ªáu ti·ªÅn t·ªá v√† d·∫•u ch·∫•m ngƒÉn c√°ch h√†ng ngh√¨n).
            - "commission" (number): Ti·ªÅn hoa h·ªìng, n·∫øu c√≥ (ch·ªâ l·∫•y s·ªë).
            - "currency" (string): M√£ ti·ªÅn t·ªá (v√≠ d·ª•: 'VND', 'USD').
            - "num_nights" (number): T·ªïng s·ªë ƒë√™m ngh·ªâ.
            - "num_adults" (number): S·ªë l∆∞·ª£ng ng∆∞·ªùi l·ªõn.

            Y√äU C·∫¶U C·ª∞C K·ª≤ QUAN TR·ªåNG:
            - K·∫øt qu·∫£ cu·ªëi c√πng PH·∫¢I l√† m·ªôt m·∫£ng JSON, v√≠ d·ª•: [ { ...booking1... }, { ...booking2... } ].
            - Ch·ªâ tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng JSON th√¥, kh√¥ng k√®m theo b·∫•t k·ª≥ vƒÉn b·∫£n gi·∫£i th√≠ch hay ƒë·ªãnh d·∫°ng markdown n√†o nh∆∞ ```json.
            - N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin cho tr∆∞·ªùng n√†o c·ªßa m·ªôt ƒë·∫∑t ph√≤ng, h√£y ƒë·∫∑t gi√° tr·ªã l√† null.
            - ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng ng√†y th√°ng ph·∫£i l√† YYYY-MM-DD.
        """
        response = model.generate_content([prompt, img], stream=False)
        response.resolve()
        
        try:
            json_text = response.text.strip().replace('```json', '').replace('```', '').strip()
            list_of_bookings_data = json.loads(json_text)

            if isinstance(list_of_bookings_data, dict):
                list_of_bookings_data = [list_of_bookings_data]

            for booking_data in list_of_bookings_data:
                extracted_info = {
                    "guest_name": None, "booking_id": None, "genius_member": "Kh√¥ng",
                    "check_in_date": None, "check_out_date": None, "room_type": None,
                    "total_payment": None, "commission": None, "currency": "VND",
                    "status": "OK", "num_nights": None, "num_adults": None, "errors": []
                }
                
                extracted_info.update({
                    "guest_name": booking_data.get("guest_name"),
                    "booking_id": str(booking_data.get("booking_id")) if booking_data.get("booking_id") else None,
                    "genius_member": "C√≥" if booking_data.get("is_genius_member") else "Kh√¥ng",
                    "room_type": booking_data.get("room_type"),
                    "total_payment": booking_data.get("total_payment"),
                    "commission": booking_data.get("commission"),
                    "currency": booking_data.get("currency", "VND"),
                    "num_nights": booking_data.get("num_nights"),
                    "num_adults": booking_data.get("num_adults"),
                })

                if booking_data.get("check_in_date"):
                    try:
                        extracted_info["check_in_date"] = datetime.datetime.strptime(booking_data["check_in_date"], '%Y-%m-%d').date()
                    except (ValueError, TypeError):
                        extracted_info["errors"].append(f"Kh√¥ng th·ªÉ ph√¢n t√≠ch c√∫ ph√°p ng√†y nh·∫≠n ph√≤ng: {booking_data.get('check_in_date')}")
                
                if booking_data.get("check_out_date"):
                    try:
                        extracted_info["check_out_date"] = datetime.datetime.strptime(booking_data["check_out_date"], '%Y-%m-%d').date()
                    except (ValueError, TypeError):
                         extracted_info["errors"].append(f"Kh√¥ng th·ªÉ ph√¢n t√≠ch c√∫ ph√°p ng√†y tr·∫£ ph√≤ng: {booking_data.get('check_out_date')}")

                if extracted_info["check_in_date"] and extracted_info["check_out_date"]:
                    if extracted_info["check_out_date"] <= extracted_info["check_in_date"]:
                        extracted_info["errors"].append("Ng√†y tr·∫£ ph√≤ng ph·∫£i sau ng√†y nh·∫≠n ph√≤ng.")
                    elif not extracted_info.get("num_nights"):
                        duration = extracted_info["check_out_date"] - extracted_info["check_in_date"]
                        extracted_info["num_nights"] = duration.days
                
                if not extracted_info.get("guest_name"): extracted_info["errors"].append("Thi·∫øu t√™n kh√°ch.")
                if not extracted_info.get("check_in_date"): extracted_info["errors"].append("Thi·∫øu ng√†y nh·∫≠n ph√≤ng.")
                if not extracted_info.get("check_out_date"): extracted_info["errors"].append("Thi·∫øu ng√†y tr·∫£ ph√≤ng.")
                
                all_extracted_bookings.append(extracted_info)

        except json.JSONDecodeError:
            all_extracted_bookings.append({"errors": ["Kh√¥ng th·ªÉ gi·∫£i m√£ JSON t·ª´ ph·∫£n h·ªìi API. Ph·∫£n h·ªìi th√¥: " + response.text]})
        except Exception as e:
            all_extracted_bookings.append({"errors": [f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ API: {str(e)}"]})

    except Exception as e:
        error_message = f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi x·ª≠ l√Ω h√¨nh ·∫£nh: {str(e)}"
        st.error(error_message)
        all_extracted_bookings.append({"errors": [error_message]})
        
    return all_extracted_bookings

# --- KH·ªûI T·∫†O SESSION STATE ---
if 'df' not in st.session_state: st.session_state.df = None
if 'active_bookings' not in st.session_state: st.session_state.active_bookings = None
if 'room_types' not in st.session_state: st.session_state.room_types = []
if 'data_source' not in st.session_state: st.session_state.data_source = None
if 'uploaded_file_name' not in st.session_state: st.session_state.uploaded_file_name = None
if 'last_action_message' not in st.session_state: st.session_state.last_action_message = None
if 'current_date_calendar' not in st.session_state: st.session_state.current_date_calendar = datetime.date.today()
if 'selected_calendar_date' not in st.session_state: st.session_state.selected_calendar_date = None
if 'booking_sort_column' not in st.session_state:
    st.session_state.booking_sort_column = 'Booking Date'
if 'booking_sort_ascending' not in st.session_state:
    st.session_state.booking_sort_ascending = False

if 'message_templates_dict' not in st.session_state:
    st.session_state.message_templates_dict = parse_message_templates(DEFAULT_MESSAGE_TEMPLATE_CONTENT)

if 'raw_template_content_for_download' not in st.session_state:
    if 'message_templates_dict' in st.session_state and st.session_state.message_templates_dict is not None:
        st.session_state.raw_template_content_for_download = format_templates_to_text(st.session_state.message_templates_dict)
    else:
        st.session_state.raw_template_content_for_download = ""

if 'editing_booking_id_for_dialog' not in st.session_state:
    st.session_state.editing_booking_id_for_dialog = None

if 'show_add_booking_success_dialog' not in st.session_state:
    st.session_state.show_add_booking_success_dialog = False
if 'add_booking_success_message' not in st.session_state:
    st.session_state.add_booking_success_message = ""

if "add_form_check_in_final" not in st.session_state:
    st.session_state.add_form_check_in_final = datetime.date.today()
if "add_form_check_out_final" not in st.session_state:
    st.session_state.add_form_check_out_final = datetime.date.today() + timedelta(days=1)

if 'image_extracted_data_log' not in st.session_state:
    st.session_state.image_extracted_data_log = None

# --- GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG (UI) & LOGIC T·∫¢I D·ªÆ LI·ªÜU ---
st.sidebar.title("üè® Qu·∫£n l√Ω ph√≤ng")
if not PYPDF2_AVAILABLE and not BS4_AVAILABLE: st.sidebar.warning("X·ª≠ l√Ω PDF v√† HTML b·ªã h·∫°n ch·∫ø. C√†i ƒë·∫∑t: `pip install pypdf2 beautifulsoup4`")
elif not PYPDF2_AVAILABLE: st.sidebar.warning("X·ª≠ l√Ω PDF s·∫Ω kh√¥ng ho·∫°t ƒë·ªông. C√†i ƒë·∫∑t: `pip install pypdf2`")
elif not BS4_AVAILABLE: st.sidebar.warning("X·ª≠ l√Ω HTML s·∫Ω kh√¥ng ho·∫°t ƒë·ªông. C√†i ƒë·∫∑t: `pip install beautifulsoup4`")

uploaded_file = st.sidebar.file_uploader("T·∫£i l√™n file ƒë·∫∑t ph√≤ng (Excel, PDF, HTML)", type=['xls', 'xlsx', 'pdf', 'html'], key="file_uploader_key", help="H·ªó tr·ª£ file Excel, PDF, HTML t·ª´ Booking.com.")
if uploaded_file is not None:
    if st.session_state.uploaded_file_name != uploaded_file.name or st.session_state.df is None:
        with st.spinner(f"ƒêang x·ª≠ l√Ω file: {uploaded_file.name}..."):
            df_from_file, active_bookings_from_file = load_data_from_file(uploaded_file)
        if df_from_file is not None and not df_from_file.empty:
            st.session_state.df = df_from_file
            st.session_state.active_bookings = active_bookings_from_file
            st.session_state.room_types = get_cleaned_room_types(df_from_file)
            st.session_state.data_source = 'file'
            st.session_state.uploaded_file_name = uploaded_file.name
            st.sidebar.success(f"ƒê√£ t·∫£i v√† x·ª≠ l√Ω th√†nh c√¥ng file: {uploaded_file.name}")
            st.session_state.selected_calendar_date = None
            st.rerun()
        else:
            st.sidebar.error(f"Kh√¥ng th·ªÉ x·ª≠ l√Ω file {uploaded_file.name} ho·∫∑c file kh√¥ng ch·ª©a d·ªØ li·ªáu h·ª£p l·ªá.")
            st.session_state.data_source = 'error_loading_file'
            st.session_state.uploaded_file_name = uploaded_file.name
elif st.session_state.df is None and st.session_state.data_source != 'error_loading_file':
    st.sidebar.info("ƒêang t·∫£i d·ªØ li·ªáu m·∫∑c ƒë·ªãnh t·ª´ Google Sheets...")
    creds_dict = st.secrets["gcp_service_account"]
    default_sheet_id = "13kQETOUGCVUwUqZrxeLy-WAj3b17SugI4L8Oq09SX2w"
    worksheet_name = "BookingManager"
    df_gsheet = import_from_gsheet(default_sheet_id, creds_dict, worksheet_name)
    if df_gsheet is not None and not df_gsheet.empty:
        st.session_state.df = df_gsheet
        st.session_state.active_bookings = df_gsheet[df_gsheet['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy() if 'T√¨nh tr·∫°ng' in df_gsheet.columns else df_gsheet.copy()
        st.session_state.room_types = get_cleaned_room_types(df_gsheet)
        st.session_state.data_source = 'gsheet_default'
    else:
        st.session_state.df, st.session_state.active_bookings = create_demo_data()
        if st.session_state.df is not None and not st.session_state.df.empty:
            st.session_state.room_types = get_cleaned_room_types(st.session_state.df)
        else:
            st.session_state.room_types = []
        st.session_state.data_source = 'demo'
    st.session_state.selected_calendar_date = None


df = st.session_state.get('df')
active_bookings = st.session_state.get('active_bookings')
room_types = st.session_state.get('room_types', []) 
default_min_date = datetime.date.today() - timedelta(days=365)
default_max_date = datetime.date.today() + timedelta(days=365)

if df is not None and not df.empty:
    for col in ['Check-in Date', 'Check-out Date', 'Booking Date']:
        if col in df.columns:
            df[col] = pd.to_datetime(df[col], errors='coerce')
if active_bookings is not None and not active_bookings.empty:
    for col in ['Check-in Date', 'Check-out Date', 'Booking Date']:
        if col in active_bookings.columns:
            active_bookings[col] = pd.to_datetime(active_bookings[col], errors='coerce')

min_date_val = (df['Check-in Date'].min().date() if df is not None and not df.empty and 'Check-in Date' in df.columns and not df['Check-in Date'].dropna().empty else default_min_date)
max_date_val = (df['Check-out Date'].max().date() if df is not None and not df.empty and 'Check-out Date' in df.columns and not df['Check-out Date'].dropna().empty else default_max_date)

# --- C√ÅC TAB CH·ª®C NƒÇNG ---
tab_titles = ["üìä Dashboard", "üìÖ L·ªãch ph√≤ng", "üìã Qu·∫£n l√Ω ƒë·∫∑t ph√≤ng", "üìà Ph√¢n t√≠ch", "üì∏ Th√™m t·ª´ ·∫¢nh", "‚ûï Th√™m ƒë·∫∑t ph√≤ng", "üìù X·ª≠ l√Ω HTML & N·ªëi d·ªØ li·ªáu", "üíå M·∫´u tin nh·∫Øn"]
tab_dashboard, tab_calendar, tab_booking_mgmt, tab_analytics, tab_add_from_image, tab_add_booking, tab_html_processing, tab_message_templates = st.tabs(tab_titles)

# --- TAB DASHBOARD ---
with tab_dashboard:
    st.header("üìä T·ªïng quan Dashboard")
    if df is not None and not df.empty and active_bookings is not None:
        st.markdown("#### S·ªë li·ªáu ch√≠nh")
        
        # --- GIAO DI·ªÜN S·ªê LI·ªÜU M·ªöI V·ªöI 6 METRIC G·ªêC ---
        row1_cols = st.columns(3)
        row2_cols = st.columns(3)
        today_dt = datetime.date.today()

        # --- H√ÄNG 1 ---
        # Metric 1: T·ªïng s·ªë ƒë·∫∑t ph√≤ng
        total_bookings_count = len(df)
        active_bookings_count = len(active_bookings) if active_bookings is not None else 0
        row1_cols[0].metric(
            label="T·ªïng ƒê·∫∑t Ph√≤ng",
            value=total_bookings_count,
            help=f"{active_bookings_count} ƒëang ho·∫°t ƒë·ªông."
        )

        # Metric 2: T·ªïng TT ƒë√£ Check-in (Gross)
        total_gross_checked_in = 0
        if not active_bookings.empty:
            checked_in_df = active_bookings[active_bookings['Check-in Date'].dt.date <= today_dt].copy()
            if not checked_in_df.empty:
                checked_in_df['T·ªïng thanh to√°n'] = pd.to_numeric(checked_in_df['T·ªïng thanh to√°n'], errors='coerce').fillna(0)
                total_gross_checked_in = checked_in_df['T·ªïng thanh to√°n'].sum()
        row1_cols[1].metric(
            label="T·ªïng TT ƒë√£ C/I (VND)",
            value=f"{total_gross_checked_in/1_000_000:.2f} Tr",
            help=f"T·ªïng ti·ªÅn (ch∆∞a tr·ª´ HH) c·ªßa c√°c ph√≤ng ƒë√£ check-in: {total_gross_checked_in:,.0f} VND"
        )

        # Metric 3: T·ªïng TT NET ƒë√£ Check-in
        total_net_checked_in = 0
        if 'total_gross_checked_in' in locals() and total_gross_checked_in > 0:
             total_net_checked_in = total_gross_checked_in * 0.8 # Gi·∫£ s·ª≠ HH 20%
        row1_cols[2].metric(
            label="T·ªïng TT NET ƒë√£ C/I (VND)",
            value=f"{total_net_checked_in/1_000_000:.2f} Tr",
            help=f"T·ªïng ti·ªÅn thu v·ªÅ (sau 20% HH) c·ªßa c√°c ph√≤ng ƒë√£ check-in: {total_net_checked_in:,.0f} VND"
        )

        # --- H√ÄNG 2 ---
        # Metric 4: T·ªïng TT d·ª± ki·∫øn (T·∫•t c·∫£ Hƒê, Gross)
        total_expected_gross = 0
        if not active_bookings.empty:
            active_bookings['T·ªïng thanh to√°n'] = pd.to_numeric(active_bookings['T·ªïng thanh to√°n'], errors='coerce').fillna(0)
            total_expected_gross = active_bookings['T·ªïng thanh to√°n'].sum()
        row2_cols[0].metric(
            label="T·ªïng TT d·ª± ki·∫øn (T·∫•t c·∫£ Hƒê)",
            value=f"{total_expected_gross/1_000_000:.2f} Tr",
            help=f"T·ªïng ti·ªÅn (ch∆∞a tr·ª´ HH) c·ªßa t·∫•t c·∫£ c√°c ph√≤ng ƒëang ho·∫°t ƒë·ªông: {total_expected_gross:,.0f} VND"
        )

        # Metric 5: T·ªïng ti·ªÅn NET (sau Hoa h·ªìng)
        total_expected_net = total_expected_gross * 0.8 # Gi·∫£ s·ª≠ HH 20%
        row2_cols[1].metric(
            label="T·ªïng ti·ªÅn NET (sau HH)",
            value=f"{total_expected_net/1_000_000:.2f} Tr",
            help=f"T·ªïng ti·ªÅn thu v·ªÅ (sau 20% HH) c·ªßa t·∫•t c·∫£ c√°c ph√≤ng ƒëang ho·∫°t ƒë·ªông: {total_expected_net:,.0f} VND"
        )

        # Metric 6: T·ª∑ l·ªá l·∫•p ƒë·∫ßy h√¥m nay
        occupied_today_count = 0
        if not active_bookings.empty:
            active_on_today = active_bookings[
                (active_bookings['Check-in Date'].dt.date <= today_dt) & 
                (active_bookings['Check-out Date'].dt.date > today_dt)
            ]
            occupied_today_count = len(active_on_today)
        occupancy_rate_today = (occupied_today_count / TOTAL_HOTEL_CAPACITY) * 100 if TOTAL_HOTEL_CAPACITY > 0 else 0
        row2_cols[2].metric(
            label="L·∫•p ƒë·∫ßy h√¥m nay",
            value=f"{occupancy_rate_today:.1f}%",
            delta=f"{occupied_today_count}/{TOTAL_HOTEL_CAPACITY} ph√≤ng",
            delta_color="off"
        )

    else:
        st.info(" D·ªØ li·ªáu kh√¥ng ƒë·ªß ho·∫∑c ch∆∞a ƒë∆∞·ª£c t·∫£i. Vui l√≤ng t·∫£i file ƒë·∫∑t ph√≤ng h·ª£p l·ªá.")
        if st.button("üîÑ T·∫£i l·∫°i d·ªØ li·ªáu demo", key="reload_demo_dashboard"):
            st.session_state.df, st.session_state.active_bookings = create_demo_data()
            st.session_state.room_types = get_cleaned_room_types(st.session_state.df)
            st.session_state.data_source = 'demo'; st.session_state.uploaded_file_name = None; st.session_state.selected_calendar_date = None
            st.rerun()

# --- TAB L·ªäCH PH√íNG ---
with tab_calendar:
    st.header("üìÖ L·ªãch ph√≤ng t·ªïng quan")
    st.subheader("T·ªïng quan ph√≤ng tr·ªëng")
    if active_bookings is not None:
        today_date = datetime.date.today(); tomorrow_date = today_date + timedelta(days=1)
        today_overall_info = get_overall_calendar_day_info(today_date, active_bookings, TOTAL_HOTEL_CAPACITY)
        total_available_today = today_overall_info['available_units']
        tomorrow_overall_info = get_overall_calendar_day_info(tomorrow_date, active_bookings, TOTAL_HOTEL_CAPACITY)
        total_available_tomorrow = tomorrow_overall_info['available_units']
        col_today_avail, col_tomorrow_avail = st.columns(2)
        with col_today_avail:
            st.markdown(f"##### H√¥m nay ({today_date.strftime('%d/%m')})")
            if total_available_today > 0: st.info(f"**{total_available_today}** ph√≤ng tr·ªëng / {TOTAL_HOTEL_CAPACITY} t·ªïng s·ªë")
            else: st.warning(f"H·∫øt ph√≤ng h√¥m nay ({TOTAL_HOTEL_CAPACITY} ph√≤ng ƒë√£ b·ªã chi·∫øm).")
        with col_tomorrow_avail:
            st.markdown(f"##### Ng√†y mai ({tomorrow_date.strftime('%d/%m')})")
            if total_available_tomorrow > 0: st.info(f"**{total_available_tomorrow}** ph√≤ng tr·ªëng / {TOTAL_HOTEL_CAPACITY} t·ªïng s·ªë")
            else: st.warning(f"H·∫øt ph√≤ng ng√†y mai ({TOTAL_HOTEL_CAPACITY} ph√≤ng ƒë√£ b·ªã chi·∫øm).")
    else: st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫∑t ph√≤ng ƒë·ªÉ t√≠nh ph√≤ng tr·ªëng.")
    st.markdown("---")
    col_nav1, col_nav_title, col_nav2 = st.columns([1, 2, 1])
    with col_nav1:
        if st.button("‚óÄÔ∏è Th√°ng tr∆∞·ªõc", key="prev_month_calendar", use_container_width=True):
            current_date_cal = st.session_state.current_date_calendar; first_day_current_month = current_date_cal.replace(day=1); last_day_prev_month = first_day_current_month - timedelta(days=1)
            st.session_state.current_date_calendar = last_day_prev_month.replace(day=1); st.session_state.selected_calendar_date = None; st.rerun()
    with col_nav_title: st.subheader(f"Th√°ng {st.session_state.current_date_calendar.month} nƒÉm {st.session_state.current_date_calendar.year}")
    with col_nav2:
        if st.button("Th√°ng sau ‚ñ∂Ô∏è", key="next_month_calendar", use_container_width=True):
            current_date_cal = st.session_state.current_date_calendar; days_in_month = calendar.monthrange(current_date_cal.year, current_date_cal.month)[1]
            first_day_next_month = current_date_cal.replace(day=1) + timedelta(days=days_in_month + 1)
            st.session_state.current_date_calendar = first_day_next_month.replace(day=1); st.session_state.selected_calendar_date = None; st.rerun()
    if st.button("üìÖ V·ªÅ th√°ng hi·ªán t·∫°i", key="today_month_calendar"):
        st.session_state.current_date_calendar = datetime.date.today(); st.session_state.selected_calendar_date = None; st.rerun()

    day_names = ["Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7", "Ch·ªß nh·∫≠t"]
    cols_header = st.columns(7)
    for i, day_name_header in enumerate(day_names): cols_header[i].markdown(f"<div class='day-header'>{day_name_header}</div>", unsafe_allow_html=True)

    if df is not None and not df.empty:
        current_year = st.session_state.current_date_calendar.year; current_month = st.session_state.current_date_calendar.month
        cal_obj = calendar.Calendar(); month_days_matrix = cal_obj.monthdayscalendar(current_year, current_month)
        for week_data in month_days_matrix:
            cols_week = st.columns(7)
            for i, day_num_cal in enumerate(week_data):
                with cols_week[i]:
                    if day_num_cal == 0: st.markdown(f"<div class='day-cell day-disabled'></div>", unsafe_allow_html=True)
                    else:
                        current_day_date_cal = datetime.date(current_year, current_month, day_num_cal)
                        day_info_cal = get_overall_calendar_day_info(current_day_date_cal, active_bookings, TOTAL_HOTEL_CAPACITY)
                        status_indicator_html = ""
                        if day_info_cal['status_indicator_type'] == "green_dot": status_indicator_html = "<div class='dot-indicator dot-green'>‚Ä¢</div>"
                        elif day_info_cal['status_indicator_type'] == "orange_dash": status_indicator_html = "<div class='dot-indicator dot-orange'>‚Äî</div>"
                        elif day_info_cal['status_indicator_type'] == "red_x": status_indicator_html = "<div class='dot-indicator dot-red'>‚úï</div>"
                        day_class = "day-cell"
                        if current_day_date_cal == datetime.date.today(): day_class += " day-today"
                        if st.session_state.selected_calendar_date == current_day_date_cal: day_class += " day-selected"
                        st.markdown(f"""<div class='{day_class}'><div class='day-number'>{day_num_cal}</div>{status_indicator_html}<div class='day-status'>{day_info_cal['status_text']}</div></div>""", unsafe_allow_html=True)
                        button_key_calendar = f"day_button_overlay_{current_day_date_cal.strftime('%Y%m%d')}"
                        if st.button("", key=button_key_calendar, help=f"Xem chi ti·∫øt ng√†y {current_day_date_cal.strftime('%d/%m/%Y')}"):
                            st.session_state.selected_calendar_date = None if st.session_state.selected_calendar_date == current_day_date_cal else current_day_date_cal
                            st.session_state.editing_booking_id_for_dialog = None
                            st.rerun()
    else: st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫∑t ph√≤ng ƒë·ªÉ hi·ªÉn th·ªã l·ªãch.")

    if st.session_state.selected_calendar_date is not None:
        selected_date_cal = st.session_state.selected_calendar_date
        st.markdown("---")
        with st.expander(f"üóìÔ∏è Chi ti·∫øt ho·∫°t ƒë·ªông ng√†y: {selected_date_cal.strftime('%A, %d/%m/%Y')}", expanded=True):
            daily_activity_cal = get_daily_activity(selected_date_cal, active_bookings)
            col_checkin_cal, col_checkout_cal, col_occupied_cal = st.columns(3)
            with col_checkin_cal:
                st.markdown("##### üõ¨ Kh√°ch Check-in")
                if daily_activity_cal['check_in']:
                    st.success(f"**{len(daily_activity_cal['check_in'])}** l∆∞·ª£t check-in:")
                    for guest in daily_activity_cal['check_in']: st.markdown(f"- **{guest.get('name','N/A')}** ({guest.get('room_type','N/A')})"); st.caption(f"  M√£ ƒêP: {guest.get('booking_id','N/A')}")
                else: st.info("Kh√¥ng c√≥ kh√°ch check-in.")
            with col_checkout_cal:
                st.markdown("##### üõ´ Kh√°ch Check-out")
                if daily_activity_cal['check_out']:
                    st.warning(f"**{len(daily_activity_cal['check_out'])}** l∆∞·ª£t check-out:")
                    for guest in daily_activity_cal['check_out']: st.markdown(f"- **{guest.get('name','N/A')}** ({guest.get('room_type','N/A')})"); st.caption(f"  M√£ ƒêP: {guest.get('booking_id','N/A')}")
                else: st.info("Kh√¥ng c√≥ kh√°ch check-out.")
            with col_occupied_cal:
                st.markdown("##### üè® Kh√°ch ƒëang ·ªü")
                if daily_activity_cal['occupied']:
                    st.info(f"**{len(daily_activity_cal['occupied'])}** l∆∞·ª£t kh√°ch ·ªü:")
                    for guest in daily_activity_cal['occupied']:
                        check_in_str = guest['check_in'].strftime('%d/%m') if guest['check_in'] else 'N/A'
                        check_out_str = guest['check_out'].strftime('%d/%m') if guest['check_out'] else 'N/A'
                        total_payment_val = guest.get('total_payment', 0.0)
                        total_payment_str = f"{total_payment_val:,.0f}" if pd.notna(total_payment_val) and total_payment_val != 0.0 else "0"
                        st.markdown(f"- **{guest.get('name','N/A')}** ({guest.get('room_type','N/A')})")
                        st.caption(f"  T·ª´ {check_in_str} ƒë·∫øn {check_out_str} (M√£ ƒêP: {guest.get('booking_id','N/A')}) - T·ªïng ti·ªÅn: {total_payment_str}")
                        st.markdown("<div class='guest-separator'></div>", unsafe_allow_html=True)
                else: st.info("Kh√¥ng c√≥ kh√°ch ƒëang ·ªü.")
            if st.button("·∫®n chi ti·∫øt ng√†y", key="hide_day_details_calendar", type="primary"):
                st.session_state.selected_calendar_date = None; st.rerun()

# --- TAB QU·∫¢N L√ù ƒê·∫∂T PH√íNG ---
with tab_booking_mgmt:
    st.header("üìã Qu·∫£n l√Ω t·∫•t c·∫£ ƒë·∫∑t ph√≤ng")
    if df is not None and not df.empty:
        # --- PH·∫¶N L·ªåC D·ªÆ LI·ªÜU (GI·ªÆ NGUY√äN) ---
        st.markdown("##### B·ªô l·ªçc ƒë·∫∑t ph√≤ng")
        filter_cols_main = st.columns([2, 2, 3])
        with filter_cols_main[0]:
            unique_statuses_mgmt_list = sorted(df['T√¨nh tr·∫°ng'].dropna().astype(str).unique().tolist()) if 'T√¨nh tr·∫°ng' in df.columns else []
            status_filter_manage = st.multiselect("Tr·∫°ng th√°i:", options=unique_statuses_mgmt_list, default=unique_statuses_mgmt_list, key="status_filter_manage_tab3_v6")
        with filter_cols_main[1]:
            unique_room_types_manage = st.session_state.get('room_types', [])
            room_filter_manage = st.multiselect("Lo·∫°i ph√≤ng:", options=unique_room_types_manage, default=unique_room_types_manage, key="room_filter_manage_tab3_v6")
        with filter_cols_main[2]:
            temp_max_date_filter = max_date_val if min_date_val <= max_date_val else min_date_val + timedelta(days=1)
            date_range_manage = st.date_input("Kho·∫£ng ng√†y check-in:", value=(min_date_val, temp_max_date_filter), min_value=min_date_val, max_value=temp_max_date_filter, key="date_range_filter_manage_tab3_v6")

        df_after_main_filters = df.copy()
        if status_filter_manage and 'T√¨nh tr·∫°ng' in df_after_main_filters.columns:
            df_after_main_filters = df_after_main_filters[df_after_main_filters['T√¨nh tr·∫°ng'].isin(status_filter_manage)]
        if room_filter_manage and 'T√™n ch·ªó ngh·ªâ' in df_after_main_filters.columns:
            df_after_main_filters = df_after_main_filters[df_after_main_filters['T√™n ch·ªó ngh·ªâ'].isin(room_filter_manage)]
        if date_range_manage and len(date_range_manage) == 2 and 'Check-in Date' in df_after_main_filters.columns:
            start_date_filter_mgmt, end_date_filter_mgmt = date_range_manage
            df_after_main_filters = df_after_main_filters[(pd.to_datetime(df_after_main_filters['Check-in Date']).dt.date >= start_date_filter_mgmt) & (pd.to_datetime(df_after_main_filters['Check-in Date']).dt.date <= end_date_filter_mgmt)]

        search_term_mgmt = st.text_input("T√¨m theo t√™n kh√°ch ho·∫∑c m√£ ƒë·∫∑t ph√≤ng:", key="search_booking_tab3_v6", placeholder="Nh·∫≠p t·ª´ kh√≥a...")
        if search_term_mgmt:
            df_after_main_filters = df_after_main_filters[
                (df_after_main_filters['T√™n ng∆∞·ªùi ƒë·∫∑t'].astype(str).str.contains(search_term_mgmt, case=False, na=False)) |
                (df_after_main_filters['S·ªë ƒë·∫∑t ph√≤ng'].astype(str).str.contains(search_term_mgmt, case=False, na=False))
            ]
        
        # --- LOGIC S·∫ÆP X·∫æP ---
        # Kh·ªüi t·∫°o session state cho vi·ªác s·∫Øp x·∫øp n·∫øu ch∆∞a c√≥
        if 'sort_column' not in st.session_state:
            st.session_state.sort_column = 'Check-in Date'
        if 'sort_ascending' not in st.session_state:
            st.session_state.sort_ascending = False

        # S·∫Øp x·∫øp DataFrame d·ª±a tr√™n session_state
        try:
            df_filtered = df_after_main_filters.sort_values(
                by=st.session_state.sort_column, 
                ascending=st.session_state.sort_ascending
            )
        except Exception as e:
            st.warning(f"Kh√¥ng th·ªÉ s·∫Øp x·∫øp theo c·ªôt '{st.session_state.sort_column}'. Quay v·ªÅ m·∫∑c ƒë·ªãnh. L·ªói: {e}")
            st.session_state.sort_column = 'Check-in Date'
            st.session_state.sort_ascending = False
            df_filtered = df_after_main_filters.sort_values(by='Check-in Date', ascending=False)

        st.markdown("---")
        
        if df_filtered.empty:
            st.info("Kh√¥ng c√≥ ƒë·∫∑t ph√≤ng n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm.")
        else:
            delete_button_placeholder = st.empty()
            st.write(f"T√¨m th·∫•y {len(df_filtered)} ƒë·∫∑t ph√≤ng:")
            
            # --- GIAO DI·ªÜN B·∫¢NG V·ªöI HEADER C√ì TH·ªÇ S·∫ÆP X·∫æP ---
            columns_map = {
                'T√™n ng∆∞·ªùi ƒë·∫∑t': 'Kh√°ch',
                'Check-in Date': 'Check-in',
                'Check-out Date': 'Check-out',
                'Stay Duration': 'S·ªë ƒë√™m',
                'T√¨nh tr·∫°ng': 'Tr·∫°ng th√°i',
                'T·ªïng thanh to√°n': 'T·ªïng ti·ªÅn (VND)',
                'Booking Date': 'Ng√†y th√™m kh√°ch',
                'Ng∆∞·ªùi thu ti·ªÅn': 'Ng∆∞·ªùi thu ti·ªÅn'
            }
            col_ratios = [0.4, 2.5, 1, 1, 0.8, 1, 1.5, 1.5, 1.5, 1]
            
            # V·∫Ω Header v·ªõi c√°c n√∫t b·∫•m
            header_cols = st.columns(col_ratios)
            header_cols[0].markdown("**Ch·ªçn**")
            
            for i, (col_key, col_title) in enumerate(columns_map.items()):
                with header_cols[i+1]:
                    sort_indicator = ""
                    if st.session_state.sort_column == col_key:
                        sort_indicator = " ‚ñ≤" if st.session_state.sort_ascending else " ‚ñº"
                    
                    if st.button(f"{col_title}{sort_indicator}", key=f"sort_{col_key}", use_container_width=True):
                        if st.session_state.sort_column == col_key:
                            st.session_state.sort_ascending = not st.session_state.sort_ascending
                        else:
                            st.session_state.sort_column = col_key
                            st.session_state.sort_ascending = True # M·∫∑c ƒë·ªãnh tƒÉng d·∫ßn cho c·ªôt m·ªõi
                        st.rerun()

            header_cols[-1].markdown("**H√†nh ƒë·ªông**")
            st.markdown("<hr style='margin:0; padding:0;'>", unsafe_allow_html=True)

            # V√≤ng l·∫∑p ƒë·ªÉ v·∫Ω t·ª´ng h√†ng (kh√¥ng thay ƒë·ªïi)
            checkbox_info = {}
            for index, row in df_filtered.iterrows():
                row_cols = st.columns(col_ratios)
                booking_id = row.get('S·ªë ƒë·∫∑t ph√≤ng', f"index_{index}")
                checkbox_key = f"cb_{booking_id}_{index}"
                is_checked = row_cols[0].checkbox("", key=checkbox_key, label_visibility="collapsed")
                checkbox_info[index] = is_checked

                for i, col_key in enumerate(columns_map.keys()):
                    value = row.get(col_key)
                    if isinstance(value, (datetime.datetime, pd.Timestamp)):
                        row_cols[i+1].write(value.strftime('%d/%m/%Y'))
                    elif col_key in ['T·ªïng thanh to√°n', 'Gi√° m·ªói ƒë√™m']:
                        try:
                            row_cols[i+1].write(f"{float(value):,.0f}")
                        except (ValueError, TypeError):
                            row_cols[i+1].write("0")
                    else:
                        row_cols[i+1].write(value)
                
                action_col = row_cols[-1]
                if action_col.button("S·ª≠a", key=f"edit_{booking_id}_{index}", use_container_width=True):
                    st.session_state.editing_booking_id_for_dialog = booking_id
                    st.rerun()

            # X·ª≠ l√Ω n√∫t x√≥a ·ªü tr√™n c√πng (kh√¥ng thay ƒë·ªïi)
            indices_to_delete = [index for index, checked in checkbox_info.items() if checked]
            if indices_to_delete:
                with delete_button_placeholder.container():
                    st.warning(f"B·∫°n ƒë√£ ch·ªçn {len(indices_to_delete)} ƒë·∫∑t ph√≤ng.")
                    if st.button(f"X√°c nh·∫≠n x√≥a {len(indices_to_delete)} ƒë·∫∑t ph√≤ng ƒë√£ ch·ªçn", type="primary", use_container_width=True):
                        st.session_state.df = st.session_state.df.drop(index=indices_to_delete).reset_index(drop=True)
                        st.session_state.active_bookings = st.session_state.df[st.session_state.df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy()
                        st.session_state.last_action_message = f"ƒê√£ x√≥a th√†nh c√¥ng {len(indices_to_delete)} ƒë·∫∑t ph√≤ng."
                        st.rerun()

            if st.session_state.last_action_message:
                st.success(st.session_state.last_action_message)
                st.session_state.last_action_message = None

# --- TAB TH√äM T·ª™ ·∫¢NH (ƒê√£ s·ª≠a l·ªói v√† n√¢ng c·∫•p) ---
with tab_add_from_image:
    st.header("üì∏ Th√™m ƒê·∫∑t Ph√≤ng t·ª´ ·∫¢nh")
    st.info(
        "S·ª≠ d·ª•ng m·ªôt trong hai c√°ch:\n"
        "1. **T·∫£i l√™n file ·∫£nh** (.png, .jpg) ch·ª©a danh s√°ch ƒë·∫∑t ph√≤ng.\n"
        "2. **D√°n ·∫£nh ch·ª•p m√†n h√¨nh** tr·ª±c ti·∫øp v√†o khung b√™n d∆∞·ªõi (Ctrl+V)."
    )

    # --- KH·ªûI T·∫†O C√ÅC BI·∫æN SESSION STATE C·∫¶N THI·∫æT ---
    if 'image_bytes_to_process' not in st.session_state:
        st.session_state.image_bytes_to_process = None
    if 'extracted_list_data' not in st.session_state:
        st.session_state.extracted_list_data = None
    # THAY ƒê·ªîI 1: Th√™m state ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu th√¥ t·ª´ component
    if 'pasted_b64_data' not in st.session_state:
        st.session_state.pasted_b64_data = None

    # --- PH·∫¶N NH·∫¨P LI·ªÜU ---
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("C√°ch 1: T·∫£i l√™n t·ªáp")
        uploaded_image_file = st.file_uploader(
            "Ch·ªçn m·ªôt file ·∫£nh",
            type=["png", "jpg", "jpeg"],
            key="image_booking_list_uploader"
        )
        if uploaded_image_file:
            st.session_state.image_bytes_to_process = uploaded_image_file.getvalue()
            st.session_state.extracted_list_data = None
            st.session_state.pasted_b64_data = None # X√≥a d·ªØ li·ªáu d√°n c≈©
            st.rerun()

    with col2:
        st.subheader("C√°ch 2: D√°n ·∫£nh")
        with open("components/paste_image.html", "r", encoding="utf-8") as f:
            html_code = f.read()
        
        component_return_value = components.html(html_code, height=170)

        # THAY ƒê·ªîI 2: Logic nh·∫≠n d·ªØ li·ªáu m·ªõi - Ch·ªâ l∆∞u v√† rerun
        if component_return_value and component_return_value != st.session_state.pasted_b64_data:
            # Ch·ªâ l∆∞u d·ªØ li·ªáu v√†o state v√† rerun, kh√¥ng x·ª≠ l√Ω ngay
            st.session_state.pasted_b64_data = component_return_value
            st.session_state.extracted_list_data = None
            st.session_state.image_bytes_to_process = None # X√≥a d·ªØ li·ªáu t·∫£i l√™n c≈©
            st.rerun()

    st.markdown("---")

    # --- PH·∫¶N X·ª¨ L√ù D·ªÆ LI·ªÜU D√ÅN (CH·∫†Y ·ªû L·∫¶N RERUN TH·ª® 2) ---
    # THAY ƒê·ªîI 3: T√°ch ri√™ng kh·ªëi x·ª≠ l√Ω d·ªØ li·ªáu d√°n
    if st.session_state.pasted_b64_data and st.session_state.image_bytes_to_process is None:
        try:
            # B√¢y gi·ªù x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ session_state m·ªôt c√°ch an to√†n
            image_data = st.session_state.pasted_b64_data.split(",")[1]
            st.session_state.image_bytes_to_process = base64.b64decode(image_data)
            # X√≥a d·ªØ li·ªáu th√¥ sau khi ƒë√£ x·ª≠ l√Ω ƒë·ªÉ tr√°nh l·∫∑p l·∫°i
            st.session_state.pasted_b64_data = None
            st.rerun() # Rerun m·ªôt l·∫ßn n·ªØa ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh preview
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh ƒë∆∞·ª£c d√°n: {e}")
            st.session_state.pasted_b64_data = None # X√≥a d·ªØ li·ªáu l·ªói

    # --- PH·∫¶N X·ª¨ L√ù V√Ä HI·ªÇN TH·ªä (GI·ªÆ NGUY√äN) ---
    if st.session_state.image_bytes_to_process and not st.session_state.extracted_list_data:
        st.subheader("·∫¢nh ƒë√£ s·∫µn s√†ng ƒë·ªÉ x·ª≠ l√Ω:")
        st.image(st.session_state.image_bytes_to_process, use_column_width=True)

        if st.button("üîç Tr√≠ch xu·∫•t th√¥ng tin t·ª´ ·∫£nh n√†y", type="primary"):
            with st.spinner("ƒêang ph√¢n t√≠ch ·∫£nh v√† tr√≠ch xu·∫•t danh s√°ch ƒë·∫∑t ph√≤ng..."):
                list_of_extracted_data = extract_booking_info_from_image_content(st.session_state.image_bytes_to_process)
                st.session_state.extracted_list_data = list_of_extracted_data
            
            if list_of_extracted_data and not (isinstance(list_of_extracted_data[0], dict) and list_of_extracted_data[0].get("errors")):
                 st.success(f"Ho√†n t·∫•t! ƒê√£ tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(list_of_extracted_data)} ƒë·∫∑t ph√≤ng. Vui l√≤ng ki·ªÉm tra k·∫øt qu·∫£ b√™n d∆∞·ªõi.")
            else:
                 error_msg = list_of_extracted_data[0].get("errors", ["L·ªói kh√¥ng x√°c ƒë·ªãnh."]) if list_of_extracted_data else ["Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ."]
                 st.error(f"Kh√¥ng th·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu. L·ªói: {error_msg[0]}")
            st.rerun()

    if st.session_state.extracted_list_data:
        st.subheader("K·∫øt qu·∫£ tr√≠ch xu·∫•t")
        
        # ... (To√†n b·ªô ph·∫ßn logic hi·ªÉn th·ªã v√† th√™m DataFrame gi·ªØ nguy√™n nh∆∞ c≈©)
        extracted_df = pd.DataFrame(st.session_state.extracted_list_data)

        display_cols = [
            'guest_name', 'check_in_date', 'check_out_date', 'room_type', 
            'total_payment', 'commission', 'booking_id', 'errors'
        ]
        existing_display_cols = [col for col in display_cols if col in extracted_df.columns]
        
        st.dataframe(extracted_df[existing_display_cols])

        if st.button("‚ûï Th√™m t·∫•t c·∫£ c√°c ƒë·∫∑t ph√≤ng h·ª£p l·ªá v√†o h·ªá th·ªëng", key="add_all_from_image_list"):
            if st.session_state.df is None:
                st.error("D·ªØ li·ªáu ch√≠nh ch∆∞a ƒë∆∞·ª£c t·∫£i. Kh√¥ng th·ªÉ th√™m.")
            else:
                new_bookings_list = []
                skipped_count = 0
                added_count = 0
                
                main_df_booking_ids = set(st.session_state.df['S·ªë ƒë·∫∑t ph√≤ng'].astype(str).tolist())

                for index, row in extracted_df.iterrows():
                    if (row.get('errors') and any(row['errors'])) or not all([row.get('guest_name'), row.get('check_in_date'), row.get('check_out_date')]):
                        skipped_count += 1
                        continue
                    
                    if str(row.get('booking_id')) in main_df_booking_ids:
                        skipped_count += 1
                        continue

                    check_in = row['check_in_date']
                    check_out = row['check_out_date']
                    stay_duration = (check_out - check_in).days if check_out > check_in else 0
                    total_payment = float(row.get('total_payment', 0))
                    price_per_night = round(total_payment / stay_duration) if stay_duration > 0 else 0.0

                    new_booking_data = {
                        'T√™n ch·ªó ngh·ªâ': row.get('room_type', 'N/A'),
                        'V·ªã tr√≠': "N/A (t·ª´ ·∫£nh)",
                        'T√™n ng∆∞·ªùi ƒë·∫∑t': row.get('guest_name'),
                        'Th√†nh vi√™n Genius': row.get('genius_member', 'Kh√¥ng'),
                        'Ng√†y ƒë·∫øn': f"ng√†y {check_in.day} th√°ng {check_in.month} nƒÉm {check_in.year}",
                        'Ng√†y ƒëi': f"ng√†y {check_out.day} th√°ng {check_out.month} nƒÉm {check_out.year}",
                        'ƒê∆∞·ª£c ƒë·∫∑t v√†o': f"ng√†y {datetime.date.today().day} th√°ng {datetime.date.today().month} nƒÉm {datetime.date.today().year}",
                        'T√¨nh tr·∫°ng': row.get('status', 'OK'),
                        'T·ªïng thanh to√°n': total_payment,
                        'Hoa h·ªìng': float(row.get('commission', 0)),
                        'Ti·ªÅn t·ªá': row.get('currency', 'VND'),
                        'S·ªë ƒë·∫∑t ph√≤ng': str(row.get('booking_id', f"IMG_{datetime.datetime.now().strftime('%y%m%d%H%M%S')}_{index}")),
                        'Check-in Date': pd.Timestamp(check_in),
                        'Check-out Date': pd.Timestamp(check_out),
                        'Booking Date': pd.Timestamp(datetime.date.today()),
                        'Stay Duration': stay_duration,
                        'Gi√° m·ªói ƒë√™m': price_per_night,
                        'Ng∆∞·ªùi thu ti·ªÅn': "N/A"
                    }
                    new_bookings_list.append(new_booking_data)
                    main_df_booking_ids.add(str(new_booking_data['S·ªë ƒë·∫∑t ph√≤ng']))
                    added_count += 1

                if new_bookings_list:
                    new_bookings_df = pd.DataFrame(new_bookings_list)
                    st.session_state.df = pd.concat([st.session_state.df, new_bookings_df], ignore_index=True)
                    st.session_state.active_bookings = st.session_state.df[st.session_state.df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy()
                    st.session_state.room_types = get_cleaned_room_types(st.session_state.df)
                
                st.session_state.last_action_message = f"‚úÖ Ho√†n t·∫•t! ƒê√£ th√™m {added_count} ƒë·∫∑t ph√≤ng m·ªõi. B·ªè qua {skipped_count} ƒë·∫∑t ph√≤ng (do l·ªói ho·∫∑c tr√πng l·∫∑p)."
                st.session_state.extracted_list_data = None
                st.session_state.image_bytes_to_process = None
                st.rerun()

        if st.button("H·ªßy v√† x√≥a k·∫øt qu·∫£", key="clear_image_list_results"):
            st.session_state.extracted_list_data = None
            st.session_state.image_bytes_to_process = None
            st.rerun()

# --- TAB TH√äM ƒê·∫∂T PH√íNG M·ªöI ---
with tab_add_booking:
    st.header("‚ûï Th√™m ƒë·∫∑t ph√≤ng m·ªõi")

    room_types_options = st.session_state.get('room_types', []) 
    if not room_types_options:
        st.warning("Kh√¥ng c√≥ th√¥ng tin lo·∫°i ph√≤ng. Vui l√≤ng t·∫£i file d·ªØ li·ªáu tr∆∞·ªõc.")
        room_types_options = ["Ch∆∞a c√≥ lo·∫°i ph√≤ng - Vui l√≤ng t·∫£i d·ªØ li·ªáu"]

    if 'add_form_check_in_final' not in st.session_state:
        st.session_state.add_form_check_in_final = datetime.date.today()

    _min_checkout_date_calculated_final = st.session_state.add_form_check_in_final + timedelta(days=1)

    if 'add_form_check_out_final' not in st.session_state:
        st.session_state.add_form_check_out_final = _min_checkout_date_calculated_final
    else:
        if st.session_state.add_form_check_out_final < _min_checkout_date_calculated_final:
            st.session_state.add_form_check_out_final = _min_checkout_date_calculated_final

    with st.form(key="add_booking_form_v8_stable_dates"):
        st.subheader("Th√¥ng tin ƒë·∫∑t ph√≤ng")
        col_form_add1, col_form_add2 = st.columns(2)

        with col_form_add1:
            guest_name_form = st.text_input("T√™n kh√°ch*", placeholder="Nh·∫≠p t√™n ƒë·∫ßy ƒë·ªß", key="form_v8_guest_name")
            
            default_room_type_val = st.session_state.get("form_v8_room_type", room_types_options[0] if room_types_options else None)
            room_type_idx = room_types_options.index(default_room_type_val) if default_room_type_val in room_types_options else 0
            room_type_form = st.selectbox("Lo·∫°i ph√≤ng*", options=room_types_options, index=room_type_idx, key="form_v8_room_type")
            
            genius_options_add_list = ["Kh√¥ng", "C√≥"]
            default_genius_val = st.session_state.get("form_v8_genius", genius_options_add_list[0])
            genius_idx = genius_options_add_list.index(default_genius_val) if default_genius_val in genius_options_add_list else 0
            genius_member_form = st.selectbox("Th√†nh vi√™n Genius", options=genius_options_add_list, index=genius_idx, key="form_v8_genius")

        with col_form_add2:
            st.date_input("Ng√†y check-in*", value=st.session_state.add_form_check_in_final, key="add_form_check_in_final")
            st.date_input("Ng√†y check-out*", value=st.session_state.add_form_check_out_final, min_value=_min_checkout_date_calculated_final, key="add_form_check_out_final")
            
            status_options_add_list = ["OK", "ƒê√£ h·ªßy", "Ch·ªù x·ª≠ l√Ω"]
            default_status_val = st.session_state.get("form_v8_status", status_options_add_list[0])
            status_idx = status_options_add_list.index(default_status_val) if default_status_val in status_options_add_list else 0
            booking_status_form = st.selectbox("Tr·∫°ng th√°i ƒë·∫∑t ph√≤ng", options=status_options_add_list, index=status_idx, key="form_v8_status")
        
        st.markdown("---"); st.subheader("Th√¥ng tin thanh to√°n")
        col_form_add3, col_form_add4 = st.columns(2)
        with col_form_add3:
            total_payment_form = st.number_input("T·ªïng thanh to√°n (VND)*", min_value=0, step=50000, format="%d", key="form_v8_total_payment")
            commission_form = st.number_input("Hoa h·ªìng (VND)", min_value=0, step=10000, format="%d", key="form_v8_commission")
        with col_form_add4:
            currency_options_add_list = ["VND", "USD"]
            default_currency_val = st.session_state.get("form_v8_currency", currency_options_add_list[0])
            currency_idx = currency_options_add_list.index(default_currency_val) if default_currency_val in currency_options_add_list else 0
            currency_form = st.selectbox("Ti·ªÅn t·ªá", options=currency_options_add_list, index=currency_idx, key="form_v8_currency")
            
            default_booking_id_add = f"MANUAL{datetime.datetime.now().strftime('%y%m%d%H%M%S')}"
            if 'form_v8_booking_id' not in st.session_state:
                st.session_state.form_v8_booking_id = default_booking_id_add
            booking_id_form = st.text_input("M√£ ƒë·∫∑t ph√≤ng (t·ª± ƒë·ªông n·∫øu tr·ªëng)", key="form_v8_booking_id")

            collector_options_list = ["LOC LE", "THAO LE", "N/A"]
            default_collector_val = st.session_state.get("form_v8_nguoi_thu_tien", collector_options_list[0])
            collector_idx = collector_options_list.index(default_collector_val) if default_collector_val in collector_options_list else 0
            nguoi_thu_tien_form = st.selectbox("Ng∆∞·ªùi thu ti·ªÅn*", options=collector_options_list, index=collector_idx, key="form_v8_nguoi_thu_tien")
        
        submitted_form_add = st.form_submit_button("üíæ Th√™m ƒë·∫∑t ph√≤ng n√†y", type="primary")
        
        if submitted_form_add:
            errors = [] 
            final_check_in_date = st.session_state.add_form_check_in_final
            final_check_out_date = st.session_state.add_form_check_out_final

            if not guest_name_form.strip(): errors.append("T√™n kh√°ch kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
            if final_check_out_date <= final_check_in_date: 
                errors.append(f"Ng√†y check-out ({final_check_out_date.strftime('%d/%m/%Y')}) ph·∫£i sau ng√†y check-in ({final_check_in_date.strftime('%d/%m/%Y')}).")
            if total_payment_form <= 0 and booking_status_form == "OK": errors.append("T·ªïng thanh to√°n ph·∫£i > 0 cho ƒë·∫∑t ph√≤ng 'OK'.")
            if room_type_form == "Ch∆∞a c√≥ lo·∫°i ph√≤ng - Vui l√≤ng t·∫£i d·ªØ li·ªáu" or not room_type_form :
                errors.append("Lo·∫°i ph√≤ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng t·∫£i d·ªØ li·ªáu c√≥ th√¥ng tin lo·∫°i ph√≤ng.")
            if not nguoi_thu_tien_form: errors.append("Ng∆∞·ªùi thu ti·ªÅn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")

            final_booking_id = booking_id_form.strip() if booking_id_form.strip() else default_booking_id_add
            current_df_for_check = st.session_state.get('df')
            if current_df_for_check is not None and not current_df_for_check.empty and 'S·ªë ƒë·∫∑t ph√≤ng' in current_df_for_check.columns and final_booking_id in current_df_for_check['S·ªë ƒë·∫∑t ph√≤ng'].values:
                errors.append(f"M√£ ƒë·∫∑t ph√≤ng '{final_booking_id}' ƒë√£ t·ªìn t·∫°i.")

            active_bookings_for_check = st.session_state.get('active_bookings')
            if not errors and booking_status_form == "OK": 
                if active_bookings_for_check is not None and room_types_options and room_type_form not in ["Ch∆∞a c√≥ lo·∫°i ph√≤ng - Vui l√≤ng t·∫£i d·ªØ li·ªáu", None, ""]: 
                    current_check_date_form_add = final_check_in_date 
                    while current_check_date_form_add < final_check_out_date: 
                        availability_check_specific_add = get_room_availability(current_check_date_form_add, active_bookings_for_check, [room_type_form], ROOM_UNIT_PER_ROOM_TYPE)
                        if availability_check_specific_add.get(room_type_form, 0) <= 0:
                            errors.append(f"Ph√≤ng '{room_type_form}' ƒë√£ h·∫øt v√†o ng√†y {current_check_date_form_add.strftime('%d/%m/%Y')}.")
                            break 
                        
                        occupied_on_this_day = len(active_bookings_for_check[
                            (active_bookings_for_check['Check-in Date'].dt.date <= current_check_date_form_add) &
                            (active_bookings_for_check['Check-out Date'].dt.date > current_check_date_form_add) &
                            (active_bookings_for_check['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy')
                        ])
                        if occupied_on_this_day >= TOTAL_HOTEL_CAPACITY:
                            errors.append(f"Ng√†y {current_check_date_form_add.strftime('%d/%m/%Y')} ƒë√£ c√≥ ƒë·ªß {TOTAL_HOTEL_CAPACITY} kh√°ch. Kh√¥ng th·ªÉ th√™m ƒë·∫∑t ph√≤ng m·ªõi.")
                            break
                        current_check_date_form_add += timedelta(days=1)
            
            if errors: 
                for error_msg in errors: st.error(error_msg)
            else: 
                default_location = "N/A (Ch∆∞a x√°c ƒë·ªãnh)"
                current_df_for_add = st.session_state.get('df')
                if current_df_for_add is not None and not current_df_for_add.empty and 'T√™n ch·ªó ngh·ªâ' in current_df_for_add.columns and 'V·ªã tr√≠' in current_df_for_add.columns:
                    room_specific_locations_df = current_df_for_add[current_df_for_add['T√™n ch·ªó ngh·ªâ'] == room_type_form]
                    if not room_specific_locations_df.empty:
                        unique_room_locations = room_specific_locations_df['V·ªã tr√≠'].dropna().unique()
                        if len(unique_room_locations) > 0 and pd.notna(unique_room_locations[0]):
                            default_location = str(unique_room_locations[0])
                
                stay_duration_val = (final_check_out_date - final_check_in_date).days
                total_payment_val = float(total_payment_form)
                price_per_night_val = round(total_payment_val / stay_duration_val) if stay_duration_val > 0 else 0.0

                new_booking_data = {
                    'T√™n ch·ªó ngh·ªâ': room_type_form, 'V·ªã tr√≠': default_location,
                    'T√™n ng∆∞·ªùi ƒë·∫∑t': guest_name_form.strip(), 'Th√†nh vi√™n Genius': genius_member_form,
                    'Ng√†y ƒë·∫øn': f"ng√†y {final_check_in_date.day} th√°ng {final_check_in_date.month} nƒÉm {final_check_in_date.year}",
                    'Ng√†y ƒëi': f"ng√†y {final_check_out_date.day} th√°ng {final_check_out_date.month} nƒÉm {final_check_out_date.year}",
                    'ƒê∆∞·ª£c ƒë·∫∑t v√†o': f"ng√†y {datetime.date.today().day} th√°ng {datetime.date.today().month} nƒÉm {datetime.date.today().year}",
                    'T√¨nh tr·∫°ng': booking_status_form, 'T·ªïng thanh to√°n': total_payment_val,
                    'Hoa h·ªìng': float(commission_form), 'Ti·ªÅn t·ªá': currency_form,
                    'S·ªë ƒë·∫∑t ph√≤ng': final_booking_id,
                    'Check-in Date': pd.Timestamp(final_check_in_date),
                    'Check-out Date': pd.Timestamp(final_check_out_date),
                    'Booking Date': pd.Timestamp(datetime.date.today()),
                    'Stay Duration': stay_duration_val,
                    'Gi√° m·ªói ƒë√™m': price_per_night_val,
                    'Ng∆∞·ªùi thu ti·ªÅn': nguoi_thu_tien_form
                }
                new_booking_df_row = pd.DataFrame([new_booking_data])
                
                df_to_update = st.session_state.get('df')
                if df_to_update is None or df_to_update.empty:
                    st.session_state.df = new_booking_df_row
                else:
                    st.session_state.df = pd.concat([df_to_update, new_booking_df_row], ignore_index=True)
                
                st.session_state.active_bookings = st.session_state.df[st.session_state.df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy()
                st.session_state.room_types = get_cleaned_room_types(st.session_state.df)

                success_message = f"ƒê·∫∑t ph√≤ng '{final_booking_id}' cho kh√°ch '{guest_name_form.strip()}' ƒë√£ ƒë∆∞·ª£c th√™m!"
                st.session_state.add_booking_success_message = success_message
                st.session_state.show_add_booking_success_dialog = True
                
                if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
                    telegram_message = f"üì¢ ƒê·∫∑t ph√≤ng M·ªöI!\n"
                    telegram_message += f"üë§ Kh√°ch: {guest_name_form.strip()}\n"
                    telegram_message += f"üè† Ph√≤ng: {room_type_form}\n"
                    telegram_message += f"üìÖ Check-in: {final_check_in_date.strftime('%d/%m/%Y')}\n"
                    telegram_message += f"üìÖ Check-out: {final_check_out_date.strftime('%d/%m/%Y')}\n"
                    telegram_message += f"üí∞ T·ªïng TT: {total_payment_val:,.0f} {currency_form}\n"
                    telegram_message += f"üÜî M√£ ƒêP: {final_booking_id}"
                    asyncio.run(send_telegram_message(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, telegram_message))

                st.session_state.last_action_message = f"ƒê√£ th√™m ƒë·∫∑t ph√≤ng {final_booking_id}."
                st.session_state.selected_calendar_date = None 
                
                form_keys_to_clear = [
                    "form_v8_guest_name", "form_v8_room_type", "form_v8_genius",
                    "form_v8_status", "form_v8_total_payment", "form_v8_commission",
                    "form_v8_currency", "form_v8_booking_id", "form_v8_nguoi_thu_tien",
                    "add_form_check_in_final", "add_form_check_out_final"
                ]
                for key_to_clear in form_keys_to_clear:
                    if key_to_clear in st.session_state:
                        del st.session_state[key_to_clear]
                
                st.rerun()

    if st.session_state.get('show_add_booking_success_dialog', False):
        show_success_notification_dialog(st.session_state.get('add_booking_success_message', "Thao t√°c th√†nh c√¥ng!"))

# --- TAB X·ª¨ L√ù HTML & N·ªêI D·ªÆ LI·ªÜU ---
with tab_html_processing:
    st.header("üìù X·ª≠ l√Ω File HTML m·ªõi v√† N·ªëi v√†o D·ªØ li·ªáu Ch√≠nh")
    st.info("T·∫£i l√™n file HTML ch·ª©a th√¥ng tin ƒë·∫∑t ph√≤ng m·ªõi. D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã b√™n d∆∞·ªõi v√† c√≥ th·ªÉ ƒë∆∞·ª£c n·ªëi v√†o b·∫£ng d·ªØ li·ªáu ch√≠nh.")

    uploaded_html_file_tab = st.file_uploader("T·∫£i l√™n file HTML ƒë·∫∑t ph√≤ng m·ªõi", type=['html'], key="html_processor_uploader")

    if 'processed_html_data_tab' not in st.session_state:
        st.session_state.processed_html_data_tab = None

    if uploaded_html_file_tab is not None:
        with st.spinner(f"ƒêang x·ª≠ l√Ω file HTML: {uploaded_html_file_tab.name}..."):
            df_from_html, _ = load_data_from_file(uploaded_html_file_tab)
        
        if df_from_html is not None and not df_from_html.empty:
            st.session_state.processed_html_data_tab = df_from_html
            st.success(f"ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng file: {uploaded_html_file_tab.name}. T√¨m th·∫•y {len(df_from_html)} ƒë·∫∑t ph√≤ng.")
        else:
            st.session_state.processed_html_data_tab = None
            st.error(f"Kh√¥ng th·ªÉ x·ª≠ l√Ω file {uploaded_html_file_tab.name} ho·∫∑c file kh√¥ng ch·ª©a d·ªØ li·ªáu h·ª£p l·ªá.")
    
    if st.session_state.processed_html_data_tab is not None:
        st.subheader("D·ªØ li·ªáu t·ª´ file HTML v·ª´a t·∫£i l√™n:")
        st.dataframe(st.session_state.processed_html_data_tab, height=300)

        if st.button("‚ûï N·ªëi d·ªØ li·ªáu n√†y v√†o B·∫£ng d·ªØ li·ªáu ch√≠nh", key="append_html_data_to_main_df_button"):
            if st.session_state.df is not None and st.session_state.processed_html_data_tab is not None:
                main_df_current = st.session_state.df.copy()
                html_df_to_append = st.session_state.processed_html_data_tab.copy()

                for col_dt in ['Check-in Date', 'Check-out Date', 'Booking Date']:
                    if col_dt in main_df_current.columns:
                        main_df_current[col_dt] = pd.to_datetime(main_df_current[col_dt], errors='coerce')
                    if col_dt in html_df_to_append.columns:
                        html_df_to_append[col_dt] = pd.to_datetime(html_df_to_append[col_dt], errors='coerce')
                
                num_skipped_due_to_name_and_date = 0
                rows_to_append_from_html = []
                skipped_guest_names_for_notification = set()

                if 'T√™n ng∆∞·ªùi ƒë·∫∑t' in main_df_current.columns and 'T√™n ng∆∞·ªùi ƒë·∫∑t' in html_df_to_append.columns and \
                   'Check-in Date' in main_df_current.columns and 'Check-in Date' in html_df_to_append.columns:
                    
                    main_df_current['Check-in Date'] = pd.to_datetime(main_df_current['Check-in Date']).dt.date
                    html_df_to_append['Check-in Date'] = pd.to_datetime(html_df_to_append['Check-in Date']).dt.date

                    guest_checkin_map = main_df_current.groupby('T√™n ng∆∞·ªùi ƒë·∫∑t')['Check-in Date'].apply(set).to_dict()

                    for index, html_row in html_df_to_append.iterrows():
                        guest_name_html = html_row['T√™n ng∆∞·ªùi ƒë·∫∑t']
                        check_in_date_html = html_row['Check-in Date']
                        
                        is_duplicate_by_name_and_date = False
                        if guest_name_html in guest_checkin_map:
                            if check_in_date_html in guest_checkin_map[guest_name_html]:
                                is_duplicate_by_name_and_date = True
                                skipped_guest_names_for_notification.add(guest_name_html)
                        
                        if not is_duplicate_by_name_and_date:
                            rows_to_append_from_html.append(html_row)
                        else:
                            num_skipped_due_to_name_and_date += 1
                    
                    df_to_append_final = pd.DataFrame(rows_to_append_from_html) if rows_to_append_from_html else pd.DataFrame(columns=html_df_to_append.columns)
                
                elif ('T√™n ng∆∞·ªùi ƒë·∫∑t' not in main_df_current.columns or 'T√™n ng∆∞·ªùi ƒë·∫∑t' not in html_df_to_append.columns or \
                      'Check-in Date' not in main_df_current.columns or 'Check-in Date' not in html_df_to_append.columns) and \
                     (not main_df_current.empty and not html_df_to_append.empty and 
                      (('T√™n ng∆∞·ªùi ƒë·∫∑t' in main_df_current.columns and 'Check-in Date' in main_df_current.columns) or 
                       ('T√™n ng∆∞·ªùi ƒë·∫∑t' in html_df_to_append.columns and 'Check-in Date' in html_df_to_append.columns))):
                    st.warning("Kh√¥ng th·ªÉ th·ª±c hi·ªán l·ªçc tr√πng theo t√™n kh√°ch v√† ng√†y check-in do thi·∫øu c·ªôt 'T√™n ng∆∞·ªùi ƒë·∫∑t' ho·∫∑c 'Check-in Date' ·ªü m·ªôt trong c√°c b·∫£ng. Ti·∫øp t·ª•c n·ªëi to√†n b·ªô d·ªØ li·ªáu HTML (sau ƒë√≥ s·∫Ω l·ªçc theo M√£ ƒêP).")
                    df_to_append_final = html_df_to_append
                else:
                    df_to_append_final = html_df_to_append
                
                combined_df = pd.concat([main_df_current, df_to_append_final], ignore_index=True)
                
                initial_row_count_after_concat = len(combined_df)
                num_duplicates_by_id = 0
                if 'S·ªë ƒë·∫∑t ph√≤ng' in combined_df.columns:
                    if not combined_df.empty: 
                        combined_df.drop_duplicates(subset=['S·ªë ƒë·∫∑t ph√≤ng'], keep='first', inplace=True)
                        num_duplicates_by_id = initial_row_count_after_concat - len(combined_df)
                
                st.session_state.df = combined_df.reset_index(drop=True)
                st.session_state.active_bookings = st.session_state.df[st.session_state.df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy()
                st.session_state.room_types = get_cleaned_room_types(st.session_state.df)
                
                if skipped_guest_names_for_notification:
                    skipped_names_str = ", ".join(sorted(list(skipped_guest_names_for_notification)))
                    st.warning(f"L∆∞u √Ω: {num_skipped_due_to_name_and_date} ƒë·∫∑t ph√≤ng t·ª´ HTML cho kh√°ch ({skipped_names_str}) ƒë√£ b·ªã b·ªè qua do tr√πng t√™n v√† ng√†y check-in v·ªõi ƒë·∫∑t ph√≤ng hi·ªán c√≥.")

                if num_duplicates_by_id > 0:
                    st.info(f"{num_duplicates_by_id} ƒë·∫∑t ph√≤ng b·ªï sung ƒë√£ b·ªã lo·∫°i b·ªè do M√£ ƒê·∫∑t Ph√≤ng (sau khi x·ª≠ l√Ω tr√πng t√™n/ng√†y).")

                if not skipped_guest_names_for_notification and num_duplicates_by_id == 0:
                    st.success("ƒê√£ n·ªëi d·ªØ li·ªáu t·ª´ HTML v√†o b·∫£ng ch√≠nh. Kh√¥ng c√≥ h√†ng n√†o b·ªã lo·∫°i b·ªè do tr√πng l·∫∑p.")
                else:
                    st.success("Ho√†n t·∫•t qu√° tr√¨nh n·ªëi d·ªØ li·ªáu t·ª´ HTML. Vui l√≤ng xem c√°c th√¥ng b√°o (n·∫øu c√≥) ·ªü tr√™n ƒë·ªÉ bi·∫øt chi ti·∫øt v·ªÅ c√°c h√†ng b·ªã b·ªè qua.")
                
                st.info("Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu ·ªü tab 'Qu·∫£n l√Ω ƒë·∫∑t ph√≤ng'.")
                st.session_state.processed_html_data_tab = None
                st.rerun()
            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ch√≠nh ho·∫∑c d·ªØ li·ªáu HTML ƒë·ªÉ th·ª±c hi·ªán n·ªëi.")

# --- TAB M·∫™U TIN NH·∫ÆN ---
with tab_message_templates:
    st.header("üíå Qu·∫£n l√Ω M·∫´u Tin Nh·∫Øn")

    st.subheader("ƒê·ªìng b·ªô v·ªõi Google Sheets (ƒê·ªãnh d·∫°ng 3 c·ªôt)")
    
    creds_path_msg = "streamlit-api-461302-5dfbcb4beaba.json"
    sheet_id_msg = st.session_state.get("gsheet_id", "13kQETOUGCVUwUqZrxeLy-WAj3b17SugI4L8Oq09SX2w")
    worksheet_name_msg = "MessageTemplate"
    creds_dict_msg = st.secrets["gcp_service_account"]

    col_gsheet1, col_gsheet2 = st.columns(2)

    with col_gsheet1:
        if st.button("üì• T·∫£i m·∫´u t·ª´ Google Sheets", key="load_templates_from_gsheet_v3", use_container_width=True):
            try:
                with st.spinner(f"ƒêang t·∫£i m·∫´u t·ª´ Google Sheet '{worksheet_name_msg}'..."):
                    df_templates = import_from_gsheet(sheet_id_msg, creds_dict_msg, worksheet_name_msg)
                    
                    if df_templates is not None and not df_templates.empty and all(c in df_templates.columns for c in ['Category', 'Label', 'Message']):
                        templates = {}
                        for _, row in df_templates.iterrows():
                            category = row['Category']
                            label = row['Label']
                            message = row['Message']
                            if category not in templates:
                                templates[category] = []
                            templates[category].append((label, message))
                        
                        st.session_state.message_templates_dict = templates
                        st.session_state.raw_template_content_for_download = format_templates_to_text(templates)
                        
                        st.success(f"ƒê√£ t·∫£i v√† l√†m m·ªõi m·∫´u tin nh·∫Øn t·ª´ Google Sheets th√†nh c√¥ng!")
                        st.rerun()
                    else:
                        st.warning("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ho·∫∑c sai ƒë·ªãnh d·∫°ng (c·∫ßn c·ªôt Category, Label, Message).")
            except Exception as e:
                st.error(f"L·ªói khi t·∫£i m·∫´u tin nh·∫Øn t·ª´ Google Sheets: {e}")

    with col_gsheet2:
        if st.button("üì§ L∆∞u m·∫´u l√™n Google Sheets", key="save_templates_to_gsheet_v3", use_container_width=True, type="primary"):
            try:
                with st.spinner(f"ƒêang l∆∞u m·∫´u l√™n Google Sheet '{worksheet_name_msg}'..."):
                    current_templates = st.session_state.get('message_templates_dict')
                    if current_templates:
                        template_list_for_df = []
                        for category, labeled_messages in current_templates.items():
                            for label, message in labeled_messages:
                                template_list_for_df.append({
                                    'Category': category,
                                    'Label': label,
                                    'Message': message
                                })

                        if template_list_for_df:
                            df_to_upload = pd.DataFrame(template_list_for_df)
                            upload_to_gsheet(df_to_upload, sheet_id_msg, creds_dict_msg, worksheet_name_msg)
                            st.success("ƒê√£ l∆∞u th√†nh c√¥ng t·∫•t c·∫£ m·∫´u tin nh·∫Øn l√™n Google Sheets!")
                        else:
                            st.warning("Kh√¥ng c√≥ m·∫´u tin nh·∫Øn ƒë·ªÉ l∆∞u.")
                    else:
                        st.warning("Kh√¥ng c√≥ m·∫´u tin nh·∫Øn n√†o trong h·ªá th·ªëng ƒë·ªÉ l∆∞u.")
            except Exception as e:
                st.error(f"L·ªói khi l∆∞u m·∫´u tin nh·∫Øn l√™n Google Sheets: {e}")

    st.markdown("---")
    st.subheader("Th√™m ho·∫∑c C·∫≠p nh·∫≠t M·∫´u Tin Nh·∫Øn")
    with st.form("add_template_form", clear_on_submit=True):
        new_template_category = st.text_input("Ch·ªß ƒë·ªÅ ch√≠nh (VD: CHECK OUT, WIFI INFO):").upper().strip()
        new_template_label = st.text_input("Nh√£n ph·ª• (VD: 1., 2., ho·∫∑c ƒë·ªÉ tr·ªëng cho tin nh·∫Øn m·∫∑c ƒë·ªãnh):").strip()
        new_template_message = st.text_area("N·ªôi dung tin nh·∫Øn:", height=150)
        submit_add_template = st.form_submit_button("‚ûï Th√™m / C·∫≠p nh·∫≠t m·∫´u n√†y")

        if submit_add_template:
            if not new_template_category or not new_template_message:
                st.error("Ch·ªß ƒë·ªÅ ch√≠nh v√† N·ªôi dung tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            else:
                label_to_add = new_template_label if new_template_label else "DEFAULT"
                current_templates = st.session_state.get('message_templates_dict', {}).copy()
                
                if new_template_category not in current_templates:
                    current_templates[new_template_category] = []
                
                label_exists_at_index = -1
                for idx, (lbl, _) in enumerate(current_templates[new_template_category]):
                    if lbl == label_to_add:
                        label_exists_at_index = idx
                        break
                
                if label_exists_at_index != -1:
                    current_templates[new_template_category][label_exists_at_index] = (label_to_add, new_template_message)
                    st.success(f"ƒê√£ c·∫≠p nh·∫≠t m·∫´u tin nh·∫Øn '{label_to_add}' trong ch·ªß ƒë·ªÅ '{new_template_category}'.")
                else:
                    current_templates[new_template_category].append((label_to_add, new_template_message))
                    st.success(f"ƒê√£ th√™m m·∫´u tin nh·∫Øn '{label_to_add}' v√†o ch·ªß ƒë·ªÅ '{new_template_category}'.")
                
                st.session_state.message_templates_dict = current_templates
                st.session_state.raw_template_content_for_download = format_templates_to_text(current_templates)
                st.rerun()

    st.markdown("---")
    st.subheader("Danh S√°ch M·∫´u Tin Nh·∫Øn Hi·ªán T·∫°i")

    if not st.session_state.get('message_templates_dict'):
        st.info("Ch∆∞a c√≥ m·∫´u tin nh·∫Øn n√†o. H√£y th√™m m·ªõi ho·∫∑c t·∫£i t·ª´ Google Sheets.")
    else:
        for category, labeled_messages in sorted(st.session_state.message_templates_dict.items()):
            with st.expander(f"Ch·ªß ƒë·ªÅ: {category}", expanded=False):
                if not labeled_messages:
                    st.caption("Kh√¥ng c√≥ tin nh·∫Øn n√†o cho ch·ªß ƒë·ªÅ n√†y.")
                    continue
                for i, (label, message) in enumerate(labeled_messages):
                    st.markdown(f"**Nh√£n: `{label}`**")
                    st.text_area(
                        label=f"Content for {label}",
                        value=message,
                        height=max(80, len(message.split('\n')) * 20 + 20),
                        key=f"msg_{category}_{i}", 
                        disabled=True,
                        label_visibility="collapsed"
                    )
                    if i < len(labeled_messages) - 1:
                        st.markdown("---")

# --- SIDEBAR CU·ªêI TRANG ---
st.sidebar.markdown("---"); st.sidebar.subheader("Th√¥ng tin & Ti·ªán √≠ch")

if st.sidebar.button("üìß G·ª≠i C·∫≠p Nh·∫≠t Telegram H√†ng Ng√†y", key="send_daily_telegram_update_button"):
    asyncio.run(send_daily_status_telegram())

st.sidebar.info("""üè® **H·ªá th·ªëng Qu·∫£n l√Ω Ph√≤ng Kh√°ch s·∫°n v3.2.6**\n\n**T√≠nh nƒÉng ch√≠nh:**\n- Theo d√µi t√¨nh tr·∫°ng ph√≤ng.\n- L·ªãch tr·ª±c quan.\n- Qu·∫£n l√Ω ƒë·∫∑t ph√≤ng chi ti·∫øt.\n- Ph√¢n t√≠ch doanh thu.\n- Th√™m ƒë·∫∑t ph√≤ng m·ªõi (th·ªß c√¥ng & t·ª´ ·∫£nh).\n- Xu·∫•t d·ªØ li·ªáu CSV & HTML.""")

if st.sidebar.button("üîÑ L√†m m·ªõi d·ªØ li·ªáu & T·∫£i l·∫°i t·ª´ ƒë·∫ßu", key="refresh_data_button_key_final_v2", help="X√≥a to√†n b·ªô d·ªØ li·ªáu v√† b·∫Øt ƒë·∫ßu l·∫°i."):
    keys_to_clear_sidebar = [
        'df', 'active_bookings', 'room_types', 'data_source', 'uploaded_file_name', 
        'last_action_message', 'current_date_calendar', 'selected_calendar_date', 
        'booking_sort_column', 'booking_sort_ascending', 'editing_booking_id_for_dialog',
        'add_form_check_in_final', 'add_form_check_out_final', 
        'message_templates_dict', 'raw_template_content_for_download',
        'image_extracted_data_log', 'image_to_process', 'extracted_list_data'
    ]
    form_keys_to_clear_refresh = [
        "form_v8_guest_name", "form_v8_room_type", "form_v8_genius",
        "form_v8_status", "form_v8_total_payment", "form_v8_commission",
        "form_v8_currency", "form_v8_booking_id", "form_v8_nguoi_thu_tien"
    ]
    keys_to_clear_sidebar.extend(form_keys_to_clear_refresh)

    for key in list(st.session_state.keys()):
        if key.startswith("select_booking_cb_") or key.startswith("dialog_cin_") or key.startswith("dialog_cout_") or key.startswith("tpl_cat_"):
            del st.session_state[key]
            
    for key_to_del_sidebar in keys_to_clear_sidebar:
        if key_to_del_sidebar in st.session_state: 
            del st.session_state[key_to_del_sidebar]
    st.rerun()

if active_bookings is not None and not active_bookings.empty and room_types:
    st.sidebar.markdown("---"); st.sidebar.subheader("üîî Th√¥ng b√°o nhanh")
    notifications_list_sidebar = []
    today_sb_notif_date = datetime.date.today()
    tomorrow_sb_notif_date = today_sb_notif_date + timedelta(days=1)
    for room_type_alert_sb_item in room_types: 
        availability_sb_room_tomorrow = get_room_availability(tomorrow_sb_notif_date, active_bookings, [room_type_alert_sb_item], ROOM_UNIT_PER_ROOM_TYPE)
        available_tomorrow_count = availability_sb_room_tomorrow.get(room_type_alert_sb_item, ROOM_UNIT_PER_ROOM_TYPE)
        room_display_name_sb = room_type_alert_sb_item[:20] + "..." if len(room_type_alert_sb_item) > 20 else room_type_alert_sb_item
        if available_tomorrow_count == 0: notifications_list_sidebar.append(f"üî¥ **{room_display_name_sb}**: H·∫æT PH√íNG ng√†y mai!")
        elif available_tomorrow_count == 1: notifications_list_sidebar.append(f"üü° **{room_display_name_sb}**: Ch·ªâ c√≤n 1 ph√≤ng ({available_tomorrow_count} ƒë∆°n v·ªã) ng√†y mai.")
        elif available_tomorrow_count < ROOM_UNIT_PER_ROOM_TYPE : notifications_list_sidebar.append(f"üü† **{room_display_name_sb}**: C√≤n {available_tomorrow_count} ph√≤ng ng√†y mai.")

    today_activity_sb_data = get_daily_activity(today_sb_notif_date, active_bookings)
    if today_activity_sb_data['check_in']: notifications_list_sidebar.append(f"üõ¨ **{len(today_activity_sb_data['check_in'])}** check-in h√¥m nay.")
    if today_activity_sb_data['check_out']: notifications_list_sidebar.append(f"üõ´ **{len(today_activity_sb_data['check_out'])}** check-out h√¥m nay.")
    
    overall_tomorrow_info = get_overall_calendar_day_info(tomorrow_sb_notif_date, active_bookings, TOTAL_HOTEL_CAPACITY)
    if overall_tomorrow_info['available_units'] == 0:
        notifications_list_sidebar.append(f"üÜò **TO√ÄN KH√ÅCH S·∫†N**: H·∫æT PH√íNG ng√†y mai!")
    elif overall_tomorrow_info['available_units'] == 1:
        notifications_list_sidebar.append(f"‚ö†Ô∏è **TO√ÄN KH√ÅCH S·∫†N**: Ch·ªâ c√≤n 1 ph√≤ng TR·ªêNG ng√†y mai.")

    if notifications_list_sidebar:
        for notif_item_sb in notifications_list_sidebar: st.sidebar.warning(notif_item_sb)
    else: st.sidebar.success("‚úÖ M·ªçi ho·∫°t ƒë·ªông ƒë·ªÅu ·ªïn ƒë·ªãnh!")

st.sidebar.markdown("---"); st.sidebar.subheader("Xu·∫•t d·ªØ li·ªáu")
df_main_export_final = st.session_state.get('df')
if df_main_export_final is not None and not df_main_export_final.empty:
    df_export_final_copy_csv = df_main_export_final.copy()
    date_columns_to_format_export = ['Check-in Date', 'Check-out Date', 'Booking Date']
    for col_date_export_final_item in date_columns_to_format_export:
        if col_date_export_final_item in df_export_final_copy_csv.columns:
            df_export_final_copy_csv[col_date_export_final_item] = pd.to_datetime(df_export_final_copy_csv[col_date_export_final_item], errors='coerce').dt.strftime('%d/%m/%Y')
    try:
        full_csv_data_final_export = df_export_final_copy_csv.to_csv(index=False).encode('utf-8-sig')
        st.sidebar.download_button(label="üìã T·∫£i xu·ªëng to√†n b·ªô d·ªØ li·ªáu (CSV)", data=full_csv_data_final_export, file_name=f"DanhSachDatPhong_{datetime.date.today().strftime('%Y%m%d')}.csv", mime="text/csv", key="download_full_csv_key_final_v2", help="T·∫£i xu·ªëng to√†n b·ªô d·ªØ li·ªáu ƒë·∫∑t ph√≤ng hi·ªán t·∫°i.")
    except Exception as e_export_final: st.sidebar.error(f"L·ªói khi chu·∫©n b·ªã file CSV: {e_export_final}")

    try:
        df_html_export = df_main_export_final.copy()
        display_columns_for_html = [
            'S·ªë ƒë·∫∑t ph√≤ng', 'T√™n ng∆∞·ªùi ƒë·∫∑t', 'T√™n ch·ªó ngh·ªâ',
            'Check-in Date', 'Check-out Date', 'Stay Duration',
            'Gi√° m·ªói ƒë√™m', 'T·ªïng thanh to√°n', 'T√¨nh tr·∫°ng', 'Booking Date',
            'Ng∆∞·ªùi thu ti·ªÅn'
        ]
        existing_display_columns_html = [col for col in display_columns_for_html if col in df_html_export.columns]

        df_html_export_subset = df_html_export[existing_display_columns_html].copy() if existing_display_columns_html else df_html_export.copy()

        for col_date_html in date_columns_to_format_export:
            if col_date_html in df_html_export_subset.columns:
                df_html_export_subset.loc[:, col_date_html] = pd.to_datetime(df_html_export_subset[col_date_html], errors='coerce').dt.strftime('%d/%m/%Y')

        base_display_columns_map_html = {
            'S·ªë ƒë·∫∑t ph√≤ng': 'M√£ ƒêP', 'T√™n ng∆∞·ªùi ƒë·∫∑t': 'Kh√°ch',
            'T√™n ch·ªó ngh·ªâ': 'Lo·∫°i ph√≤ng', 'Check-in Date': 'Check-in',
            'Check-out Date': 'Check-out', 'Stay Duration': 'S·ªë ƒë√™m',
            'T√¨nh tr·∫°ng': 'Tr·∫°ng th√°i', 'T·ªïng thanh to√°n': 'T·ªïng ti·ªÅn (VND)',
            'Gi√° m·ªói ƒë√™m': 'Gi√°/ƒë√™m (VND)',
            'Booking Date': 'Ng√†y th√™m kh√°ch',
            'Ng∆∞·ªùi thu ti·ªÅn': 'Ng∆∞·ªùi thu ti·ªÅn'
        }
        df_html_export_subset_renamed = df_html_export_subset.rename(columns=base_display_columns_map_html)

        html_data = df_html_export_subset_renamed.to_html(index=False, border=1, classes="dataframe_html_export table table-striped table-hover", justify="center", escape=False)

        html_string_final = f"""
        <html>
            <head>
                <title>Danh S√°ch ƒê·∫∑t Ph√≤ng</title>
                <meta charset="UTF-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 20px; }}
                    .dataframe_html_export {{
                        border-collapse: collapse;
                        width: 90%;
                        margin: 20px auto;
                        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    }}
                    .dataframe_html_export th, .dataframe_html_export td {{
                        border: 1px solid #ddd;
                        padding: 10px;
                        text-align: left;
                    }}
                    .dataframe_html_export th {{
                        background-color: #f2f2f2;
                        font-weight: bold;
                    }}
                    .dataframe_html_export tr:nth-child(even) {{background-color: #f9f9f9;}}
                    .dataframe_html_export tr:hover {{background-color: #f1f1f1;}}
                    h1 {{ text-align: center; color: #333; }}
                </style>
            </head>
            <body>
                <h1>Danh S√°ch ƒê·∫∑t Ph√≤ng - Ng√†y {datetime.date.today().strftime('%d/%m/%Y')}</h1>
                {html_data}
            </body>
        </html>
        """

        st.sidebar.download_button(
            label="üåê T·∫£i xu·ªëng to√†n b·ªô d·ªØ li·ªáu (HTML)",
            data=html_string_final.encode('utf-8'),
            file_name=f"DanhSachDatPhong_{datetime.date.today().strftime('%Y%m%d')}.html",
            mime="text/html",
            key="download_full_html_key",
            help="T·∫£i xu·ªëng to√†n b·ªô d·ªØ li·ªáu ƒë·∫∑t ph√≤ng hi·ªán t·∫°i d∆∞·ªõi d·∫°ng file HTML."
        )
    except Exception as e_export_html:
        st.sidebar.error(f"L·ªói khi chu·∫©n b·ªã file HTML ƒë·ªÉ xu·∫•t: {e_export_html}")

else:
    st.sidebar.info("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.")

# --- DIALOG CH·ªàNH S·ª¨A ƒê·∫∂T PH√íNG ---
if st.session_state.get('editing_booking_id_for_dialog') is not None:
    booking_id_to_edit = st.session_state.editing_booking_id_for_dialog
    booking_to_edit_df = None
    original_booking_index_edit = None

    if st.session_state.get('df') is not None and 'S·ªë ƒë·∫∑t ph√≤ng' in st.session_state.df.columns:
        booking_to_edit_df_list = st.session_state.df[st.session_state.df['S·ªë ƒë·∫∑t ph√≤ng'] == booking_id_to_edit]
        if not booking_to_edit_df_list.empty:
            booking_to_edit_df = booking_to_edit_df_list.iloc[0:1]
            original_booking_index_edit = booking_to_edit_df.index[0]
        elif str(booking_id_to_edit).startswith("index_"):
            try:
                idx_val = int(str(booking_id_to_edit).split("_")[1])
                if idx_val in st.session_state.df.index:
                    booking_to_edit_df = st.session_state.df.loc[[idx_val]]
                    original_booking_index_edit = idx_val
                    if 'S·ªë ƒë·∫∑t ph√≤ng' in booking_to_edit_df.columns and pd.notna(booking_to_edit_df.iloc[0]['S·ªë ƒë·∫∑t ph√≤ng']):
                        st.session_state.editing_booking_id_for_dialog = booking_to_edit_df.iloc[0]['S·ªë ƒë·∫∑t ph√≤ng']
                        booking_id_to_edit = st.session_state.editing_booking_id_for_dialog

            except (IndexError, ValueError):
                st.error(f"Kh√¥ng th·ªÉ t√¨m th·∫•y ƒë·∫∑t ph√≤ng v·ªõi ID ch·ªâ m·ª•c kh√¥ng h·ª£p l·ªá: {booking_id_to_edit}")
                st.session_state.editing_booking_id_for_dialog = None
                st.rerun()


    if booking_to_edit_df is not None and not booking_to_edit_df.empty:
        booking_data_edit = booking_to_edit_df.iloc[0].to_dict()

        @st.dialog(f"Ch·ªânh s·ª≠a ƒê·∫∑t ph√≤ng: {booking_id_to_edit}")
        def edit_booking_dialog():
            st.subheader(f"Ch·ªânh s·ª≠a th√¥ng tin cho M√£ ƒêP: {booking_data_edit.get('S·ªë ƒë·∫∑t ph√≤ng', booking_id_to_edit)}")

            def get_val(key, default_val):
                val = booking_data_edit.get(key)
                if pd.isna(val): return default_val
                return val

            try:
                default_check_in_date_edit = pd.to_datetime(get_val('Check-in Date', datetime.date.today())).date()
            except: default_check_in_date_edit = datetime.date.today()

            try:
                default_check_out_date_edit = pd.to_datetime(get_val('Check-out Date', datetime.date.today() + timedelta(days=1))).date()
            except: default_check_out_date_edit = datetime.date.today() + timedelta(days=1)
            
            if default_check_out_date_edit <= default_check_in_date_edit:
                default_check_out_date_edit = default_check_in_date_edit + timedelta(days=1)


            with st.form(key=f"edit_booking_form_dialog_{booking_id_to_edit}"):
                st.subheader("Th√¥ng tin ƒë·∫∑t ph√≤ng")
                edit_col1, edit_col2 = st.columns(2)
                with edit_col1:
                    edited_guest_name = st.text_input("T√™n kh√°ch*", value=str(get_val('T√™n ng∆∞·ªùi ƒë·∫∑t', '')), key=f"edit_guest_name_{booking_id_to_edit}")
                    
                    current_room_types_edit = st.session_state.get('room_types', [])
                    default_room_type_edit = str(get_val('T√™n ch·ªó ngh·ªâ', ''))
                    room_type_index_edit = current_room_types_edit.index(default_room_type_edit) if default_room_type_edit in current_room_types_edit else 0
                    edited_room_type = st.selectbox("Lo·∫°i ph√≤ng*", options=current_room_types_edit, index=room_type_index_edit, key=f"edit_room_type_{booking_id_to_edit}")

                    genius_options_edit = ["Kh√¥ng", "C√≥"]
                    default_genius_edit = str(get_val('Th√†nh vi√™n Genius', 'Kh√¥ng'))
                    genius_index_edit = genius_options_edit.index(default_genius_edit) if default_genius_edit in genius_options_edit else 0
                    edited_genius_member = st.selectbox("Th√†nh vi√™n Genius", options=genius_options_edit, index=genius_index_edit, key=f"edit_genius_{booking_id_to_edit}")

                with edit_col2:
                    edited_check_in_date = st.date_input("Ng√†y check-in*", value=default_check_in_date_edit, key=f"edit_check_in_{booking_id_to_edit}")
                    
                    min_checkout_for_edit = edited_check_in_date + timedelta(days=1)
                    current_checkout_val_for_edit = default_check_out_date_edit
                    if current_checkout_val_for_edit < min_checkout_for_edit:
                        current_checkout_val_for_edit = min_checkout_for_edit

                    edited_check_out_date = st.date_input("Ng√†y check-out*", value=current_checkout_val_for_edit, min_value=min_checkout_for_edit, key=f"edit_check_out_{booking_id_to_edit}")
                    
                    status_options_edit = ["OK", "ƒê√£ h·ªßy", "Ch·ªù x·ª≠ l√Ω"]
                    default_status_edit = str(get_val('T√¨nh tr·∫°ng', 'OK'))
                    status_index_edit = status_options_edit.index(default_status_edit) if default_status_edit in status_options_edit else 0
                    edited_booking_status = st.selectbox("Tr·∫°ng th√°i ƒë·∫∑t ph√≤ng", options=status_options_edit, index=status_index_edit, key=f"edit_status_{booking_id_to_edit}")

                st.markdown("---"); st.subheader("Th√¥ng tin thanh to√°n")
                edit_col3, edit_col4 = st.columns(2)
                with edit_col3:
                    edited_total_payment = st.number_input("T·ªïng thanh to√°n (VND)*", min_value=0, value=int(float(get_val('T·ªïng thanh to√°n', 0.0))), step=50000, format="%d", key=f"edit_total_payment_{booking_id_to_edit}")
                    edited_commission = st.number_input("Hoa h·ªìng (VND)", min_value=0, value=int(float(get_val('Hoa h·ªìng', 0.0))), step=10000, format="%d", key=f"edit_commission_{booking_id_to_edit}")
                with edit_col4:
                    currency_options_edit = ["VND", "USD"]
                    default_currency_edit = str(get_val('Ti·ªÅn t·ªá', 'VND'))
                    currency_index_edit = currency_options_edit.index(default_currency_edit) if default_currency_edit in currency_options_edit else 0
                    edited_currency = st.selectbox("Ti·ªÅn t·ªá", options=currency_options_edit, index=currency_index_edit, key=f"edit_currency_{booking_id_to_edit}")
                    edited_booking_id_display_only = st.text_input("M√£ ƒë·∫∑t ph√≤ng (kh√¥ng th·ªÉ s·ª≠a)", value=str(get_val('S·ªë ƒë·∫∑t ph√≤ng', booking_id_to_edit)), disabled=True, key=f"edit_booking_id_disp_{booking_id_to_edit}")
                    
                    collector_options_edit = ["LOC LE", "THAO LE", "N/A"]
                    default_collector_edit = str(get_val('Ng∆∞·ªùi thu ti·ªÅn', 'N/A'))
                    collector_index_edit = collector_options_edit.index(default_collector_edit) if default_collector_edit in collector_options_edit else (collector_options_edit.index("N/A") if "N/A" in collector_options_edit else 0)
                    edited_collector = st.selectbox("Ng∆∞·ªùi thu ti·ªÅn*", options=collector_options_edit, index=collector_index_edit, key=f"edit_collector_{booking_id_to_edit}")


                submit_edit_button = st.form_submit_button("üíæ L∆∞u thay ƒë·ªïi", type="primary")
                
                if st.form_submit_button("H·ªßy b·ªè"):
                    st.session_state.editing_booking_id_for_dialog = None
                    st.rerun()

            if submit_edit_button:
                edit_errors = []
                if not edited_guest_name.strip(): edit_errors.append("T√™n kh√°ch kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
                if edited_check_out_date <= edited_check_in_date: edit_errors.append("Ng√†y check-out ph·∫£i sau ng√†y check-in.")
                if edited_total_payment <= 0 and edited_booking_status == "OK": edit_errors.append("T·ªïng thanh to√°n ph·∫£i > 0 cho ƒë·∫∑t ph√≤ng 'OK'.")
                if not edited_collector: edit_errors.append("Ng∆∞·ªùi thu ti·ªÅn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")

                if not edit_errors and edited_booking_status == "OK":
                    active_bookings_for_edit_check = st.session_state.get('active_bookings')
                    if active_bookings_for_edit_check is not None:
                        temp_active_bookings_for_check = active_bookings_for_edit_check[active_bookings_for_edit_check['S·ªë ƒë·∫∑t ph√≤ng'] != booking_id_to_edit]
                        
                        current_check_date_edit_avail = edited_check_in_date
                        while current_check_date_edit_avail < edited_check_out_date:
                            availability_check_specific_edit = get_room_availability(current_check_date_edit_avail, temp_active_bookings_for_check, [edited_room_type], ROOM_UNIT_PER_ROOM_TYPE)
                            if availability_check_specific_edit.get(edited_room_type, 0) <= 0:
                                edit_errors.append(f"Ph√≤ng '{edited_room_type}' ƒë√£ h·∫øt v√†o ng√†y {current_check_date_edit_avail.strftime('%d/%m/%Y')} (kh√¥ng t√≠nh ƒë·∫∑t ph√≤ng n√†y).")
                                break
                            
                            occupied_on_this_day_edit = len(temp_active_bookings_for_check[
                                (temp_active_bookings_for_check['Check-in Date'].dt.date <= current_check_date_edit_avail) &
                                (temp_active_bookings_for_check['Check-out Date'].dt.date > current_check_date_edit_avail) &
                                (temp_active_bookings_for_check['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy')
                            ])
                            if occupied_on_this_day_edit >= TOTAL_HOTEL_CAPACITY:
                                edit_errors.append(f"Ng√†y {current_check_date_edit_avail.strftime('%d/%m/%Y')} ƒë√£ c√≥ ƒë·ªß {TOTAL_HOTEL_CAPACITY} kh√°ch (kh√¥ng t√≠nh ƒë·∫∑t ph√≤ng n√†y). Kh√¥ng th·ªÉ thay ƒë·ªïi.")
                                break
                            current_check_date_edit_avail += timedelta(days=1)
                
                if edit_errors:
                    for err in edit_errors: st.error(err)
                else:
                    df_main = st.session_state.df
                    idx_to_update = original_booking_index_edit

                    if idx_to_update is not None and idx_to_update in df_main.index:
                        df_main.loc[idx_to_update, 'T√™n ng∆∞·ªùi ƒë·∫∑t'] = edited_guest_name.strip()
                        df_main.loc[idx_to_update, 'T√™n ch·ªó ngh·ªâ'] = edited_room_type
                        df_main.loc[idx_to_update, 'Th√†nh vi√™n Genius'] = edited_genius_member
                        df_main.loc[idx_to_update, 'Check-in Date'] = pd.Timestamp(edited_check_in_date)
                        df_main.loc[idx_to_update, 'Check-out Date'] = pd.Timestamp(edited_check_out_date)
                        df_main.loc[idx_to_update, 'Ng√†y ƒë·∫øn'] = f"ng√†y {edited_check_in_date.day} th√°ng {edited_check_in_date.month} nƒÉm {edited_check_in_date.year}"
                        df_main.loc[idx_to_update, 'Ng√†y ƒëi'] = f"ng√†y {edited_check_out_date.day} th√°ng {edited_check_out_date.month} nƒÉm {edited_check_out_date.year}"
                        df_main.loc[idx_to_update, 'T√¨nh tr·∫°ng'] = edited_booking_status
                        df_main.loc[idx_to_update, 'T·ªïng thanh to√°n'] = float(edited_total_payment)
                        df_main.loc[idx_to_update, 'Hoa h·ªìng'] = float(edited_commission)
                        df_main.loc[idx_to_update, 'Ti·ªÅn t·ªá'] = edited_currency
                        df_main.loc[idx_to_update, 'Ng∆∞·ªùi thu ti·ªÅn'] = edited_collector

                        stay_duration_edited = (edited_check_out_date - edited_check_in_date).days
                        df_main.loc[idx_to_update, 'Stay Duration'] = stay_duration_edited
                        df_main.loc[idx_to_update, 'Gi√° m·ªói ƒë√™m'] = round(float(edited_total_payment) / stay_duration_edited) if stay_duration_edited > 0 else 0.0
                        
                        if 'Booking Date' not in df_main.columns or pd.isna(df_main.loc[idx_to_update, 'Booking Date']):
                             df_main.loc[idx_to_update, 'Booking Date'] = pd.Timestamp(datetime.date.today())
                             df_main.loc[idx_to_update, 'ƒê∆∞·ª£c ƒë·∫∑t v√†o'] = f"ng√†y {datetime.date.today().day} th√°ng {datetime.date.today().month} nƒÉm {datetime.date.today().year}"
                        if 'V·ªã tr√≠' not in df_main.columns or pd.isna(df_main.loc[idx_to_update, 'V·ªã tr√≠']):
                             df_main.loc[idx_to_update, 'V·ªã tr√≠'] = "N/A (Ch∆∞a x√°c ƒë·ªãnh)"


                        st.session_state.df = df_main
                        st.session_state.active_bookings = st.session_state.df[st.session_state.df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy()
                        st.session_state.room_types = get_cleaned_room_types(st.session_state.df)
                        st.session_state.last_action_message = f"ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng ƒë·∫∑t ph√≤ng '{booking_id_to_edit}'."
                        st.session_state.editing_booking_id_for_dialog = None
                        st.session_state.selected_calendar_date = None

                        if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
                            telegram_message_update = f"‚úèÔ∏è ƒê·∫∑t ph√≤ng ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T!\n"
                            telegram_message_update += f"üÜî M√£ ƒêP: {booking_id_to_edit}\n"
                            telegram_message_update += f"üë§ Kh√°ch: {edited_guest_name.strip()}\n"
                            telegram_message_update += f"üè† Ph√≤ng: {edited_room_type}\n"
                            telegram_message_update += f"üìÖ Check-in: {edited_check_in_date.strftime('%d/%m/%Y')}\n"
                            telegram_message_update += f"üìÖ Check-out: {edited_check_out_date.strftime('%d/%m/%Y')}\n"
                            telegram_message_update += f"üí∞ T·ªïng TT: {edited_total_payment:,.0f} {edited_currency}\n"
                            telegram_message_update += f"‚ÑπÔ∏è Tr·∫°ng th√°i: {edited_booking_status}"
                            asyncio.run(send_telegram_message(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, telegram_message_update))

                        st.rerun()
                    else:
                        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng v·ªõi ID {booking_id_to_edit} ho·∫∑c ch·ªâ m·ª•c {idx_to_update} ƒë·ªÉ c·∫≠p nh·∫≠t trong DataFrame.")
                        st.session_state.editing_booking_id_for_dialog = None
                        st.rerun()
        
        edit_booking_dialog()
    
    elif st.session_state.get('editing_booking_id_for_dialog') is not None:
        st.error(f"Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t ph√≤ng ƒë·ªÉ ch·ªânh s·ª≠a cho ID: {st.session_state.get('editing_booking_id_for_dialog')}. ƒê·∫∑t ph√≤ng c√≥ th·ªÉ ƒë√£ b·ªã x√≥a ho·∫∑c ID kh√¥ng h·ª£p l·ªá.")
        st.session_state.editing_booking_id_for_dialog = None

# --- TAB PH√ÇN T√çCH ---
with tab_analytics:
    st.header("üìà Ph√¢n t√≠ch & B√°o c√°o")
    if df is not None and not df.empty and active_bookings is not None and not active_bookings.empty:
        st.sidebar.subheader("B·ªô l·ªçc Ph√¢n t√≠ch")
        min_analytics_filter = min_date_val; max_analytics_filter = max_date_val
        if min_analytics_filter > max_analytics_filter: max_analytics_filter = min_analytics_filter + timedelta(days=1)
        start_date_analytics = st.sidebar.date_input("Ng√†y b·∫Øt ƒë·∫ßu (ph√¢n t√≠ch C/I):", min_analytics_filter, min_value=min_analytics_filter, max_value=max_analytics_filter, key="analytics_start_date_key", help="L·ªçc theo ng√†y Check-in.")
        end_date_analytics = st.sidebar.date_input("Ng√†y k·∫øt th√∫c (ph√¢n t√≠ch C/I):", max_analytics_filter, min_value=start_date_analytics, max_value=max_analytics_filter, key="analytics_end_date_key", help="L·ªçc theo ng√†y Check-in.")
        if start_date_analytics > end_date_analytics: st.error("L·ªói: Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ sau ng√†y k·∫øt th√∫c.")
        else:
            analytics_df_filtered = active_bookings[(active_bookings['Check-in Date'].dt.date >= start_date_analytics) & (active_bookings['Check-in Date'].dt.date <= end_date_analytics)].copy()
            
            st.subheader(f"S·ªë li·ªáu t·ªïng h·ª£p ƒë·∫øn ng√†y {datetime.date.today().strftime('%d/%m/%Y')}")
            col_current_metric1, col_current_metric2 = st.columns(2)
            
            today_for_analytics = datetime.date.today()
            checked_in_to_date_df = active_bookings[
                (active_bookings['Check-in Date'].dt.date <= today_for_analytics) &
                (active_bookings['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy')
            ].copy()

            if not checked_in_to_date_df.empty:
                total_guests_checked_in_actual = len(checked_in_to_date_df)
                checked_in_to_date_df['Stay Duration'] = pd.to_numeric(checked_in_to_date_df['Stay Duration'], errors='coerce').fillna(0)
                total_nights_checked_in_actual = checked_in_to_date_df['Stay Duration'].sum()
            else:
                total_guests_checked_in_actual = 0
                total_nights_checked_in_actual = 0

            with col_current_metric1:
                st.metric("T·ªïng l∆∞·ª£t kh√°ch ƒë√£ nh·∫≠n ph√≤ng (ƒë·∫øn hi·ªán t·∫°i)", f"{total_guests_checked_in_actual:,.0f}")
            with col_current_metric2:
                st.metric("T·ªïng s·ªë ƒë√™m kh√°ch ƒë√£ nh·∫≠n ph√≤ng (ƒë·∫øn hi·ªán t·∫°i)", f"{total_nights_checked_in_actual:,.0f}")
            
            st.markdown("---")

            if not analytics_df_filtered.empty:
                st.subheader(f"S·ªë li·ªáu trong kho·∫£ng ƒë√£ ch·ªçn ({start_date_analytics.strftime('%d/%m/%Y')} ƒë·∫øn {end_date_analytics.strftime('%d/%m/%Y')})")
                col_metric_anl1, col_metric_anl2, col_metric_anl3, col_metric_anl4 = st.columns(4)
                with col_metric_anl1:
                    analytics_df_filtered['Stay Duration'] = pd.to_numeric(analytics_df_filtered['Stay Duration'], errors='coerce').fillna(0)
                    mean_stay = analytics_df_filtered['Stay Duration'].mean() if not analytics_df_filtered['Stay Duration'].empty else 0
                    st.metric("TB th·ªùi gian ·ªü (ng√†y)", f"{mean_stay:.1f}")
                with col_metric_anl2: total_nights = analytics_df_filtered['Stay Duration'].sum(); st.metric("T·ªïng s·ªë ƒë√™m ƒë√£ ƒë·∫∑t", f"{total_nights:,.0f}")
                with col_metric_anl3: mean_payment = analytics_df_filtered['T·ªïng thanh to√°n'].mean() if not analytics_df_filtered['T·ªïng thanh to√°n'].empty else 0; st.metric("TB T·ªïng TT/ƒë·∫∑t (VND)", f"{mean_payment:,.0f}")
                with col_metric_anl4: st.metric("T·ªïng l∆∞·ª£t kh√°ch (OK)", f"{len(analytics_df_filtered):,.0f}")
                st.markdown("---")
                st.subheader("Th·ªëng k√™ theo kh√°ch h√†ng")
                if 'T√™n ng∆∞·ªùi ƒë·∫∑t' in analytics_df_filtered.columns and 'T·ªïng thanh to√°n' in analytics_df_filtered.columns:
                    if 'Booking Date' not in analytics_df_filtered.columns:
                        analytics_df_filtered['Booking Date'] = pd.NaT
                    analytics_df_filtered['Booking Date'] = pd.to_datetime(analytics_df_filtered['Booking Date'], errors='coerce')
                    if 'Ng∆∞·ªùi thu ti·ªÅn' not in analytics_df_filtered.columns:
                        analytics_df_filtered['Ng∆∞·ªùi thu ti·ªÅn'] = 'N/A'

                    analytics_df_sorted_for_collector = analytics_df_filtered.sort_values(
                        by=['T√™n ng∆∞·ªùi ƒë·∫∑t', 'Booking Date'], ascending=[True, False]
                    )
                    most_recent_collector = analytics_df_sorted_for_collector.groupby('T√™n ng∆∞·ªùi ƒë·∫∑t').first()['Ng∆∞·ªùi thu ti·ªÅn']

                    guest_stats_anl = analytics_df_filtered.groupby('T√™n ng∆∞·ªùi ƒë·∫∑t').agg(
                        total_payment_sum_agg=('T·ªïng thanh to√°n', 'sum'), 
                        avg_stay_duration_agg=('Stay Duration', 'mean'), 
                        last_check_in_date_agg=('Check-in Date', 'max')
                    ).reset_index()
                    
                    guest_stats_anl = pd.merge(guest_stats_anl, most_recent_collector, on='T√™n ng∆∞·ªùi ƒë·∫∑t', how='left')
                    
                    guest_stats_anl.rename(columns={
                        'T√™n ng∆∞·ªùi ƒë·∫∑t': 'T√™n kh√°ch', 
                        'total_payment_sum_agg': 'T·ªïng thanh to√°n (VND)', 
                        'avg_stay_duration_agg': 'TB s·ªë ƒë√™m ·ªü', 
                        'last_check_in_date_agg': 'Ng√†y nh·∫≠n ph√≤ng'
                    }, inplace=True)
                    
                    guest_stats_display_anl = guest_stats_anl.copy()
                    if 'T·ªïng thanh to√°n (VND)' in guest_stats_display_anl.columns: guest_stats_display_anl['T·ªïng thanh to√°n (VND)'] = guest_stats_display_anl['T·ªïng thanh to√°n (VND)'].map('{:,.0f}'.format)
                    if 'TB s·ªë ƒë√™m ·ªü' in guest_stats_display_anl.columns: guest_stats_display_anl['TB s·ªë ƒë√™m ·ªü'] = guest_stats_display_anl['TB s·ªë ƒë√™m ·ªü'].map('{:.1f}'.format)
                    if 'Ng√†y nh·∫≠n ph√≤ng' in guest_stats_display_anl.columns: guest_stats_display_anl['Ng√†y nh·∫≠n ph√≤ng'] = pd.to_datetime(guest_stats_display_anl['Ng√†y nh·∫≠n ph√≤ng']).dt.strftime('%d/%m/%Y')
                    
                    cols_display_order = ['T√™n kh√°ch', 'T·ªïng thanh to√°n (VND)', 'TB s·ªë ƒë√™m ·ªü', 'Ng√†y nh·∫≠n ph√≤ng']
                    existing_cols_for_display = [col for col in cols_display_order if col in guest_stats_display_anl.columns]

                    st.dataframe(guest_stats_display_anl[existing_cols_for_display].set_index('T√™n kh√°ch').sort_values(by='T·ªïng thanh to√°n (VND)', ascending=False), use_container_width=True)
                    if not guest_stats_anl.empty and 'T·ªïng thanh to√°n (VND)' in guest_stats_anl.columns:
                        guest_stats_anl_chart = guest_stats_anl.copy()
                        guest_stats_anl_chart['T·ªïng thanh to√°n (VND)'] = pd.to_numeric(guest_stats_anl_chart['T·ªïng thanh to√°n (VND)'].replace({',': ''}, regex=True), errors='coerce').fillna(0)
                        guest_revenue_chart_df_anl = guest_stats_anl_chart.sort_values(by='T·ªïng thanh to√°n (VND)', ascending=False).head(15)
                        fig_guest_revenue_anl = px.bar(guest_revenue_chart_df_anl, x='T√™n kh√°ch', y='T·ªïng thanh to√°n (VND)', title='Top 15 kh√°ch h√†ng theo t·ªïng thanh to√°n', labels={'T·ªïng thanh to√°n (VND)': 'T·ªïng thanh to√°n (VND)', 'T√™n kh√°ch': 'T√™n kh√°ch h√†ng'}, color='T·ªïng thanh to√°n (VND)', color_continuous_scale=px.colors.sequential.Viridis, text_auto='.2s')
                        fig_guest_revenue_anl.update_layout(xaxis_tickangle=-45, height=400); st.plotly_chart(fig_guest_revenue_anl, use_container_width=True)
                else: st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu kh√°ch h√†ng ƒë·ªÉ ph√¢n t√≠ch.")
                st.markdown("---")
                st.subheader("Ph√¢n t√≠ch kh√°ch h√†ng theo Genius")
                if 'Th√†nh vi√™n Genius' in analytics_df_filtered.columns:
                    col_genius_anl1, col_genius_anl2 = st.columns(2)
                    with col_genius_anl1:
                        genius_counts_anl = analytics_df_filtered['Th√†nh vi√™n Genius'].value_counts().reset_index(); genius_counts_anl.columns = ['Lo·∫°i th√†nh vi√™n', 'S·ªë l∆∞·ª£ng ƒë·∫∑t ph√≤ng']
                        fig_genius_pie_anl = px.pie(genius_counts_anl, names='Lo·∫°i th√†nh vi√™n', values='S·ªë l∆∞·ª£ng ƒë·∫∑t ph√≤ng', title='T·ª∑ l·ªá ƒë·∫∑t ph√≤ng theo th√†nh vi√™n Genius', hole=0.3)
                        fig_genius_pie_anl.update_traces(textposition='inside', textinfo='percent+label'); st.plotly_chart(fig_genius_pie_anl, use_container_width=True)
                    with col_genius_anl2:
                        revenue_by_genius_anl = analytics_df_filtered.groupby('Th√†nh vi√™n Genius')['T·ªïng thanh to√°n'].sum().reset_index()
                        fig_genius_revenue_bar_anl = px.bar(revenue_by_genius_anl, x='Th√†nh vi√™n Genius', y='T·ªïng thanh to√°n', title='T·ªïng thanh to√°n theo lo·∫°i th√†nh vi√™n Genius', labels={'T·ªïng thanh to√°n': 'T·ªïng thanh to√°n (VND)'}, color='Th√†nh vi√™n Genius', text_auto='.2s')
                        st.plotly_chart(fig_genius_revenue_bar_anl, use_container_width=True)
                else: st.info("Thi·∫øu c·ªôt 'Th√†nh vi√™n Genius' ƒë·ªÉ ph√¢n t√≠ch.")
                
                st.markdown("---")
                st.subheader("T·ªïng thanh to√°n theo Ng∆∞·ªùi thu ti·ªÅn")
                if 'Ng∆∞·ªùi thu ti·ªÅn' in analytics_df_filtered.columns and 'T·ªïng thanh to√°n' in analytics_df_filtered.columns:
                    df_for_collector_revenue = analytics_df_filtered.copy()
                    df_for_collector_revenue['T·ªïng thanh to√°n'] = pd.to_numeric(df_for_collector_revenue['T·ªïng thanh to√°n'], errors='coerce').fillna(0)
                    
                    collector_revenue = df_for_collector_revenue.groupby('Ng∆∞·ªùi thu ti·ªÅn')['T·ªïng thanh to√°n'].sum().reset_index()
                    collector_revenue = collector_revenue.sort_values(by='T·ªïng thanh to√°n', ascending=False)
                    
                    collector_revenue_display = collector_revenue.copy()
                    collector_revenue_display.rename(columns={'T·ªïng thanh to√°n': 'T·ªïng thanh to√°n (VND)'}, inplace=True)
                    collector_revenue_display['T·ªïng thanh to√°n (VND)'] = collector_revenue_display['T·ªïng thanh to√°n (VND)'].map('{:,.0f}'.format)
                    
                    st.dataframe(collector_revenue_display.set_index('Ng∆∞·ªùi thu ti·ªÅn'), use_container_width=True)

                    if not collector_revenue.empty:
                        fig_collector_revenue = px.bar(
                            collector_revenue, 
                            x='Ng∆∞·ªùi thu ti·ªÅn', 
                            y='T·ªïng thanh to√°n', 
                            title='T·ªïng thanh to√°n theo Ng∆∞·ªùi thu ti·ªÅn',
                            labels={'T·ªïng thanh to√°n': 'T·ªïng thanh to√°n (VND)', 'Ng∆∞·ªùi thu ti·ªÅn': 'Ng∆∞·ªùi thu ti·ªÅn'},
                            color='Ng∆∞·ªùi thu ti·ªÅn',
                            text_auto='.2s'
                        )
                        fig_collector_revenue.update_layout(height=400)
                        st.plotly_chart(fig_collector_revenue, use_container_width=True)
                else:
                    st.info("Thi·∫øu c·ªôt 'Ng∆∞·ªùi thu ti·ªÅn' ho·∫∑c 'T·ªïng thanh to√°n' ƒë·ªÉ ph√¢n t√≠ch.")

            else: st.info("Kh√¥ng c√≥ ƒë·∫∑t ph√≤ng n√†o trong kho·∫£ng ng√†y ƒë√£ ch·ªçn ƒë·ªÉ ph√¢n t√≠ch.")
    else: st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch. Vui l√≤ng t·∫£i file ƒë·∫∑t ph√≤ng.")
